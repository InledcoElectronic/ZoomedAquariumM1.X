

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Thu Dec 21 09:52:06 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text35,local,class=CODE,merge=1,delta=2
    15                           	psect	text36,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	text42,local,class=CODE,merge=1,delta=2
    18                           	psect	text43,local,class=CODE,merge=1,delta=2
    19                           	psect	text59,local,class=CODE,merge=1,delta=2
    20                           	psect	pa_nodes0,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 1.41
    24                           ; Generated 25/01/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F1508 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  008C                     	;# 
    85  008D                     	;# 
    86  008E                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0093                     	;# 
    90  0095                     	;# 
    91  0096                     	;# 
    92  0097                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009B                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  0111                     	;# 
   105  0112                     	;# 
   106  0113                     	;# 
   107  0114                     	;# 
   108  0115                     	;# 
   109  0116                     	;# 
   110  0117                     	;# 
   111  0118                     	;# 
   112  0119                     	;# 
   113  011D                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  018E                     	;# 
   117  0191                     	;# 
   118  0191                     	;# 
   119  0192                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  0197                     	;# 
   126  0199                     	;# 
   127  019A                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019C                     	;# 
   131  019D                     	;# 
   132  019E                     	;# 
   133  019F                     	;# 
   134  020C                     	;# 
   135  020D                     	;# 
   136  0211                     	;# 
   137  0211                     	;# 
   138  0212                     	;# 
   139  0212                     	;# 
   140  0213                     	;# 
   141  0213                     	;# 
   142  0214                     	;# 
   143  0214                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0216                     	;# 
   148  0216                     	;# 
   149  0217                     	;# 
   150  0217                     	;# 
   151  0391                     	;# 
   152  0392                     	;# 
   153  0393                     	;# 
   154  0394                     	;# 
   155  0395                     	;# 
   156  0396                     	;# 
   157  0498                     	;# 
   158  0498                     	;# 
   159  0499                     	;# 
   160  049A                     	;# 
   161  049B                     	;# 
   162  049B                     	;# 
   163  049C                     	;# 
   164  049D                     	;# 
   165  049E                     	;# 
   166  049F                     	;# 
   167  0611                     	;# 
   168  0612                     	;# 
   169  0613                     	;# 
   170  0613                     	;# 
   171  0614                     	;# 
   172  0615                     	;# 
   173  0616                     	;# 
   174  0616                     	;# 
   175  0617                     	;# 
   176  0618                     	;# 
   177  0619                     	;# 
   178  0619                     	;# 
   179  061A                     	;# 
   180  061B                     	;# 
   181  061C                     	;# 
   182  061C                     	;# 
   183  0691                     	;# 
   184  0692                     	;# 
   185  0693                     	;# 
   186  0694                     	;# 
   187  0695                     	;# 
   188  0F0F                     	;# 
   189  0F10                     	;# 
   190  0F11                     	;# 
   191  0F12                     	;# 
   192  0F13                     	;# 
   193  0F14                     	;# 
   194  0F15                     	;# 
   195  0F16                     	;# 
   196  0F17                     	;# 
   197  0F18                     	;# 
   198  0F19                     	;# 
   199  0F1A                     	;# 
   200  0F1B                     	;# 
   201  0F1C                     	;# 
   202  0F1D                     	;# 
   203  0F1E                     	;# 
   204  0F1F                     	;# 
   205  0F20                     	;# 
   206  0F21                     	;# 
   207  0F22                     	;# 
   208  0F23                     	;# 
   209  0F24                     	;# 
   210  0F25                     	;# 
   211  0F26                     	;# 
   212  0F27                     	;# 
   213  0F28                     	;# 
   214  0F29                     	;# 
   215  0F2A                     	;# 
   216  0F2B                     	;# 
   217  0F2C                     	;# 
   218  0F2D                     	;# 
   219  0F2E                     	;# 
   220  0F2F                     	;# 
   221  0F8C                     	;# 
   222  0F8D                     	;# 
   223  0F91                     	;# 
   224  0F95                     	;# 
   225  0F96                     	;# 
   226  0F97                     	;# 
   227  0F9C                     	;# 
   228  0F9D                     	;# 
   229  0F9E                     	;# 
   230  0FE3                     	;# 
   231  0FE4                     	;# 
   232  0FE5                     	;# 
   233  0FE6                     	;# 
   234  0FE7                     	;# 
   235  0FE8                     	;# 
   236  0FE9                     	;# 
   237  0FEA                     	;# 
   238  0FEB                     	;# 
   239  0FED                     	;# 
   240  0FEE                     	;# 
   241  0FEF                     	;# 
   242  0000                     	;# 
   243  0001                     	;# 
   244  0002                     	;# 
   245  0003                     	;# 
   246  0004                     	;# 
   247  0005                     	;# 
   248  0006                     	;# 
   249  0007                     	;# 
   250  0008                     	;# 
   251  0009                     	;# 
   252  000A                     	;# 
   253  000B                     	;# 
   254  000C                     	;# 
   255  000D                     	;# 
   256  000E                     	;# 
   257  0011                     	;# 
   258  0012                     	;# 
   259  0013                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0016                     	;# 
   263  0017                     	;# 
   264  0018                     	;# 
   265  0019                     	;# 
   266  001A                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  0111                     	;# 
   290  0112                     	;# 
   291  0113                     	;# 
   292  0114                     	;# 
   293  0115                     	;# 
   294  0116                     	;# 
   295  0117                     	;# 
   296  0118                     	;# 
   297  0119                     	;# 
   298  011D                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  018E                     	;# 
   302  0191                     	;# 
   303  0191                     	;# 
   304  0192                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0194                     	;# 
   308  0195                     	;# 
   309  0196                     	;# 
   310  0197                     	;# 
   311  0199                     	;# 
   312  019A                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019C                     	;# 
   316  019D                     	;# 
   317  019E                     	;# 
   318  019F                     	;# 
   319  020C                     	;# 
   320  020D                     	;# 
   321  0211                     	;# 
   322  0211                     	;# 
   323  0212                     	;# 
   324  0212                     	;# 
   325  0213                     	;# 
   326  0213                     	;# 
   327  0214                     	;# 
   328  0214                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0216                     	;# 
   333  0216                     	;# 
   334  0217                     	;# 
   335  0217                     	;# 
   336  0391                     	;# 
   337  0392                     	;# 
   338  0393                     	;# 
   339  0394                     	;# 
   340  0395                     	;# 
   341  0396                     	;# 
   342  0498                     	;# 
   343  0498                     	;# 
   344  0499                     	;# 
   345  049A                     	;# 
   346  049B                     	;# 
   347  049B                     	;# 
   348  049C                     	;# 
   349  049D                     	;# 
   350  049E                     	;# 
   351  049F                     	;# 
   352  0611                     	;# 
   353  0612                     	;# 
   354  0613                     	;# 
   355  0613                     	;# 
   356  0614                     	;# 
   357  0615                     	;# 
   358  0616                     	;# 
   359  0616                     	;# 
   360  0617                     	;# 
   361  0618                     	;# 
   362  0619                     	;# 
   363  0619                     	;# 
   364  061A                     	;# 
   365  061B                     	;# 
   366  061C                     	;# 
   367  061C                     	;# 
   368  0691                     	;# 
   369  0692                     	;# 
   370  0693                     	;# 
   371  0694                     	;# 
   372  0695                     	;# 
   373  0F0F                     	;# 
   374  0F10                     	;# 
   375  0F11                     	;# 
   376  0F12                     	;# 
   377  0F13                     	;# 
   378  0F14                     	;# 
   379  0F15                     	;# 
   380  0F16                     	;# 
   381  0F17                     	;# 
   382  0F18                     	;# 
   383  0F19                     	;# 
   384  0F1A                     	;# 
   385  0F1B                     	;# 
   386  0F1C                     	;# 
   387  0F1D                     	;# 
   388  0F1E                     	;# 
   389  0F1F                     	;# 
   390  0F20                     	;# 
   391  0F21                     	;# 
   392  0F22                     	;# 
   393  0F23                     	;# 
   394  0F24                     	;# 
   395  0F25                     	;# 
   396  0F26                     	;# 
   397  0F27                     	;# 
   398  0F28                     	;# 
   399  0F29                     	;# 
   400  0F2A                     	;# 
   401  0F2B                     	;# 
   402  0F2C                     	;# 
   403  0F2D                     	;# 
   404  0F2E                     	;# 
   405  0F2F                     	;# 
   406  0F8C                     	;# 
   407  0F8D                     	;# 
   408  0F91                     	;# 
   409  0F95                     	;# 
   410  0F96                     	;# 
   411  0F97                     	;# 
   412  0F9C                     	;# 
   413  0F9D                     	;# 
   414  0F9E                     	;# 
   415  0FE3                     	;# 
   416  0FE4                     	;# 
   417  0FE5                     	;# 
   418  0FE6                     	;# 
   419  0FE7                     	;# 
   420  0FE8                     	;# 
   421  0FE9                     	;# 
   422  0FEA                     	;# 
   423  0FEB                     	;# 
   424  0FED                     	;# 
   425  0FEE                     	;# 
   426  0FEF                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0008                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000D                     	;# 
   441  000E                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0013                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0016                     	;# 
   448  0017                     	;# 
   449  0018                     	;# 
   450  0019                     	;# 
   451  001A                     	;# 
   452  001B                     	;# 
   453  001C                     	;# 
   454  008C                     	;# 
   455  008D                     	;# 
   456  008E                     	;# 
   457  0091                     	;# 
   458  0092                     	;# 
   459  0093                     	;# 
   460  0095                     	;# 
   461  0096                     	;# 
   462  0097                     	;# 
   463  0099                     	;# 
   464  009A                     	;# 
   465  009B                     	;# 
   466  009B                     	;# 
   467  009C                     	;# 
   468  009D                     	;# 
   469  009E                     	;# 
   470  009F                     	;# 
   471  010C                     	;# 
   472  010D                     	;# 
   473  010E                     	;# 
   474  0111                     	;# 
   475  0112                     	;# 
   476  0113                     	;# 
   477  0114                     	;# 
   478  0115                     	;# 
   479  0116                     	;# 
   480  0117                     	;# 
   481  0118                     	;# 
   482  0119                     	;# 
   483  011D                     	;# 
   484  018C                     	;# 
   485  018D                     	;# 
   486  018E                     	;# 
   487  0191                     	;# 
   488  0191                     	;# 
   489  0192                     	;# 
   490  0193                     	;# 
   491  0193                     	;# 
   492  0194                     	;# 
   493  0195                     	;# 
   494  0196                     	;# 
   495  0197                     	;# 
   496  0199                     	;# 
   497  019A                     	;# 
   498  019B                     	;# 
   499  019B                     	;# 
   500  019C                     	;# 
   501  019D                     	;# 
   502  019E                     	;# 
   503  019F                     	;# 
   504  020C                     	;# 
   505  020D                     	;# 
   506  0211                     	;# 
   507  0211                     	;# 
   508  0212                     	;# 
   509  0212                     	;# 
   510  0213                     	;# 
   511  0213                     	;# 
   512  0214                     	;# 
   513  0214                     	;# 
   514  0215                     	;# 
   515  0215                     	;# 
   516  0215                     	;# 
   517  0216                     	;# 
   518  0216                     	;# 
   519  0217                     	;# 
   520  0217                     	;# 
   521  0391                     	;# 
   522  0392                     	;# 
   523  0393                     	;# 
   524  0394                     	;# 
   525  0395                     	;# 
   526  0396                     	;# 
   527  0498                     	;# 
   528  0498                     	;# 
   529  0499                     	;# 
   530  049A                     	;# 
   531  049B                     	;# 
   532  049B                     	;# 
   533  049C                     	;# 
   534  049D                     	;# 
   535  049E                     	;# 
   536  049F                     	;# 
   537  0611                     	;# 
   538  0612                     	;# 
   539  0613                     	;# 
   540  0613                     	;# 
   541  0614                     	;# 
   542  0615                     	;# 
   543  0616                     	;# 
   544  0616                     	;# 
   545  0617                     	;# 
   546  0618                     	;# 
   547  0619                     	;# 
   548  0619                     	;# 
   549  061A                     	;# 
   550  061B                     	;# 
   551  061C                     	;# 
   552  061C                     	;# 
   553  0691                     	;# 
   554  0692                     	;# 
   555  0693                     	;# 
   556  0694                     	;# 
   557  0695                     	;# 
   558  0F0F                     	;# 
   559  0F10                     	;# 
   560  0F11                     	;# 
   561  0F12                     	;# 
   562  0F13                     	;# 
   563  0F14                     	;# 
   564  0F15                     	;# 
   565  0F16                     	;# 
   566  0F17                     	;# 
   567  0F18                     	;# 
   568  0F19                     	;# 
   569  0F1A                     	;# 
   570  0F1B                     	;# 
   571  0F1C                     	;# 
   572  0F1D                     	;# 
   573  0F1E                     	;# 
   574  0F1F                     	;# 
   575  0F20                     	;# 
   576  0F21                     	;# 
   577  0F22                     	;# 
   578  0F23                     	;# 
   579  0F24                     	;# 
   580  0F25                     	;# 
   581  0F26                     	;# 
   582  0F27                     	;# 
   583  0F28                     	;# 
   584  0F29                     	;# 
   585  0F2A                     	;# 
   586  0F2B                     	;# 
   587  0F2C                     	;# 
   588  0F2D                     	;# 
   589  0F2E                     	;# 
   590  0F2F                     	;# 
   591  0F8C                     	;# 
   592  0F8D                     	;# 
   593  0F91                     	;# 
   594  0F95                     	;# 
   595  0F96                     	;# 
   596  0F97                     	;# 
   597  0F9C                     	;# 
   598  0F9D                     	;# 
   599  0F9E                     	;# 
   600  0FE3                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0013                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0093                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  009F                     	;# 
   656  010C                     	;# 
   657  010D                     	;# 
   658  010E                     	;# 
   659  0111                     	;# 
   660  0112                     	;# 
   661  0113                     	;# 
   662  0114                     	;# 
   663  0115                     	;# 
   664  0116                     	;# 
   665  0117                     	;# 
   666  0118                     	;# 
   667  0119                     	;# 
   668  011D                     	;# 
   669  018C                     	;# 
   670  018D                     	;# 
   671  018E                     	;# 
   672  0191                     	;# 
   673  0191                     	;# 
   674  0192                     	;# 
   675  0193                     	;# 
   676  0193                     	;# 
   677  0194                     	;# 
   678  0195                     	;# 
   679  0196                     	;# 
   680  0197                     	;# 
   681  0199                     	;# 
   682  019A                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019C                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  019F                     	;# 
   689  020C                     	;# 
   690  020D                     	;# 
   691  0211                     	;# 
   692  0211                     	;# 
   693  0212                     	;# 
   694  0212                     	;# 
   695  0213                     	;# 
   696  0213                     	;# 
   697  0214                     	;# 
   698  0214                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0216                     	;# 
   703  0216                     	;# 
   704  0217                     	;# 
   705  0217                     	;# 
   706  0391                     	;# 
   707  0392                     	;# 
   708  0393                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0498                     	;# 
   713  0498                     	;# 
   714  0499                     	;# 
   715  049A                     	;# 
   716  049B                     	;# 
   717  049B                     	;# 
   718  049C                     	;# 
   719  049D                     	;# 
   720  049E                     	;# 
   721  049F                     	;# 
   722  0611                     	;# 
   723  0612                     	;# 
   724  0613                     	;# 
   725  0613                     	;# 
   726  0614                     	;# 
   727  0615                     	;# 
   728  0616                     	;# 
   729  0616                     	;# 
   730  0617                     	;# 
   731  0618                     	;# 
   732  0619                     	;# 
   733  0619                     	;# 
   734  061A                     	;# 
   735  061B                     	;# 
   736  061C                     	;# 
   737  061C                     	;# 
   738  0691                     	;# 
   739  0692                     	;# 
   740  0693                     	;# 
   741  0694                     	;# 
   742  0695                     	;# 
   743  0F0F                     	;# 
   744  0F10                     	;# 
   745  0F11                     	;# 
   746  0F12                     	;# 
   747  0F13                     	;# 
   748  0F14                     	;# 
   749  0F15                     	;# 
   750  0F16                     	;# 
   751  0F17                     	;# 
   752  0F18                     	;# 
   753  0F19                     	;# 
   754  0F1A                     	;# 
   755  0F1B                     	;# 
   756  0F1C                     	;# 
   757  0F1D                     	;# 
   758  0F1E                     	;# 
   759  0F1F                     	;# 
   760  0F20                     	;# 
   761  0F21                     	;# 
   762  0F22                     	;# 
   763  0F23                     	;# 
   764  0F24                     	;# 
   765  0F25                     	;# 
   766  0F26                     	;# 
   767  0F27                     	;# 
   768  0F28                     	;# 
   769  0F29                     	;# 
   770  0F2A                     	;# 
   771  0F2B                     	;# 
   772  0F2C                     	;# 
   773  0F2D                     	;# 
   774  0F2E                     	;# 
   775  0F2F                     	;# 
   776  0F8C                     	;# 
   777  0F8D                     	;# 
   778  0F91                     	;# 
   779  0F95                     	;# 
   780  0F96                     	;# 
   781  0F97                     	;# 
   782  0F9C                     	;# 
   783  0F9D                     	;# 
   784  0F9E                     	;# 
   785  0FE3                     	;# 
   786  0FE4                     	;# 
   787  0FE5                     	;# 
   788  0FE6                     	;# 
   789  0FE7                     	;# 
   790  0FE8                     	;# 
   791  0FE9                     	;# 
   792  0FEA                     	;# 
   793  0FEB                     	;# 
   794  0FED                     	;# 
   795  0FEE                     	;# 
   796  0FEF                     	;# 
   797  0000                     	;# 
   798  0001                     	;# 
   799  0002                     	;# 
   800  0003                     	;# 
   801  0004                     	;# 
   802  0005                     	;# 
   803  0006                     	;# 
   804  0007                     	;# 
   805  0008                     	;# 
   806  0009                     	;# 
   807  000A                     	;# 
   808  000B                     	;# 
   809  000C                     	;# 
   810  000D                     	;# 
   811  000E                     	;# 
   812  0011                     	;# 
   813  0012                     	;# 
   814  0013                     	;# 
   815  0015                     	;# 
   816  0016                     	;# 
   817  0016                     	;# 
   818  0017                     	;# 
   819  0018                     	;# 
   820  0019                     	;# 
   821  001A                     	;# 
   822  001B                     	;# 
   823  001C                     	;# 
   824  008C                     	;# 
   825  008D                     	;# 
   826  008E                     	;# 
   827  0091                     	;# 
   828  0092                     	;# 
   829  0093                     	;# 
   830  0095                     	;# 
   831  0096                     	;# 
   832  0097                     	;# 
   833  0099                     	;# 
   834  009A                     	;# 
   835  009B                     	;# 
   836  009B                     	;# 
   837  009C                     	;# 
   838  009D                     	;# 
   839  009E                     	;# 
   840  009F                     	;# 
   841  010C                     	;# 
   842  010D                     	;# 
   843  010E                     	;# 
   844  0111                     	;# 
   845  0112                     	;# 
   846  0113                     	;# 
   847  0114                     	;# 
   848  0115                     	;# 
   849  0116                     	;# 
   850  0117                     	;# 
   851  0118                     	;# 
   852  0119                     	;# 
   853  011D                     	;# 
   854  018C                     	;# 
   855  018D                     	;# 
   856  018E                     	;# 
   857  0191                     	;# 
   858  0191                     	;# 
   859  0192                     	;# 
   860  0193                     	;# 
   861  0193                     	;# 
   862  0194                     	;# 
   863  0195                     	;# 
   864  0196                     	;# 
   865  0197                     	;# 
   866  0199                     	;# 
   867  019A                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019C                     	;# 
   871  019D                     	;# 
   872  019E                     	;# 
   873  019F                     	;# 
   874  020C                     	;# 
   875  020D                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0216                     	;# 
   888  0216                     	;# 
   889  0217                     	;# 
   890  0217                     	;# 
   891  0391                     	;# 
   892  0392                     	;# 
   893  0393                     	;# 
   894  0394                     	;# 
   895  0395                     	;# 
   896  0396                     	;# 
   897  0498                     	;# 
   898  0498                     	;# 
   899  0499                     	;# 
   900  049A                     	;# 
   901  049B                     	;# 
   902  049B                     	;# 
   903  049C                     	;# 
   904  049D                     	;# 
   905  049E                     	;# 
   906  049F                     	;# 
   907  0611                     	;# 
   908  0612                     	;# 
   909  0613                     	;# 
   910  0613                     	;# 
   911  0614                     	;# 
   912  0615                     	;# 
   913  0616                     	;# 
   914  0616                     	;# 
   915  0617                     	;# 
   916  0618                     	;# 
   917  0619                     	;# 
   918  0619                     	;# 
   919  061A                     	;# 
   920  061B                     	;# 
   921  061C                     	;# 
   922  061C                     	;# 
   923  0691                     	;# 
   924  0692                     	;# 
   925  0693                     	;# 
   926  0694                     	;# 
   927  0695                     	;# 
   928  0F0F                     	;# 
   929  0F10                     	;# 
   930  0F11                     	;# 
   931  0F12                     	;# 
   932  0F13                     	;# 
   933  0F14                     	;# 
   934  0F15                     	;# 
   935  0F16                     	;# 
   936  0F17                     	;# 
   937  0F18                     	;# 
   938  0F19                     	;# 
   939  0F1A                     	;# 
   940  0F1B                     	;# 
   941  0F1C                     	;# 
   942  0F1D                     	;# 
   943  0F1E                     	;# 
   944  0F1F                     	;# 
   945  0F20                     	;# 
   946  0F21                     	;# 
   947  0F22                     	;# 
   948  0F23                     	;# 
   949  0F24                     	;# 
   950  0F25                     	;# 
   951  0F26                     	;# 
   952  0F27                     	;# 
   953  0F28                     	;# 
   954  0F29                     	;# 
   955  0F2A                     	;# 
   956  0F2B                     	;# 
   957  0F2C                     	;# 
   958  0F2D                     	;# 
   959  0F2E                     	;# 
   960  0F2F                     	;# 
   961  0F8C                     	;# 
   962  0F8D                     	;# 
   963  0F91                     	;# 
   964  0F95                     	;# 
   965  0F96                     	;# 
   966  0F97                     	;# 
   967  0F9C                     	;# 
   968  0F9D                     	;# 
   969  0F9E                     	;# 
   970  0FE3                     	;# 
   971  0FE4                     	;# 
   972  0FE5                     	;# 
   973  0FE6                     	;# 
   974  0FE7                     	;# 
   975  0FE8                     	;# 
   976  0FE9                     	;# 
   977  0FEA                     	;# 
   978  0FEB                     	;# 
   979  0FED                     	;# 
   980  0FEE                     	;# 
   981  0FEF                     	;# 
   982  0000                     	;# 
   983  0001                     	;# 
   984  0002                     	;# 
   985  0003                     	;# 
   986  0004                     	;# 
   987  0005                     	;# 
   988  0006                     	;# 
   989  0007                     	;# 
   990  0008                     	;# 
   991  0009                     	;# 
   992  000A                     	;# 
   993  000B                     	;# 
   994  000C                     	;# 
   995  000D                     	;# 
   996  000E                     	;# 
   997  0011                     	;# 
   998  0012                     	;# 
   999  0013                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0016                     	;# 
  1003  0017                     	;# 
  1004  0018                     	;# 
  1005  0019                     	;# 
  1006  001A                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  008C                     	;# 
  1010  008D                     	;# 
  1011  008E                     	;# 
  1012  0091                     	;# 
  1013  0092                     	;# 
  1014  0093                     	;# 
  1015  0095                     	;# 
  1016  0096                     	;# 
  1017  0097                     	;# 
  1018  0099                     	;# 
  1019  009A                     	;# 
  1020  009B                     	;# 
  1021  009B                     	;# 
  1022  009C                     	;# 
  1023  009D                     	;# 
  1024  009E                     	;# 
  1025  009F                     	;# 
  1026  010C                     	;# 
  1027  010D                     	;# 
  1028  010E                     	;# 
  1029  0111                     	;# 
  1030  0112                     	;# 
  1031  0113                     	;# 
  1032  0114                     	;# 
  1033  0115                     	;# 
  1034  0116                     	;# 
  1035  0117                     	;# 
  1036  0118                     	;# 
  1037  0119                     	;# 
  1038  011D                     	;# 
  1039  018C                     	;# 
  1040  018D                     	;# 
  1041  018E                     	;# 
  1042  0191                     	;# 
  1043  0191                     	;# 
  1044  0192                     	;# 
  1045  0193                     	;# 
  1046  0193                     	;# 
  1047  0194                     	;# 
  1048  0195                     	;# 
  1049  0196                     	;# 
  1050  0197                     	;# 
  1051  0199                     	;# 
  1052  019A                     	;# 
  1053  019B                     	;# 
  1054  019B                     	;# 
  1055  019C                     	;# 
  1056  019D                     	;# 
  1057  019E                     	;# 
  1058  019F                     	;# 
  1059  020C                     	;# 
  1060  020D                     	;# 
  1061  0211                     	;# 
  1062  0211                     	;# 
  1063  0212                     	;# 
  1064  0212                     	;# 
  1065  0213                     	;# 
  1066  0213                     	;# 
  1067  0214                     	;# 
  1068  0214                     	;# 
  1069  0215                     	;# 
  1070  0215                     	;# 
  1071  0215                     	;# 
  1072  0216                     	;# 
  1073  0216                     	;# 
  1074  0217                     	;# 
  1075  0217                     	;# 
  1076  0391                     	;# 
  1077  0392                     	;# 
  1078  0393                     	;# 
  1079  0394                     	;# 
  1080  0395                     	;# 
  1081  0396                     	;# 
  1082  0498                     	;# 
  1083  0498                     	;# 
  1084  0499                     	;# 
  1085  049A                     	;# 
  1086  049B                     	;# 
  1087  049B                     	;# 
  1088  049C                     	;# 
  1089  049D                     	;# 
  1090  049E                     	;# 
  1091  049F                     	;# 
  1092  0611                     	;# 
  1093  0612                     	;# 
  1094  0613                     	;# 
  1095  0613                     	;# 
  1096  0614                     	;# 
  1097  0615                     	;# 
  1098  0616                     	;# 
  1099  0616                     	;# 
  1100  0617                     	;# 
  1101  0618                     	;# 
  1102  0619                     	;# 
  1103  0619                     	;# 
  1104  061A                     	;# 
  1105  061B                     	;# 
  1106  061C                     	;# 
  1107  061C                     	;# 
  1108  0691                     	;# 
  1109  0692                     	;# 
  1110  0693                     	;# 
  1111  0694                     	;# 
  1112  0695                     	;# 
  1113  0F0F                     	;# 
  1114  0F10                     	;# 
  1115  0F11                     	;# 
  1116  0F12                     	;# 
  1117  0F13                     	;# 
  1118  0F14                     	;# 
  1119  0F15                     	;# 
  1120  0F16                     	;# 
  1121  0F17                     	;# 
  1122  0F18                     	;# 
  1123  0F19                     	;# 
  1124  0F1A                     	;# 
  1125  0F1B                     	;# 
  1126  0F1C                     	;# 
  1127  0F1D                     	;# 
  1128  0F1E                     	;# 
  1129  0F1F                     	;# 
  1130  0F20                     	;# 
  1131  0F21                     	;# 
  1132  0F22                     	;# 
  1133  0F23                     	;# 
  1134  0F24                     	;# 
  1135  0F25                     	;# 
  1136  0F26                     	;# 
  1137  0F27                     	;# 
  1138  0F28                     	;# 
  1139  0F29                     	;# 
  1140  0F2A                     	;# 
  1141  0F2B                     	;# 
  1142  0F2C                     	;# 
  1143  0F2D                     	;# 
  1144  0F2E                     	;# 
  1145  0F2F                     	;# 
  1146  0F8C                     	;# 
  1147  0F8D                     	;# 
  1148  0F91                     	;# 
  1149  0F95                     	;# 
  1150  0F96                     	;# 
  1151  0F97                     	;# 
  1152  0F9C                     	;# 
  1153  0F9D                     	;# 
  1154  0F9E                     	;# 
  1155  0FE3                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0013                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0093                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  009F                     	;# 
  1211  010C                     	;# 
  1212  010D                     	;# 
  1213  010E                     	;# 
  1214  0111                     	;# 
  1215  0112                     	;# 
  1216  0113                     	;# 
  1217  0114                     	;# 
  1218  0115                     	;# 
  1219  0116                     	;# 
  1220  0117                     	;# 
  1221  0118                     	;# 
  1222  0119                     	;# 
  1223  011D                     	;# 
  1224  018C                     	;# 
  1225  018D                     	;# 
  1226  018E                     	;# 
  1227  0191                     	;# 
  1228  0191                     	;# 
  1229  0192                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0194                     	;# 
  1233  0195                     	;# 
  1234  0196                     	;# 
  1235  0197                     	;# 
  1236  0199                     	;# 
  1237  019A                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020C                     	;# 
  1245  020D                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0391                     	;# 
  1262  0392                     	;# 
  1263  0393                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0498                     	;# 
  1268  0498                     	;# 
  1269  0499                     	;# 
  1270  049A                     	;# 
  1271  049B                     	;# 
  1272  049B                     	;# 
  1273  049C                     	;# 
  1274  049D                     	;# 
  1275  049E                     	;# 
  1276  049F                     	;# 
  1277  0611                     	;# 
  1278  0612                     	;# 
  1279  0613                     	;# 
  1280  0613                     	;# 
  1281  0614                     	;# 
  1282  0615                     	;# 
  1283  0616                     	;# 
  1284  0616                     	;# 
  1285  0617                     	;# 
  1286  0618                     	;# 
  1287  0619                     	;# 
  1288  0619                     	;# 
  1289  061A                     	;# 
  1290  061B                     	;# 
  1291  061C                     	;# 
  1292  061C                     	;# 
  1293  0691                     	;# 
  1294  0692                     	;# 
  1295  0693                     	;# 
  1296  0694                     	;# 
  1297  0695                     	;# 
  1298  0F0F                     	;# 
  1299  0F10                     	;# 
  1300  0F11                     	;# 
  1301  0F12                     	;# 
  1302  0F13                     	;# 
  1303  0F14                     	;# 
  1304  0F15                     	;# 
  1305  0F16                     	;# 
  1306  0F17                     	;# 
  1307  0F18                     	;# 
  1308  0F19                     	;# 
  1309  0F1A                     	;# 
  1310  0F1B                     	;# 
  1311  0F1C                     	;# 
  1312  0F1D                     	;# 
  1313  0F1E                     	;# 
  1314  0F1F                     	;# 
  1315  0F20                     	;# 
  1316  0F21                     	;# 
  1317  0F22                     	;# 
  1318  0F23                     	;# 
  1319  0F24                     	;# 
  1320  0F25                     	;# 
  1321  0F26                     	;# 
  1322  0F27                     	;# 
  1323  0F28                     	;# 
  1324  0F29                     	;# 
  1325  0F2A                     	;# 
  1326  0F2B                     	;# 
  1327  0F2C                     	;# 
  1328  0F2D                     	;# 
  1329  0F2E                     	;# 
  1330  0F2F                     	;# 
  1331  0F8C                     	;# 
  1332  0F8D                     	;# 
  1333  0F91                     	;# 
  1334  0F95                     	;# 
  1335  0F96                     	;# 
  1336  0F97                     	;# 
  1337  0F9C                     	;# 
  1338  0F9D                     	;# 
  1339  0F9E                     	;# 
  1340  0FE3                     	;# 
  1341  0FE4                     	;# 
  1342  0FE5                     	;# 
  1343  0FE6                     	;# 
  1344  0FE7                     	;# 
  1345  0FE8                     	;# 
  1346  0FE9                     	;# 
  1347  0FEA                     	;# 
  1348  0FEB                     	;# 
  1349  0FED                     	;# 
  1350  0FEE                     	;# 
  1351  0FEF                     	;# 
  1352  0000                     	;# 
  1353  0001                     	;# 
  1354  0002                     	;# 
  1355  0003                     	;# 
  1356  0004                     	;# 
  1357  0005                     	;# 
  1358  0006                     	;# 
  1359  0007                     	;# 
  1360  0008                     	;# 
  1361  0009                     	;# 
  1362  000A                     	;# 
  1363  000B                     	;# 
  1364  000C                     	;# 
  1365  000D                     	;# 
  1366  000E                     	;# 
  1367  0011                     	;# 
  1368  0012                     	;# 
  1369  0013                     	;# 
  1370  0015                     	;# 
  1371  0016                     	;# 
  1372  0016                     	;# 
  1373  0017                     	;# 
  1374  0018                     	;# 
  1375  0019                     	;# 
  1376  001A                     	;# 
  1377  001B                     	;# 
  1378  001C                     	;# 
  1379  008C                     	;# 
  1380  008D                     	;# 
  1381  008E                     	;# 
  1382  0091                     	;# 
  1383  0092                     	;# 
  1384  0093                     	;# 
  1385  0095                     	;# 
  1386  0096                     	;# 
  1387  0097                     	;# 
  1388  0099                     	;# 
  1389  009A                     	;# 
  1390  009B                     	;# 
  1391  009B                     	;# 
  1392  009C                     	;# 
  1393  009D                     	;# 
  1394  009E                     	;# 
  1395  009F                     	;# 
  1396  010C                     	;# 
  1397  010D                     	;# 
  1398  010E                     	;# 
  1399  0111                     	;# 
  1400  0112                     	;# 
  1401  0113                     	;# 
  1402  0114                     	;# 
  1403  0115                     	;# 
  1404  0116                     	;# 
  1405  0117                     	;# 
  1406  0118                     	;# 
  1407  0119                     	;# 
  1408  011D                     	;# 
  1409  018C                     	;# 
  1410  018D                     	;# 
  1411  018E                     	;# 
  1412  0191                     	;# 
  1413  0191                     	;# 
  1414  0192                     	;# 
  1415  0193                     	;# 
  1416  0193                     	;# 
  1417  0194                     	;# 
  1418  0195                     	;# 
  1419  0196                     	;# 
  1420  0197                     	;# 
  1421  0199                     	;# 
  1422  019A                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019C                     	;# 
  1426  019D                     	;# 
  1427  019E                     	;# 
  1428  019F                     	;# 
  1429  020C                     	;# 
  1430  020D                     	;# 
  1431  0211                     	;# 
  1432  0211                     	;# 
  1433  0212                     	;# 
  1434  0212                     	;# 
  1435  0213                     	;# 
  1436  0213                     	;# 
  1437  0214                     	;# 
  1438  0214                     	;# 
  1439  0215                     	;# 
  1440  0215                     	;# 
  1441  0215                     	;# 
  1442  0216                     	;# 
  1443  0216                     	;# 
  1444  0217                     	;# 
  1445  0217                     	;# 
  1446  0391                     	;# 
  1447  0392                     	;# 
  1448  0393                     	;# 
  1449  0394                     	;# 
  1450  0395                     	;# 
  1451  0396                     	;# 
  1452  0498                     	;# 
  1453  0498                     	;# 
  1454  0499                     	;# 
  1455  049A                     	;# 
  1456  049B                     	;# 
  1457  049B                     	;# 
  1458  049C                     	;# 
  1459  049D                     	;# 
  1460  049E                     	;# 
  1461  049F                     	;# 
  1462  0611                     	;# 
  1463  0612                     	;# 
  1464  0613                     	;# 
  1465  0613                     	;# 
  1466  0614                     	;# 
  1467  0615                     	;# 
  1468  0616                     	;# 
  1469  0616                     	;# 
  1470  0617                     	;# 
  1471  0618                     	;# 
  1472  0619                     	;# 
  1473  0619                     	;# 
  1474  061A                     	;# 
  1475  061B                     	;# 
  1476  061C                     	;# 
  1477  061C                     	;# 
  1478  0691                     	;# 
  1479  0692                     	;# 
  1480  0693                     	;# 
  1481  0694                     	;# 
  1482  0695                     	;# 
  1483  0F0F                     	;# 
  1484  0F10                     	;# 
  1485  0F11                     	;# 
  1486  0F12                     	;# 
  1487  0F13                     	;# 
  1488  0F14                     	;# 
  1489  0F15                     	;# 
  1490  0F16                     	;# 
  1491  0F17                     	;# 
  1492  0F18                     	;# 
  1493  0F19                     	;# 
  1494  0F1A                     	;# 
  1495  0F1B                     	;# 
  1496  0F1C                     	;# 
  1497  0F1D                     	;# 
  1498  0F1E                     	;# 
  1499  0F1F                     	;# 
  1500  0F20                     	;# 
  1501  0F21                     	;# 
  1502  0F22                     	;# 
  1503  0F23                     	;# 
  1504  0F24                     	;# 
  1505  0F25                     	;# 
  1506  0F26                     	;# 
  1507  0F27                     	;# 
  1508  0F28                     	;# 
  1509  0F29                     	;# 
  1510  0F2A                     	;# 
  1511  0F2B                     	;# 
  1512  0F2C                     	;# 
  1513  0F2D                     	;# 
  1514  0F2E                     	;# 
  1515  0F2F                     	;# 
  1516  0F8C                     	;# 
  1517  0F8D                     	;# 
  1518  0F91                     	;# 
  1519  0F95                     	;# 
  1520  0F96                     	;# 
  1521  0F97                     	;# 
  1522  0F9C                     	;# 
  1523  0F9D                     	;# 
  1524  0F9E                     	;# 
  1525  0FE3                     	;# 
  1526  0FE4                     	;# 
  1527  0FE5                     	;# 
  1528  0FE6                     	;# 
  1529  0FE7                     	;# 
  1530  0FE8                     	;# 
  1531  0FE9                     	;# 
  1532  0FEA                     	;# 
  1533  0FEB                     	;# 
  1534  0FED                     	;# 
  1535  0FEE                     	;# 
  1536  0FEF                     	;# 
  1537  0000                     	;# 
  1538  0001                     	;# 
  1539  0002                     	;# 
  1540  0003                     	;# 
  1541  0004                     	;# 
  1542  0005                     	;# 
  1543  0006                     	;# 
  1544  0007                     	;# 
  1545  0008                     	;# 
  1546  0009                     	;# 
  1547  000A                     	;# 
  1548  000B                     	;# 
  1549  000C                     	;# 
  1550  000D                     	;# 
  1551  000E                     	;# 
  1552  0011                     	;# 
  1553  0012                     	;# 
  1554  0013                     	;# 
  1555  0015                     	;# 
  1556  0016                     	;# 
  1557  0016                     	;# 
  1558  0017                     	;# 
  1559  0018                     	;# 
  1560  0019                     	;# 
  1561  001A                     	;# 
  1562  001B                     	;# 
  1563  001C                     	;# 
  1564  008C                     	;# 
  1565  008D                     	;# 
  1566  008E                     	;# 
  1567  0091                     	;# 
  1568  0092                     	;# 
  1569  0093                     	;# 
  1570  0095                     	;# 
  1571  0096                     	;# 
  1572  0097                     	;# 
  1573  0099                     	;# 
  1574  009A                     	;# 
  1575  009B                     	;# 
  1576  009B                     	;# 
  1577  009C                     	;# 
  1578  009D                     	;# 
  1579  009E                     	;# 
  1580  009F                     	;# 
  1581  010C                     	;# 
  1582  010D                     	;# 
  1583  010E                     	;# 
  1584  0111                     	;# 
  1585  0112                     	;# 
  1586  0113                     	;# 
  1587  0114                     	;# 
  1588  0115                     	;# 
  1589  0116                     	;# 
  1590  0117                     	;# 
  1591  0118                     	;# 
  1592  0119                     	;# 
  1593  011D                     	;# 
  1594  018C                     	;# 
  1595  018D                     	;# 
  1596  018E                     	;# 
  1597  0191                     	;# 
  1598  0191                     	;# 
  1599  0192                     	;# 
  1600  0193                     	;# 
  1601  0193                     	;# 
  1602  0194                     	;# 
  1603  0195                     	;# 
  1604  0196                     	;# 
  1605  0197                     	;# 
  1606  0199                     	;# 
  1607  019A                     	;# 
  1608  019B                     	;# 
  1609  019B                     	;# 
  1610  019C                     	;# 
  1611  019D                     	;# 
  1612  019E                     	;# 
  1613  019F                     	;# 
  1614  020C                     	;# 
  1615  020D                     	;# 
  1616  0211                     	;# 
  1617  0211                     	;# 
  1618  0212                     	;# 
  1619  0212                     	;# 
  1620  0213                     	;# 
  1621  0213                     	;# 
  1622  0214                     	;# 
  1623  0214                     	;# 
  1624  0215                     	;# 
  1625  0215                     	;# 
  1626  0215                     	;# 
  1627  0216                     	;# 
  1628  0216                     	;# 
  1629  0217                     	;# 
  1630  0217                     	;# 
  1631  0391                     	;# 
  1632  0392                     	;# 
  1633  0393                     	;# 
  1634  0394                     	;# 
  1635  0395                     	;# 
  1636  0396                     	;# 
  1637  0498                     	;# 
  1638  0498                     	;# 
  1639  0499                     	;# 
  1640  049A                     	;# 
  1641  049B                     	;# 
  1642  049B                     	;# 
  1643  049C                     	;# 
  1644  049D                     	;# 
  1645  049E                     	;# 
  1646  049F                     	;# 
  1647  0611                     	;# 
  1648  0612                     	;# 
  1649  0613                     	;# 
  1650  0613                     	;# 
  1651  0614                     	;# 
  1652  0615                     	;# 
  1653  0616                     	;# 
  1654  0616                     	;# 
  1655  0617                     	;# 
  1656  0618                     	;# 
  1657  0619                     	;# 
  1658  0619                     	;# 
  1659  061A                     	;# 
  1660  061B                     	;# 
  1661  061C                     	;# 
  1662  061C                     	;# 
  1663  0691                     	;# 
  1664  0692                     	;# 
  1665  0693                     	;# 
  1666  0694                     	;# 
  1667  0695                     	;# 
  1668  0F0F                     	;# 
  1669  0F10                     	;# 
  1670  0F11                     	;# 
  1671  0F12                     	;# 
  1672  0F13                     	;# 
  1673  0F14                     	;# 
  1674  0F15                     	;# 
  1675  0F16                     	;# 
  1676  0F17                     	;# 
  1677  0F18                     	;# 
  1678  0F19                     	;# 
  1679  0F1A                     	;# 
  1680  0F1B                     	;# 
  1681  0F1C                     	;# 
  1682  0F1D                     	;# 
  1683  0F1E                     	;# 
  1684  0F1F                     	;# 
  1685  0F20                     	;# 
  1686  0F21                     	;# 
  1687  0F22                     	;# 
  1688  0F23                     	;# 
  1689  0F24                     	;# 
  1690  0F25                     	;# 
  1691  0F26                     	;# 
  1692  0F27                     	;# 
  1693  0F28                     	;# 
  1694  0F29                     	;# 
  1695  0F2A                     	;# 
  1696  0F2B                     	;# 
  1697  0F2C                     	;# 
  1698  0F2D                     	;# 
  1699  0F2E                     	;# 
  1700  0F2F                     	;# 
  1701  0F8C                     	;# 
  1702  0F8D                     	;# 
  1703  0F91                     	;# 
  1704  0F95                     	;# 
  1705  0F96                     	;# 
  1706  0F97                     	;# 
  1707  0F9C                     	;# 
  1708  0F9D                     	;# 
  1709  0F9E                     	;# 
  1710  0FE3                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0013                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0093                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  009F                     	;# 
  1766  010C                     	;# 
  1767  010D                     	;# 
  1768  010E                     	;# 
  1769  0111                     	;# 
  1770  0112                     	;# 
  1771  0113                     	;# 
  1772  0114                     	;# 
  1773  0115                     	;# 
  1774  0116                     	;# 
  1775  0117                     	;# 
  1776  0118                     	;# 
  1777  0119                     	;# 
  1778  011D                     	;# 
  1779  018C                     	;# 
  1780  018D                     	;# 
  1781  018E                     	;# 
  1782  0191                     	;# 
  1783  0191                     	;# 
  1784  0192                     	;# 
  1785  0193                     	;# 
  1786  0193                     	;# 
  1787  0194                     	;# 
  1788  0195                     	;# 
  1789  0196                     	;# 
  1790  0197                     	;# 
  1791  0199                     	;# 
  1792  019A                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019C                     	;# 
  1796  019D                     	;# 
  1797  019E                     	;# 
  1798  019F                     	;# 
  1799  020C                     	;# 
  1800  020D                     	;# 
  1801  0211                     	;# 
  1802  0211                     	;# 
  1803  0212                     	;# 
  1804  0212                     	;# 
  1805  0213                     	;# 
  1806  0213                     	;# 
  1807  0214                     	;# 
  1808  0214                     	;# 
  1809  0215                     	;# 
  1810  0215                     	;# 
  1811  0215                     	;# 
  1812  0216                     	;# 
  1813  0216                     	;# 
  1814  0217                     	;# 
  1815  0217                     	;# 
  1816  0391                     	;# 
  1817  0392                     	;# 
  1818  0393                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0498                     	;# 
  1823  0498                     	;# 
  1824  0499                     	;# 
  1825  049A                     	;# 
  1826  049B                     	;# 
  1827  049B                     	;# 
  1828  049C                     	;# 
  1829  049D                     	;# 
  1830  049E                     	;# 
  1831  049F                     	;# 
  1832  0611                     	;# 
  1833  0612                     	;# 
  1834  0613                     	;# 
  1835  0613                     	;# 
  1836  0614                     	;# 
  1837  0615                     	;# 
  1838  0616                     	;# 
  1839  0616                     	;# 
  1840  0617                     	;# 
  1841  0618                     	;# 
  1842  0619                     	;# 
  1843  0619                     	;# 
  1844  061A                     	;# 
  1845  061B                     	;# 
  1846  061C                     	;# 
  1847  061C                     	;# 
  1848  0691                     	;# 
  1849  0692                     	;# 
  1850  0693                     	;# 
  1851  0694                     	;# 
  1852  0695                     	;# 
  1853  0F0F                     	;# 
  1854  0F10                     	;# 
  1855  0F11                     	;# 
  1856  0F12                     	;# 
  1857  0F13                     	;# 
  1858  0F14                     	;# 
  1859  0F15                     	;# 
  1860  0F16                     	;# 
  1861  0F17                     	;# 
  1862  0F18                     	;# 
  1863  0F19                     	;# 
  1864  0F1A                     	;# 
  1865  0F1B                     	;# 
  1866  0F1C                     	;# 
  1867  0F1D                     	;# 
  1868  0F1E                     	;# 
  1869  0F1F                     	;# 
  1870  0F20                     	;# 
  1871  0F21                     	;# 
  1872  0F22                     	;# 
  1873  0F23                     	;# 
  1874  0F24                     	;# 
  1875  0F25                     	;# 
  1876  0F26                     	;# 
  1877  0F27                     	;# 
  1878  0F28                     	;# 
  1879  0F29                     	;# 
  1880  0F2A                     	;# 
  1881  0F2B                     	;# 
  1882  0F2C                     	;# 
  1883  0F2D                     	;# 
  1884  0F2E                     	;# 
  1885  0F2F                     	;# 
  1886  0F8C                     	;# 
  1887  0F8D                     	;# 
  1888  0F91                     	;# 
  1889  0F95                     	;# 
  1890  0F96                     	;# 
  1891  0F97                     	;# 
  1892  0F9C                     	;# 
  1893  0F9D                     	;# 
  1894  0F9E                     	;# 
  1895  0FE3                     	;# 
  1896  0FE4                     	;# 
  1897  0FE5                     	;# 
  1898  0FE6                     	;# 
  1899  0FE7                     	;# 
  1900  0FE8                     	;# 
  1901  0FE9                     	;# 
  1902  0FEA                     	;# 
  1903  0FEB                     	;# 
  1904  0FED                     	;# 
  1905  0FEE                     	;# 
  1906  0FEF                     	;# 
  1907  0000                     	;# 
  1908  0001                     	;# 
  1909  0002                     	;# 
  1910  0003                     	;# 
  1911  0004                     	;# 
  1912  0005                     	;# 
  1913  0006                     	;# 
  1914  0007                     	;# 
  1915  0008                     	;# 
  1916  0009                     	;# 
  1917  000A                     	;# 
  1918  000B                     	;# 
  1919  000C                     	;# 
  1920  000D                     	;# 
  1921  000E                     	;# 
  1922  0011                     	;# 
  1923  0012                     	;# 
  1924  0013                     	;# 
  1925  0015                     	;# 
  1926  0016                     	;# 
  1927  0016                     	;# 
  1928  0017                     	;# 
  1929  0018                     	;# 
  1930  0019                     	;# 
  1931  001A                     	;# 
  1932  001B                     	;# 
  1933  001C                     	;# 
  1934  008C                     	;# 
  1935  008D                     	;# 
  1936  008E                     	;# 
  1937  0091                     	;# 
  1938  0092                     	;# 
  1939  0093                     	;# 
  1940  0095                     	;# 
  1941  0096                     	;# 
  1942  0097                     	;# 
  1943  0099                     	;# 
  1944  009A                     	;# 
  1945  009B                     	;# 
  1946  009B                     	;# 
  1947  009C                     	;# 
  1948  009D                     	;# 
  1949  009E                     	;# 
  1950  009F                     	;# 
  1951  010C                     	;# 
  1952  010D                     	;# 
  1953  010E                     	;# 
  1954  0111                     	;# 
  1955  0112                     	;# 
  1956  0113                     	;# 
  1957  0114                     	;# 
  1958  0115                     	;# 
  1959  0116                     	;# 
  1960  0117                     	;# 
  1961  0118                     	;# 
  1962  0119                     	;# 
  1963  011D                     	;# 
  1964  018C                     	;# 
  1965  018D                     	;# 
  1966  018E                     	;# 
  1967  0191                     	;# 
  1968  0191                     	;# 
  1969  0192                     	;# 
  1970  0193                     	;# 
  1971  0193                     	;# 
  1972  0194                     	;# 
  1973  0195                     	;# 
  1974  0196                     	;# 
  1975  0197                     	;# 
  1976  0199                     	;# 
  1977  019A                     	;# 
  1978  019B                     	;# 
  1979  019B                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019E                     	;# 
  1983  019F                     	;# 
  1984  020C                     	;# 
  1985  020D                     	;# 
  1986  0211                     	;# 
  1987  0211                     	;# 
  1988  0212                     	;# 
  1989  0212                     	;# 
  1990  0213                     	;# 
  1991  0213                     	;# 
  1992  0214                     	;# 
  1993  0214                     	;# 
  1994  0215                     	;# 
  1995  0215                     	;# 
  1996  0215                     	;# 
  1997  0216                     	;# 
  1998  0216                     	;# 
  1999  0217                     	;# 
  2000  0217                     	;# 
  2001  0391                     	;# 
  2002  0392                     	;# 
  2003  0393                     	;# 
  2004  0394                     	;# 
  2005  0395                     	;# 
  2006  0396                     	;# 
  2007  0498                     	;# 
  2008  0498                     	;# 
  2009  0499                     	;# 
  2010  049A                     	;# 
  2011  049B                     	;# 
  2012  049B                     	;# 
  2013  049C                     	;# 
  2014  049D                     	;# 
  2015  049E                     	;# 
  2016  049F                     	;# 
  2017  0611                     	;# 
  2018  0612                     	;# 
  2019  0613                     	;# 
  2020  0613                     	;# 
  2021  0614                     	;# 
  2022  0615                     	;# 
  2023  0616                     	;# 
  2024  0616                     	;# 
  2025  0617                     	;# 
  2026  0618                     	;# 
  2027  0619                     	;# 
  2028  0619                     	;# 
  2029  061A                     	;# 
  2030  061B                     	;# 
  2031  061C                     	;# 
  2032  061C                     	;# 
  2033  0691                     	;# 
  2034  0692                     	;# 
  2035  0693                     	;# 
  2036  0694                     	;# 
  2037  0695                     	;# 
  2038  0F0F                     	;# 
  2039  0F10                     	;# 
  2040  0F11                     	;# 
  2041  0F12                     	;# 
  2042  0F13                     	;# 
  2043  0F14                     	;# 
  2044  0F15                     	;# 
  2045  0F16                     	;# 
  2046  0F17                     	;# 
  2047  0F18                     	;# 
  2048  0F19                     	;# 
  2049  0F1A                     	;# 
  2050  0F1B                     	;# 
  2051  0F1C                     	;# 
  2052  0F1D                     	;# 
  2053  0F1E                     	;# 
  2054  0F1F                     	;# 
  2055  0F20                     	;# 
  2056  0F21                     	;# 
  2057  0F22                     	;# 
  2058  0F23                     	;# 
  2059  0F24                     	;# 
  2060  0F25                     	;# 
  2061  0F26                     	;# 
  2062  0F27                     	;# 
  2063  0F28                     	;# 
  2064  0F29                     	;# 
  2065  0F2A                     	;# 
  2066  0F2B                     	;# 
  2067  0F2C                     	;# 
  2068  0F2D                     	;# 
  2069  0F2E                     	;# 
  2070  0F2F                     	;# 
  2071  0F8C                     	;# 
  2072  0F8D                     	;# 
  2073  0F91                     	;# 
  2074  0F95                     	;# 
  2075  0F96                     	;# 
  2076  0F97                     	;# 
  2077  0F9C                     	;# 
  2078  0F9D                     	;# 
  2079  0F9E                     	;# 
  2080  0FE3                     	;# 
  2081  0FE4                     	;# 
  2082  0FE5                     	;# 
  2083  0FE6                     	;# 
  2084  0FE7                     	;# 
  2085  0FE8                     	;# 
  2086  0FE9                     	;# 
  2087  0FEA                     	;# 
  2088  0FEB                     	;# 
  2089  0FED                     	;# 
  2090  0FEE                     	;# 
  2091  0FEF                     	;# 
  2092  0000                     	;# 
  2093  0001                     	;# 
  2094  0002                     	;# 
  2095  0003                     	;# 
  2096  0004                     	;# 
  2097  0005                     	;# 
  2098  0006                     	;# 
  2099  0007                     	;# 
  2100  0008                     	;# 
  2101  0009                     	;# 
  2102  000A                     	;# 
  2103  000B                     	;# 
  2104  000C                     	;# 
  2105  000D                     	;# 
  2106  000E                     	;# 
  2107  0011                     	;# 
  2108  0012                     	;# 
  2109  0013                     	;# 
  2110  0015                     	;# 
  2111  0016                     	;# 
  2112  0016                     	;# 
  2113  0017                     	;# 
  2114  0018                     	;# 
  2115  0019                     	;# 
  2116  001A                     	;# 
  2117  001B                     	;# 
  2118  001C                     	;# 
  2119  008C                     	;# 
  2120  008D                     	;# 
  2121  008E                     	;# 
  2122  0091                     	;# 
  2123  0092                     	;# 
  2124  0093                     	;# 
  2125  0095                     	;# 
  2126  0096                     	;# 
  2127  0097                     	;# 
  2128  0099                     	;# 
  2129  009A                     	;# 
  2130  009B                     	;# 
  2131  009B                     	;# 
  2132  009C                     	;# 
  2133  009D                     	;# 
  2134  009E                     	;# 
  2135  009F                     	;# 
  2136  010C                     	;# 
  2137  010D                     	;# 
  2138  010E                     	;# 
  2139  0111                     	;# 
  2140  0112                     	;# 
  2141  0113                     	;# 
  2142  0114                     	;# 
  2143  0115                     	;# 
  2144  0116                     	;# 
  2145  0117                     	;# 
  2146  0118                     	;# 
  2147  0119                     	;# 
  2148  011D                     	;# 
  2149  018C                     	;# 
  2150  018D                     	;# 
  2151  018E                     	;# 
  2152  0191                     	;# 
  2153  0191                     	;# 
  2154  0192                     	;# 
  2155  0193                     	;# 
  2156  0193                     	;# 
  2157  0194                     	;# 
  2158  0195                     	;# 
  2159  0196                     	;# 
  2160  0197                     	;# 
  2161  0199                     	;# 
  2162  019A                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019C                     	;# 
  2166  019D                     	;# 
  2167  019E                     	;# 
  2168  019F                     	;# 
  2169  020C                     	;# 
  2170  020D                     	;# 
  2171  0211                     	;# 
  2172  0211                     	;# 
  2173  0212                     	;# 
  2174  0212                     	;# 
  2175  0213                     	;# 
  2176  0213                     	;# 
  2177  0214                     	;# 
  2178  0214                     	;# 
  2179  0215                     	;# 
  2180  0215                     	;# 
  2181  0215                     	;# 
  2182  0216                     	;# 
  2183  0216                     	;# 
  2184  0217                     	;# 
  2185  0217                     	;# 
  2186  0391                     	;# 
  2187  0392                     	;# 
  2188  0393                     	;# 
  2189  0394                     	;# 
  2190  0395                     	;# 
  2191  0396                     	;# 
  2192  0498                     	;# 
  2193  0498                     	;# 
  2194  0499                     	;# 
  2195  049A                     	;# 
  2196  049B                     	;# 
  2197  049B                     	;# 
  2198  049C                     	;# 
  2199  049D                     	;# 
  2200  049E                     	;# 
  2201  049F                     	;# 
  2202  0611                     	;# 
  2203  0612                     	;# 
  2204  0613                     	;# 
  2205  0613                     	;# 
  2206  0614                     	;# 
  2207  0615                     	;# 
  2208  0616                     	;# 
  2209  0616                     	;# 
  2210  0617                     	;# 
  2211  0618                     	;# 
  2212  0619                     	;# 
  2213  0619                     	;# 
  2214  061A                     	;# 
  2215  061B                     	;# 
  2216  061C                     	;# 
  2217  061C                     	;# 
  2218  0691                     	;# 
  2219  0692                     	;# 
  2220  0693                     	;# 
  2221  0694                     	;# 
  2222  0695                     	;# 
  2223  0F0F                     	;# 
  2224  0F10                     	;# 
  2225  0F11                     	;# 
  2226  0F12                     	;# 
  2227  0F13                     	;# 
  2228  0F14                     	;# 
  2229  0F15                     	;# 
  2230  0F16                     	;# 
  2231  0F17                     	;# 
  2232  0F18                     	;# 
  2233  0F19                     	;# 
  2234  0F1A                     	;# 
  2235  0F1B                     	;# 
  2236  0F1C                     	;# 
  2237  0F1D                     	;# 
  2238  0F1E                     	;# 
  2239  0F1F                     	;# 
  2240  0F20                     	;# 
  2241  0F21                     	;# 
  2242  0F22                     	;# 
  2243  0F23                     	;# 
  2244  0F24                     	;# 
  2245  0F25                     	;# 
  2246  0F26                     	;# 
  2247  0F27                     	;# 
  2248  0F28                     	;# 
  2249  0F29                     	;# 
  2250  0F2A                     	;# 
  2251  0F2B                     	;# 
  2252  0F2C                     	;# 
  2253  0F2D                     	;# 
  2254  0F2E                     	;# 
  2255  0F2F                     	;# 
  2256  0F8C                     	;# 
  2257  0F8D                     	;# 
  2258  0F91                     	;# 
  2259  0F95                     	;# 
  2260  0F96                     	;# 
  2261  0F97                     	;# 
  2262  0F9C                     	;# 
  2263  0F9D                     	;# 
  2264  0F9E                     	;# 
  2265  0FE3                     	;# 
  2266  0FE4                     	;# 
  2267  0FE5                     	;# 
  2268  0FE6                     	;# 
  2269  0FE7                     	;# 
  2270  0FE8                     	;# 
  2271  0FE9                     	;# 
  2272  0FEA                     	;# 
  2273  0FEB                     	;# 
  2274  0FED                     	;# 
  2275  0FEE                     	;# 
  2276  0FEF                     	;# 
  2277                           
  2278                           	psect	idataBANK0
  2279  0000                     __pidataBANK0:	
  2280                           
  2281                           	psect	stringtext
  2282  07FD                     __pstringtext:	
  2283  07FD                     _GAIN:	
  2284  07FD  3407               	retlw	7
  2285  07FE  3405               	retlw	5
  2286  07FF  3403               	retlw	3
  2287  0800  3401               	retlw	1
  2288  0801  3400               	retlw	0
  2289  0802                     __end_of_GAIN:	
  2290  0802                     _VOLUME:	
  2291  0802  340E               	retlw	14
  2292  0803  3411               	retlw	17
  2293  0804  3414               	retlw	20
  2294  0805  3417               	retlw	23
  2295  0806  341A               	retlw	26
  2296  0807                     __end_of_VOLUME:	
  2297  001C                     _T2CONbits	set	28
  2298  001A                     _TMR2	set	26
  2299  001B                     _PR2	set	27
  2300  001C                     _T2CON	set	28
  2301  000B                     _INTCONbits	set	11
  2302  0011                     _PIR1bits	set	17
  2303  005F                     _GIE	set	95
  2304  009B                     _ADRES	set	155
  2305  0095                     _OPTION_REGbits	set	149
  2306  008E                     _TRISC	set	142
  2307  008D                     _TRISB	set	141
  2308  008C                     _TRISA	set	140
  2309  009A                     _OSCSTATbits	set	154
  2310  0099                     _OSCCON	set	153
  2311  0091                     _PIE1bits	set	145
  2312  009D                     _ADCON0bits	set	157
  2313  009F                     _ADCON2	set	159
  2314  009E                     _ADCON1	set	158
  2315  009D                     _ADCON0	set	157
  2316  010E                     _LATC	set	270
  2317  010D                     _LATB	set	269
  2318  010C                     _LATA	set	268
  2319  0193                     _PMDAT	set	403
  2320  0191                     _PMADR	set	401
  2321  019B                     _SPBRG	set	411
  2322  018C                     _ANSELA	set	396
  2323  018D                     _ANSELB	set	397
  2324  018E                     _ANSELC	set	398
  2325  0193                     _PMDATL	set	403
  2326  0196                     _PMCON2	set	406
  2327  019A                     _TXREG	set	410
  2328  019E                     _TXSTA	set	414
  2329  019D                     _RCSTA	set	413
  2330  019F                     _BAUDCON	set	415
  2331  0CA8                     _RD	set	3240
  2332  0CAD                     _LWLO	set	3245
  2333  0CA9                     _WR	set	3241
  2334  0CAA                     _WREN	set	3242
  2335  0CAC                     _FREE	set	3244
  2336  0CAE                     _CFGS	set	3246
  2337  020C                     _WPUA	set	524
  2338  020D                     _WPUB	set	525
  2339  061A                     _PWM4DC	set	1562
  2340  0617                     _PWM3DC	set	1559
  2341  0614                     _PWM2DC	set	1556
  2342  0611                     _PWM1DC	set	1553
  2343  061C                     _PWM4CON	set	1564
  2344  0619                     _PWM3CON	set	1561
  2345  0616                     _PWM2CON	set	1558
  2346  0613                     _PWM1CON	set	1555
  2347                           
  2348                           ; #config settings
  2349  0000                     
  2350                           	psect	cinit
  2351  001C                     start_initialization:	
  2352  001C                     __initialization:	
  2353                           
  2354                           ;initializer for Led_DynamicStorm@F4469
  2355  001C  30F4               	movlw	244
  2356  001D  00D5               	movwf	__pdataBANK0& (0+127)
  2357  001E  3001               	movlw	1
  2358  001F  00D6               	movwf	(__pdataBANK0+1)& (0+127)
  2359  0020  3040               	movlw	64
  2360  0021  00D7               	movwf	(__pdataBANK0+2)& (0+127)
  2361  0022  3000               	movlw	0
  2362  0023  00D8               	movwf	(__pdataBANK0+3)& (0+127)
  2363                           
  2364                           ;initializer for Led_DynamicCloud@F4458
  2365  0024  3090               	movlw	144
  2366  0025  00D9               	movwf	(__pdataBANK0+4)& (0+127)
  2367  0026  3001               	movlw	1
  2368  0027  00DA               	movwf	(__pdataBANK0+5)& (0+127)
  2369  0028  3040               	movlw	64
  2370  0029  00DB               	movwf	(__pdataBANK0+6)& (0+127)
  2371  002A  3001               	movlw	1
  2372  002B  00DC               	movwf	(__pdataBANK0+7)& (0+127)
  2373                           
  2374                           ;initializer for _loadDuty
  2375  002C  30E3               	movlw	low _PWM1_LoadDutyValue
  2376  002D  00DD               	movwf	(__pdataBANK0+8)& (0+127)
  2377  002E  3007               	movlw	high _PWM1_LoadDutyValue
  2378  002F  00DE               	movwf	(__pdataBANK0+9)& (0+127)
  2379  0030  3071               	movlw	low _PWM3_LoadDutyValue
  2380  0031  00DF               	movwf	(__pdataBANK0+10)& (0+127)
  2381  0032  300F               	movlw	high _PWM3_LoadDutyValue
  2382  0033  00E0               	movwf	(__pdataBANK0+11)& (0+127)
  2383                           
  2384                           ; Clear objects allocated to BANK0
  2385  0034  3020               	movlw	low __pbssBANK0
  2386  0035  0084               	movwf	4
  2387  0036  3000               	movlw	high __pbssBANK0
  2388  0037  0085               	movwf	5
  2389  0038  3022               	movlw	34
  2390  0039  318F  276B  3180   	fcall	clear_ram0
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  003C  30A0               	movlw	low __pbssBANK1
  2394  003D  0084               	movwf	4
  2395  003E  3000               	movlw	high __pbssBANK1
  2396  003F  0085               	movwf	5
  2397  0040  3040               	movlw	64
  2398  0041  318F  276B  3180   	fcall	clear_ram0
  2399  0044                     end_of_initialization:	
  2400                           ;End of C runtime variable initialization code
  2401                           
  2402  0044                     __end_of__initialization:	
  2403  0044  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2404  0045  0020               	movlb	0
  2405  0046  2847               	ljmp	_main	;jump to C main() function
  2406  0047                     __pmaintext:	
  2407                           ; 1 bytes @ 0x13
  2408 ;;
  2409 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2410 ;;
  2411 ;; *************** function _main *****************
  2412 ;; Defined at:
  2413 ;;		line 27 in file "user/src/main.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;		None
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;		None
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : B1F/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2427 ;;      Params:         0       0       0       0
  2428 ;;      Locals:         0       0       0       0
  2429 ;;      Temps:          0       0       0       0
  2430 ;;      Totals:         0       0       0       0
  2431 ;;Total ram usage:        0 bytes
  2432 ;; Hardware stack levels required when called:   10
  2433 ;; This function calls:
  2434 ;;		_Audio_GetValue
  2435 ;;		_Audio_Initialize
  2436 ;;		_Interrupt_Initialize
  2437 ;;		_Led_InitPara
  2438 ;;		_Led_Initialize
  2439 ;;		_Led_SaveParaIfChanged
  2440 ;;		_SYSTEM_Initialize
  2441 ;;		_TMR2_StartTimer
  2442 ;; This function is called by:
  2443 ;;		Startup code after reset
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           
  2448                           ;psect for function _main
  2449  0047                     _main:	
  2450                           
  2451                           ;main.c: 28: SYSTEM_Initialize();
  2452                           
  2453                           ;incstack = 0
  2454                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2455  0047  2244  3180         	fcall	_SYSTEM_Initialize
  2456                           
  2457                           ;main.c: 29: Interrupt_Initialize();
  2458  0049  2175  3180         	fcall	_Interrupt_Initialize
  2459                           
  2460                           ;main.c: 30: (INTCONbits.GIE = 1);
  2461  004B  178B               	bsf	11,7	;volatile
  2462                           
  2463                           ;main.c: 31: (INTCONbits.PEIE = 1);
  2464  004C  170B               	bsf	11,6	;volatile
  2465                           
  2466                           ;main.c: 32: Led_InitPara();
  2467  004D  2181  3180         	fcall	_Led_InitPara
  2468                           
  2469                           ;main.c: 33: Audio_Initialize();
  2470  004F  20DB  3180         	fcall	_Audio_Initialize
  2471                           
  2472                           ;main.c: 34: Led_Initialize();
  2473  0051  2218  3180         	fcall	_Led_Initialize
  2474                           
  2475                           ;main.c: 35: TMR2_StartTimer();
  2476  0053  2290  3180         	fcall	_TMR2_StartTimer
  2477  0055                     l584:	
  2478                           ;main.c: 37: while (1) {
  2479                           
  2480  0055  0064               	clrwdt	;# 
  2481                           
  2482                           ;main.c: 40: if (gLedPara.mOn && (gLedPara.mMode == 3 || gLedPara.mMode == 4)) {
  2483  0056  0021               	movlb	1	; select bank1
  2484  0057  1C40               	btfss	_gLedPara^(0+128),0	;volatile
  2485  0058  2865               	goto	l2912
  2486  0059  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  2487  005A  3907               	andlw	7
  2488  005B  3A03               	xorlw	3
  2489  005C  1903               	skipnz
  2490  005D  2863               	goto	l2910
  2491  005E  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  2492  005F  3907               	andlw	7
  2493  0060  3A04               	xorlw	4
  2494  0061  1D03               	skipz
  2495  0062  2865               	goto	l2912
  2496  0063                     l2910:	
  2497                           
  2498                           ;main.c: 41: Audio_GetValue();
  2499  0063  2068  3180         	fcall	_Audio_GetValue
  2500  0065                     l2912:	
  2501                           
  2502                           ;main.c: 42: }
  2503                           ;main.c: 43: Led_SaveParaIfChanged();
  2504  0065  222F  3180         	fcall	_Led_SaveParaIfChanged
  2505  0067  2855               	goto	l584
  2506  0068                     __end_of_main:	
  2507  0068                     __ptext31:	
  2508 ;; *************** function _Audio_GetValue *****************
  2509 ;; Defined at:
  2510 ;;		line 61 in file "user/src/audio.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;  value           2   17[BANK0 ] unsigned int 
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0, pclath, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 1F/1
  2521 ;;		On exit  : 1F/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2524 ;;      Params:         0       0       0       0
  2525 ;;      Locals:         0       2       0       0
  2526 ;;      Temps:          0       4       0       0
  2527 ;;      Totals:         0       6       0       0
  2528 ;;Total ram usage:        6 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    8
  2531 ;; This function calls:
  2532 ;;		_ADC_Conversion
  2533 ;;		___wmul
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           
  2540                           ;psect for function _Audio_GetValue
  2541  0068                     _Audio_GetValue:	
  2542                           
  2543                           ;audio.c: 63: static uint16_t max = 0;
  2544                           ;audio.c: 64: static uint16_t min = 0;
  2545                           ;audio.c: 65: static uint16_t cnt = 0;
  2546                           ;audio.c: 66: uint16_t value;
  2547                           ;audio.c: 68: (INTCONbits.GIE = 0);
  2548                           
  2549                           ;incstack = 0
  2550                           ; Regs used in _Audio_GetValue: [wreg+status,2+status,0+pclath+cstack]
  2551  0068  138B               	bcf	11,7	;volatile
  2552                           
  2553                           ;audio.c: 69: value = ADC_Conversion ( 6 );
  2554  0069  3006               	movlw	6
  2555  006A  20BA  3180         	fcall	_ADC_Conversion
  2556  006C  084A               	movf	?_ADC_Conversion+1,w
  2557  006D  00D4               	movwf	Audio_GetValue@value+1
  2558  006E  0849               	movf	?_ADC_Conversion,w
  2559  006F  00D3               	movwf	Audio_GetValue@value
  2560                           
  2561                           ;audio.c: 70: (INTCONbits.GIE = 1);
  2562  0070  178B               	bsf	11,7	;volatile
  2563                           
  2564                           ;audio.c: 71: if ( cnt == 0 )
  2565  0071  082F               	movf	Audio_GetValue@cnt,w
  2566  0072  0430               	iorwf	Audio_GetValue@cnt+1,w
  2567  0073  1D03               	btfss	3,2
  2568  0074  2878               	goto	l2796
  2569                           
  2570                           ;audio.c: 72: {
  2571                           ;audio.c: 73: max = value;
  2572  0075  236A  3180         	fcall	PL40	;call to abstracted procedure
  2573  0077  288A               	goto	l2800
  2574  0078                     l2796:	
  2575                           ;audio.c: 75: }
  2576                           
  2577                           ;audio.c: 74: min = value;
  2578                           
  2579                           
  2580                           ;audio.c: 76: else
  2581                           ;audio.c: 77: {
  2582                           ;audio.c: 78: if ( max < value )
  2583  0078  0854               	movf	Audio_GetValue@value+1,w
  2584  0079  0234               	subwf	Audio_GetValue@max+1,w
  2585  007A  1D03               	skipz
  2586  007B  287E               	goto	u2025
  2587  007C  0853               	movf	Audio_GetValue@value,w
  2588  007D  0233               	subwf	Audio_GetValue@max,w
  2589  007E                     u2025:	
  2590  007E  1803               	skipnc
  2591  007F  2882               	goto	l316
  2592                           
  2593                           ;audio.c: 79: {
  2594                           ;audio.c: 80: max = value;
  2595  0080  236A  3180         	fcall	PL40	;call to abstracted procedure
  2596  0082                     l316:	
  2597                           
  2598                           ;audio.c: 81: }
  2599                           ;audio.c: 82: if ( min > value )
  2600  0082  0832               	movf	Audio_GetValue@min+1,w
  2601  0083  0254               	subwf	Audio_GetValue@value+1,w
  2602  0084  1D03               	skipz
  2603  0085  2888               	goto	u2035
  2604  0086  0831               	movf	Audio_GetValue@min,w
  2605  0087  0253               	subwf	Audio_GetValue@value,w
  2606  0088                     u2035:	
  2607  0088  1803               	skipnc
  2608  0089  288E               	goto	l2802
  2609  008A                     l2800:	
  2610                           
  2611                           ;audio.c: 83: {
  2612                           ;audio.c: 84: min = value;
  2613  008A  0854               	movf	Audio_GetValue@value+1,w
  2614  008B  00B2               	movwf	Audio_GetValue@min+1
  2615  008C  0853               	movf	Audio_GetValue@value,w
  2616  008D  00B1               	movwf	Audio_GetValue@min
  2617  008E                     l2802:	
  2618                           
  2619                           ;audio.c: 85: }
  2620                           ;audio.c: 86: }
  2621                           ;audio.c: 87: cnt++;
  2622  008E  0AAF               	incf	Audio_GetValue@cnt,f
  2623  008F  1903               	skipnz
  2624  0090  0AB0               	incf	Audio_GetValue@cnt+1,f
  2625                           
  2626                           ;audio.c: 88: if ( cnt >= 256 )
  2627  0091  3001               	movlw	1
  2628  0092  0230               	subwf	Audio_GetValue@cnt+1,w
  2629  0093  3000               	movlw	0
  2630  0094  1903               	skipnz
  2631  0095  022F               	subwf	Audio_GetValue@cnt,w
  2632  0096  1C03               	skipc
  2633  0097  0008               	return
  2634                           
  2635                           ;audio.c: 89: {
  2636                           ;audio.c: 90: cnt = 0;
  2637  0098  01AF               	clrf	Audio_GetValue@cnt
  2638  0099  01B0               	clrf	Audio_GetValue@cnt+1
  2639                           
  2640                           ;audio.c: 91: (INTCONbits.GIE = 0);
  2641  009A  138B               	bcf	11,7	;volatile
  2642                           
  2643                           ;audio.c: 92: audio_value = ( audio_value * 15 + max - min ) >> 4;
  2644  009B  0836               	movf	_audio_value+1,w	;volatile
  2645  009C  00CA               	movwf	___wmul@multiplier+1
  2646  009D  0835               	movf	_audio_value,w	;volatile
  2647  009E  00C9               	movwf	___wmul@multiplier
  2648  009F  300F               	movlw	15
  2649  00A0  00CB               	movwf	___wmul@multiplicand
  2650  00A1  01CC               	clrf	___wmul@multiplicand+1
  2651  00A2  2293               	fcall	___wmul
  2652  00A3  0831               	movf	Audio_GetValue@min,w
  2653  00A4  0249               	subwf	?___wmul,w
  2654  00A5  00CF               	movwf	??_Audio_GetValue
  2655  00A6  0832               	movf	Audio_GetValue@min+1,w
  2656  00A7  3B4A               	subwfb	?___wmul+1,w
  2657  00A8  00D0               	movwf	??_Audio_GetValue+1
  2658  00A9  0833               	movf	Audio_GetValue@max,w
  2659  00AA  074F               	addwf	??_Audio_GetValue,w
  2660  00AB  00D1               	movwf	??_Audio_GetValue+2
  2661  00AC  0834               	movf	Audio_GetValue@max+1,w
  2662  00AD  3D50               	addwfc	??_Audio_GetValue+1,w
  2663  00AE  00D2               	movwf	??_Audio_GetValue+3
  2664  00AF  0E51               	swapf	??_Audio_GetValue+2,w
  2665  00B0  390F               	andlw	15
  2666  00B1  00B5               	movwf	_audio_value	;volatile
  2667  00B2  0E52               	swapf	??_Audio_GetValue+3,w
  2668  00B3  39F0               	andlw	240
  2669  00B4  04B5               	iorwf	_audio_value,f	;volatile
  2670  00B5  0E52               	swapf	??_Audio_GetValue+3,w
  2671  00B6  390F               	andlw	15
  2672  00B7  00B6               	movwf	_audio_value+1	;volatile
  2673                           
  2674                           ;audio.c: 93: (INTCONbits.GIE = 1);
  2675  00B8  178B               	bsf	11,7	;volatile
  2676  00B9  0008               	return
  2677  00BA                     __end_of_Audio_GetValue:	
  2678  00BA                     __ptext33:	
  2679 ;; *************** function _ADC_Conversion *****************
  2680 ;; Defined at:
  2681 ;;		line 22 in file "driver/src/adc.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  chn             1    wreg     unsigned char 
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  chn             1   10[BANK0 ] unsigned char 
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  2    7[BANK0 ] unsigned int 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0
  2690 ;; Tracked objects:
  2691 ;;		On entry : 1F/1
  2692 ;;		On exit  : 1F/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2695 ;;      Params:         0       2       0       0
  2696 ;;      Locals:         0       1       0       0
  2697 ;;      Temps:          0       1       0       0
  2698 ;;      Totals:         0       4       0       0
  2699 ;;Total ram usage:        4 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    7
  2702 ;; This function calls:
  2703 ;;		Nothing
  2704 ;; This function is called by:
  2705 ;;		_Audio_GetValue
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           
  2710                           ;psect for function _ADC_Conversion
  2711  00BA                     _ADC_Conversion:	
  2712                           
  2713                           ;incstack = 0
  2714                           ; Regs used in _ADC_Conversion: [wreg+status,2+status,0]
  2715                           ;ADC_Conversion@chn stored from wreg
  2716  00BA  0020               	movlb	0	; select bank0
  2717  00BB  00CC               	movwf	ADC_Conversion@chn
  2718                           
  2719                           ;adc.c: 24: ADCON0bits.CHS = chn;
  2720  00BC  00CB               	movwf	??_ADC_Conversion
  2721  00BD  0DCB               	rlf	??_ADC_Conversion,f
  2722  00BE  0DCB               	rlf	??_ADC_Conversion,f
  2723  00BF  0021               	movlb	1	; select bank1
  2724  00C0  081D               	movf	29,w	;volatile
  2725  00C1  0020               	movlb	0	; select bank0
  2726  00C2  064B               	xorwf	??_ADC_Conversion,w
  2727  00C3  3983               	andlw	-125
  2728  00C4  064B               	xorwf	??_ADC_Conversion,w
  2729  00C5  0021               	movlb	1	; select bank1
  2730  00C6  009D               	movwf	29	;volatile
  2731                           
  2732                           ;adc.c: 25: ADCON0bits.ADON = 1;
  2733  00C7  141D               	bsf	29,0	;volatile
  2734                           
  2735                           ;adc.c: 26: _delay((unsigned long)((4)*(16000000/4000000.0)));
  2736  00C8  3005               	movlw	5
  2737  00C9                     u2287:	
  2738  00C9  0B89               	decfsz	9,f
  2739  00CA  28C9               	goto	u2287
  2740  00CB  0000               	nop
  2741                           
  2742                           ;adc.c: 27: ADCON0bits.GO_nDONE = 1;
  2743  00CC  0021               	movlb	1	; select bank1
  2744  00CD  149D               	bsf	29,1	;volatile
  2745  00CE                     l22:	
  2746                           ;adc.c: 28: while ( !PIR1bits.ADIF );
  2747                           
  2748  00CE  0020               	movlb	0	; select bank0
  2749  00CF  1F11               	btfss	17,6	;volatile
  2750  00D0  28CE               	goto	l22
  2751                           
  2752                           ;adc.c: 29: PIR1bits.ADIF = 0;
  2753  00D1  1311               	bcf	17,6	;volatile
  2754                           
  2755                           ;adc.c: 30: return ADRES;
  2756  00D2  0021               	movlb	1	; select bank1
  2757  00D3  081C               	movf	28,w	;volatile
  2758  00D4  0020               	movlb	0	; select bank0
  2759  00D5  00CA               	movwf	?_ADC_Conversion+1
  2760  00D6  0021               	movlb	1	; select bank1
  2761  00D7  081B               	movf	27,w	;volatile
  2762  00D8  0020               	movlb	0	; select bank0
  2763  00D9  00C9               	movwf	?_ADC_Conversion
  2764  00DA  0008               	return
  2765  00DB                     __end_of_ADC_Conversion:	
  2766  00DB                     __ptext26:	
  2767 ;; *************** function _Audio_Initialize *****************
  2768 ;; Defined at:
  2769 ;;		line 47 in file "user/src/led.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;		None
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;		None
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2778 ;; Tracked objects:
  2779 ;;		On entry : 1F/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2783 ;;      Params:         0       0       0       0
  2784 ;;      Locals:         0       2       0       0
  2785 ;;      Temps:          0       2       0       0
  2786 ;;      Totals:         0       4       0       0
  2787 ;;Total ram usage:        4 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    9
  2790 ;; This function calls:
  2791 ;;		_Audio_SetPlayMode
  2792 ;;		_Audio_SetVolume
  2793 ;;		_Audio_StopSound
  2794 ;; This function is called by:
  2795 ;;		_main
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _Audio_Initialize
  2801  00DB                     _Audio_Initialize:	
  2802                           
  2803                           ;led.c: 48: _delay((unsigned long)((640)*(16000000/4000.0)));
  2804                           
  2805                           ;incstack = 0
  2806                           ; Regs used in _Audio_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2807  00DB  300D               	movlw	13
  2808  00DC  0020               	movlb	0	; select bank0
  2809  00DD  00CD               	movwf	??_Audio_Initialize+1
  2810  00DE  30FD               	movlw	253
  2811  00DF  00CC               	movwf	??_Audio_Initialize
  2812  00E0  30A2               	movlw	162
  2813  00E1                     u2247:	
  2814  00E1  0B89               	decfsz	9,f
  2815  00E2  28E1               	goto	u2247
  2816  00E3  0BCC               	decfsz	??_Audio_Initialize,f
  2817  00E4  28E1               	goto	u2247
  2818  00E5  0BCD               	decfsz	??_Audio_Initialize+1,f
  2819  00E6  28E1               	goto	u2247
  2820  00E7  0000               	nop
  2821  00E8  0064               	clrwdt	;# 
  2822                           
  2823                           ;led.c: 50: Audio_StopSound();
  2824  00E9  2121  3180         	fcall	_Audio_StopSound
  2825                           
  2826                           ;led.c: 51: _delay((unsigned long)((480)*(16000000/4000.0)));
  2827  00EB  300A               	movlw	10
  2828  00EC  0020               	movlb	0	; select bank0
  2829  00ED  00CD               	movwf	??_Audio_Initialize+1
  2830  00EE  30BE               	movlw	190
  2831  00EF  00CC               	movwf	??_Audio_Initialize
  2832  00F0  3079               	movlw	121
  2833  00F1                     u2257:	
  2834  00F1  0B89               	decfsz	9,f
  2835  00F2  28F1               	goto	u2257
  2836  00F3  0BCC               	decfsz	??_Audio_Initialize,f
  2837  00F4  28F1               	goto	u2257
  2838  00F5  0BCD               	decfsz	??_Audio_Initialize+1,f
  2839  00F6  28F1               	goto	u2257
  2840                           
  2841                           ;led.c: 52: Audio_SetVolume(gLedPara.mVolOn ? VOLUME[ gLedPara.mVolume ] : 0);
  2842  00F7  0021               	movlb	1	; select bank1
  2843  00F8  1A40               	btfsc	_gLedPara^(0+128),4	;volatile
  2844  00F9  28FD               	goto	l2852
  2845  00FA  0020               	movlb	0	; select bank0
  2846  00FB  01CE               	clrf	_Audio_Initialize$595
  2847  00FC  2901               	goto	L3
  2848  00FD                     l2852:	
  2849  00FD  261E  3180         	fcall	PL4	;call to abstracted procedure
  2850  00FF  0020               	movlb	0	; select bank0
  2851  0100  00CE               	movwf	_Audio_Initialize$595
  2852  0101                     L3:	
  2853  0101  01CF               	clrf	_Audio_Initialize$595+1
  2854  0102  084E               	movf	_Audio_Initialize$595,w
  2855  0103  2133  3180         	fcall	_Audio_SetVolume
  2856                           
  2857                           ;led.c: 53: _delay((unsigned long)((480)*(16000000/4000.0)));
  2858  0105  300A               	movlw	10
  2859  0106  0020               	movlb	0	; select bank0
  2860  0107  00CD               	movwf	??_Audio_Initialize+1
  2861  0108  30BE               	movlw	190
  2862  0109  00CC               	movwf	??_Audio_Initialize
  2863  010A  3079               	movlw	121
  2864  010B                     u2267:	
  2865  010B  0B89               	decfsz	9,f
  2866  010C  290B               	goto	u2267
  2867  010D  0BCC               	decfsz	??_Audio_Initialize,f
  2868  010E  290B               	goto	u2267
  2869  010F  0BCD               	decfsz	??_Audio_Initialize+1,f
  2870  0110  290B               	goto	u2267
  2871                           
  2872                           ;led.c: 54: Audio_SetPlayMode(0x01);
  2873  0111  3001               	movlw	1
  2874  0112  2149  3180         	fcall	_Audio_SetPlayMode
  2875                           
  2876                           ;led.c: 55: _delay((unsigned long)((480)*(16000000/4000.0)));
  2877  0114  300A               	movlw	10
  2878  0115  0020               	movlb	0	; select bank0
  2879  0116  00CD               	movwf	??_Audio_Initialize+1
  2880  0117  30BE               	movlw	190
  2881  0118  00CC               	movwf	??_Audio_Initialize
  2882  0119  3079               	movlw	121
  2883  011A                     u2277:	
  2884  011A  0B89               	decfsz	9,f
  2885  011B  291A               	goto	u2277
  2886  011C  0BCC               	decfsz	??_Audio_Initialize,f
  2887  011D  291A               	goto	u2277
  2888  011E  0BCD               	decfsz	??_Audio_Initialize+1,f
  2889  011F  291A               	goto	u2277
  2890  0120  0008               	return
  2891  0121                     __end_of_Audio_Initialize:	
  2892  0121                     __ptext27:	
  2893 ;; *************** function _Audio_StopSound *****************
  2894 ;; Defined at:
  2895 ;;		line 15 in file "user/src/audio.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  checksum        1    8[BANK0 ] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 1F/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2909 ;;      Params:         0       0       0       0
  2910 ;;      Locals:         0       1       0       0
  2911 ;;      Temps:          0       0       0       0
  2912 ;;      Totals:         0       1       0       0
  2913 ;;Total ram usage:        1 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    8
  2916 ;; This function calls:
  2917 ;;		_EUSART_Write
  2918 ;; This function is called by:
  2919 ;;		_Audio_Initialize
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           
  2924                           ;psect for function _Audio_StopSound
  2925  0121                     _Audio_StopSound:	
  2926                           
  2927                           ;audio.c: 17: uint8_t checksum = 0x00;
  2928                           
  2929                           ;incstack = 0
  2930                           ; Regs used in _Audio_StopSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2931  0121  0020               	movlb	0	; select bank0
  2932  0122  307E               	movlw	126
  2933  0123  01CA               	clrf	Audio_StopSound@checksum
  2934                           
  2935                           ;audio.c: 18: EUSART_Write ( 0x7E );
  2936  0124  2160  3180         	fcall	_EUSART_Write
  2937                           
  2938                           ;audio.c: 19: checksum += EUSART_Write ( 0x03 );
  2939  0126  3003               	movlw	3
  2940  0127  2160  3180         	fcall	_EUSART_Write
  2941  0129  07CA               	addwf	Audio_StopSound@checksum,f
  2942                           
  2943                           ;audio.c: 20: checksum += EUSART_Write ( 0xAB );
  2944  012A  30AB               	movlw	171
  2945  012B  2160  3180         	fcall	_EUSART_Write
  2946  012D  07CA               	addwf	Audio_StopSound@checksum,f
  2947                           
  2948                           ;audio.c: 21: EUSART_Write ( checksum );
  2949  012E  084A               	movf	Audio_StopSound@checksum,w
  2950  012F  2160  3180         	fcall	_EUSART_Write
  2951                           
  2952                           ;audio.c: 22: EUSART_Write ( 0xEF );
  2953  0131  30EF               	movlw	239
  2954  0132  2960               	ljmp	_EUSART_Write
  2955  0133                     __end_of_Audio_StopSound:	
  2956  0133                     __ptext28:	
  2957 ;; *************** function _Audio_SetVolume *****************
  2958 ;; Defined at:
  2959 ;;		line 50 in file "user/src/audio.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  vol             1    wreg     unsigned char 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  vol             1    8[BANK0 ] unsigned char 
  2964 ;;  checksum        1    9[BANK0 ] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 1F/0
  2971 ;;		On exit  : 1F/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2974 ;;      Params:         0       0       0       0
  2975 ;;      Locals:         0       2       0       0
  2976 ;;      Temps:          0       0       0       0
  2977 ;;      Totals:         0       2       0       0
  2978 ;;Total ram usage:        2 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    8
  2981 ;; This function calls:
  2982 ;;		_EUSART_Write
  2983 ;; This function is called by:
  2984 ;;		_Audio_Initialize
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           
  2989                           ;psect for function _Audio_SetVolume
  2990  0133                     _Audio_SetVolume:	
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in _Audio_SetVolume: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2994                           ;Audio_SetVolume@vol stored from wreg
  2995  0133  00CA               	movwf	Audio_SetVolume@vol
  2996  0134  307E               	movlw	126
  2997                           
  2998                           ;audio.c: 52: uint8_t checksum = 0x00;
  2999  0135  01CB               	clrf	Audio_SetVolume@checksum
  3000                           
  3001                           ;audio.c: 53: EUSART_Write ( 0x7E );
  3002  0136  2160  3180         	fcall	_EUSART_Write
  3003                           
  3004                           ;audio.c: 54: checksum += EUSART_Write ( 0x04 );
  3005  0138  3004               	movlw	4
  3006  0139  2160  3180         	fcall	_EUSART_Write
  3007  013B  07CB               	addwf	Audio_SetVolume@checksum,f
  3008                           
  3009                           ;audio.c: 55: checksum += EUSART_Write ( 0xAE );
  3010  013C  30AE               	movlw	174
  3011  013D  2160  3180         	fcall	_EUSART_Write
  3012  013F  07CB               	addwf	Audio_SetVolume@checksum,f
  3013                           
  3014                           ;audio.c: 56: checksum += EUSART_Write ( vol );
  3015  0140  084A               	movf	Audio_SetVolume@vol,w
  3016  0141  2160  3180         	fcall	_EUSART_Write
  3017  0143  07CB               	addwf	Audio_SetVolume@checksum,f
  3018                           
  3019                           ;audio.c: 57: EUSART_Write ( checksum );
  3020  0144  084B               	movf	Audio_SetVolume@checksum,w
  3021  0145  2160  3180         	fcall	_EUSART_Write
  3022                           
  3023                           ;audio.c: 58: EUSART_Write ( 0xEF );
  3024  0147  30EF               	movlw	239
  3025  0148  2960               	ljmp	_EUSART_Write
  3026  0149                     __end_of_Audio_SetVolume:	
  3027  0149                     __ptext29:	
  3028 ;; *************** function _Audio_SetPlayMode *****************
  3029 ;; Defined at:
  3030 ;;		line 39 in file "user/src/audio.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  type            1    wreg     unsigned char 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  type            1    8[BANK0 ] unsigned char 
  3035 ;;  checksum        1    9[BANK0 ] unsigned char 
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 1F/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3045 ;;      Params:         0       0       0       0
  3046 ;;      Locals:         0       2       0       0
  3047 ;;      Temps:          0       0       0       0
  3048 ;;      Totals:         0       2       0       0
  3049 ;;Total ram usage:        2 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    8
  3052 ;; This function calls:
  3053 ;;		_EUSART_Write
  3054 ;; This function is called by:
  3055 ;;		_Audio_Initialize
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           
  3060                           ;psect for function _Audio_SetPlayMode
  3061  0149                     _Audio_SetPlayMode:	
  3062                           
  3063                           ;incstack = 0
  3064                           ; Regs used in _Audio_SetPlayMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3065                           ;Audio_SetPlayMode@type stored from wreg
  3066  0149  0020               	movlb	0	; select bank0
  3067  014A  00CA               	movwf	Audio_SetPlayMode@type
  3068  014B  307E               	movlw	126
  3069                           
  3070                           ;audio.c: 41: uint8_t checksum = 0x00;
  3071  014C  01CB               	clrf	Audio_SetPlayMode@checksum
  3072                           
  3073                           ;audio.c: 42: EUSART_Write ( 0x7E );
  3074  014D  2160  3180         	fcall	_EUSART_Write
  3075                           
  3076                           ;audio.c: 43: checksum += EUSART_Write ( 0x04 );
  3077  014F  3004               	movlw	4
  3078  0150  2160  3180         	fcall	_EUSART_Write
  3079  0152  07CB               	addwf	Audio_SetPlayMode@checksum,f
  3080                           
  3081                           ;audio.c: 44: checksum += EUSART_Write ( 0xAF );
  3082  0153  30AF               	movlw	175
  3083  0154  2160  3180         	fcall	_EUSART_Write
  3084  0156  07CB               	addwf	Audio_SetPlayMode@checksum,f
  3085                           
  3086                           ;audio.c: 45: checksum += EUSART_Write ( type );
  3087  0157  084A               	movf	Audio_SetPlayMode@type,w
  3088  0158  2160  3180         	fcall	_EUSART_Write
  3089  015A  07CB               	addwf	Audio_SetPlayMode@checksum,f
  3090                           
  3091                           ;audio.c: 46: EUSART_Write ( checksum );
  3092  015B  084B               	movf	Audio_SetPlayMode@checksum,w
  3093  015C  2160  3180         	fcall	_EUSART_Write
  3094                           
  3095                           ;audio.c: 47: EUSART_Write ( 0xEF );
  3096  015E  30EF               	movlw	239
  3097  015F  2960               	ljmp	_EUSART_Write
  3098  0160                     __end_of_Audio_SetPlayMode:	
  3099  0160                     __ptext30:	
  3100 ;; *************** function _EUSART_Write *****************
  3101 ;; Defined at:
  3102 ;;		line 35 in file "driver/src/eusart.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  byte            1    wreg     unsigned char 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  byte            1    7[BANK0 ] unsigned char 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      unsigned char 
  3109 ;; Registers used:
  3110 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3111 ;; Tracked objects:
  3112 ;;		On entry : 1F/0
  3113 ;;		On exit  : 1F/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3116 ;;      Params:         0       0       0       0
  3117 ;;      Locals:         0       1       0       0
  3118 ;;      Temps:          0       0       0       0
  3119 ;;      Totals:         0       1       0       0
  3120 ;;Total ram usage:        1 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    7
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_Audio_StopSound
  3127 ;;		_Audio_SetPlayMode
  3128 ;;		_Audio_SetVolume
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           
  3133                           ;psect for function _EUSART_Write
  3134  0160                     _EUSART_Write:	
  3135                           
  3136                           ;incstack = 0
  3137                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  3138                           ;EUSART_Write@byte stored from wreg
  3139  0160  00C9               	movwf	EUSART_Write@byte
  3140  0161                     l2394:	
  3141                           ;eusart.c: 37: while ( 0 == txRemain );
  3142                           
  3143  0161  0840               	movf	_txRemain,w
  3144  0162  1903               	btfsc	3,2
  3145  0163  2961               	goto	l2394
  3146                           
  3147                           ;eusart.c: 39: if ( !PIE1bits.TXIE )
  3148  0164  0021               	movlb	1	; select bank1
  3149  0165  1A11               	btfsc	17,4	;volatile
  3150  0166  296C               	goto	l58
  3151                           
  3152                           ;eusart.c: 40: {
  3153                           ;eusart.c: 41: TXREG = byte;
  3154  0167  0020               	movlb	0	; select bank0
  3155  0168  0849               	movf	EUSART_Write@byte,w
  3156  0169  0023               	movlb	3	; select bank3
  3157  016A  009A               	movwf	26	;volatile
  3158                           
  3159                           ;eusart.c: 42: }
  3160  016B  2970               	goto	l2408
  3161  016C                     l58:	
  3162                           
  3163                           ;eusart.c: 43: else
  3164                           ;eusart.c: 44: {
  3165                           ;eusart.c: 45: PIE1bits.TXIE = 0;
  3166                           
  3167                           ;eusart.c: 46: txBuf[txHead++] = byte;
  3168  016C  26A7  3180         	fcall	PL36	;call to abstracted procedure
  3169  016E  0849               	movf	EUSART_Write@byte,w
  3170                           
  3171                           ;eusart.c: 47: if ( sizeof (txBuf ) <= txHead )
  3172                           
  3173                           ;eusart.c: 48: {
  3174                           ;eusart.c: 49: txHead = 0;
  3175                           
  3176                           ;eusart.c: 50: }
  3177                           ;eusart.c: 51: txRemain--;
  3178  016F  2689               	fcall	PL28	;call to abstracted procedure
  3179  0170                     l2408:	
  3180                           
  3181                           ;eusart.c: 52: }
  3182                           ;eusart.c: 53: PIE1bits.TXIE = 1;
  3183  0170  0021               	movlb	1	; select bank1
  3184  0171  1611               	bsf	17,4	;volatile
  3185                           
  3186                           ;eusart.c: 54: return byte;
  3187  0172  0020               	movlb	0	; select bank0
  3188  0173  0849               	movf	EUSART_Write@byte,w
  3189  0174  0008               	return
  3190  0175                     __end_of_EUSART_Write:	
  3191  0175                     __ptext23:	
  3192 ;; *************** function _Interrupt_Initialize *****************
  3193 ;; Defined at:
  3194 ;;		line 87 in file "user/src/main.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;		None
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, status,2, status,0, pclath, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 1F/1
  3205 ;;		On exit  : 1F/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3208 ;;      Params:         0       0       0       0
  3209 ;;      Locals:         0       0       0       0
  3210 ;;      Temps:          0       0       0       0
  3211 ;;      Totals:         0       0       0       0
  3212 ;;Total ram usage:        0 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    8
  3215 ;; This function calls:
  3216 ;;		_Key_SetActionHandler
  3217 ;;		_TMR2_SetInterruptHandler
  3218 ;; This function is called by:
  3219 ;;		_main
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           
  3224                           ;psect for function _Interrupt_Initialize
  3225  0175                     _Interrupt_Initialize:	
  3226                           
  3227                           ;main.c: 88: TMR2_SetInterruptHandler(Led_Run);
  3228                           
  3229                           ;incstack = 0
  3230                           ; Regs used in _Interrupt_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3231  0175  30AE               	movlw	low _Led_Run
  3232  0176  0020               	movlb	0	; select bank0
  3233  0177  00C9               	movwf	TMR2_SetInterruptHandler@handler
  3234  0178  3006               	movlw	high _Led_Run
  3235  0179  00CA               	movwf	TMR2_SetInterruptHandler@handler+1
  3236  017A  21E2  3180         	fcall	_TMR2_SetInterruptHandler
  3237                           
  3238                           ;main.c: 89: Key_SetActionHandler(Led_OnKeyPressed);
  3239  017C  30A9               	movlw	low _Led_OnKeyPressed
  3240  017D  00C9               	movwf	Key_SetActionHandler@handler
  3241  017E  3003               	movlw	high _Led_OnKeyPressed
  3242  017F  00CA               	movwf	Key_SetActionHandler@handler+1
  3243  0180  2AA8               	ljmp	l2748
  3244  0181                     __end_of_Interrupt_Initialize:	
  3245  0181                     __ptext20:	
  3246 ;; *************** function _Led_InitPara *****************
  3247 ;; Defined at:
  3248 ;;		line 12 in file "user/src/led.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;		None
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;		None
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 1F/0
  3259 ;;		On exit  : 1F/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3262 ;;      Params:         0       0       0       0
  3263 ;;      Locals:         0       0       0       0
  3264 ;;      Temps:          0       1       0       0
  3265 ;;      Totals:         0       1       0       0
  3266 ;;Total ram usage:        1 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    9
  3269 ;; This function calls:
  3270 ;;		_FLASH_ReadBuffer
  3271 ;; This function is called by:
  3272 ;;		_main
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           
  3277                           ;psect for function _Led_InitPara
  3278  0181                     _Led_InitPara:	
  3279                           
  3280                           ;led.c: 13: FLASH_ReadBuffer((uint8_t*) & gLedPara, 0xFC0, sizeof (gLedPara));
  3281                           
  3282                           ;incstack = 0
  3283                           ; Regs used in _Led_InitPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3284  0181  30C0               	movlw	192
  3285  0182  00CC               	movwf	FLASH_ReadBuffer@addr
  3286  0183  300F               	movlw	15
  3287  0184  00CD               	movwf	FLASH_ReadBuffer@addr+1
  3288  0185  3020               	movlw	32
  3289  0186  00CE               	movwf	FLASH_ReadBuffer@size
  3290  0187  30C0               	movlw	(low (_gLedPara| 0))& (0+255)
  3291  0188  21E7  3180         	fcall	_FLASH_ReadBuffer
  3292                           
  3293                           ;led.c: 14: if (gLedPara.all_bright > 1000) {
  3294  018A  3003               	movlw	3
  3295  018B  0021               	movlb	1	; select bank1
  3296  018C  0242               	subwf	((_gLedPara+1)^(0+128)+1),w	;volatile
  3297  018D  30E9               	movlw	233
  3298  018E  1903               	skipnz
  3299  018F  0241               	subwf	(_gLedPara^(0+128)+1),w	;volatile
  3300                           
  3301                           ;led.c: 15: gLedPara.all_bright = 1000;
  3302  0190  3003               	movlw	3
  3303  0191  1C03               	skipc
  3304  0192  2997               	goto	L1
  3305  0193  00C2               	movwf	((_gLedPara+1)^(0+128)+1)	;volatile
  3306  0194  30E8               	movlw	232
  3307  0195  00C1               	movwf	(_gLedPara^(0+128)+1)	;volatile
  3308                           
  3309                           ;led.c: 16: }
  3310                           ;led.c: 17: if (gLedPara.white_bright > 1000) {
  3311  0196  3003               	movlw	3
  3312  0197                     L1:	
  3313  0197  0244               	subwf	((_gLedPara+1)^(0+128)+3),w	;volatile
  3314  0198  30E9               	movlw	233
  3315  0199  1903               	skipnz
  3316  019A  0243               	subwf	(_gLedPara^(0+128)+3),w	;volatile
  3317                           
  3318                           ;led.c: 18: gLedPara.white_bright = 1000;
  3319  019B  3003               	movlw	3
  3320  019C  1C03               	skipc
  3321  019D  29A2               	goto	L2
  3322  019E  00C4               	movwf	((_gLedPara+1)^(0+128)+3)	;volatile
  3323  019F  30E8               	movlw	232
  3324  01A0  00C3               	movwf	(_gLedPara^(0+128)+3)	;volatile
  3325                           
  3326                           ;led.c: 19: }
  3327                           ;led.c: 20: if (gLedPara.blue_bright > 1000) {
  3328  01A1  3003               	movlw	3
  3329  01A2                     L2:	
  3330  01A2  0246               	subwf	((_gLedPara+1)^(0+128)+5),w	;volatile
  3331  01A3  30E9               	movlw	233
  3332  01A4  1903               	skipnz
  3333  01A5  0245               	subwf	(_gLedPara^(0+128)+5),w	;volatile
  3334  01A6  1C03               	skipc
  3335  01A7  29AC               	goto	l2828
  3336                           
  3337                           ;led.c: 21: gLedPara.blue_bright = 1000;
  3338  01A8  3003               	movlw	3
  3339  01A9  00C6               	movwf	((_gLedPara+1)^(0+128)+5)	;volatile
  3340  01AA  30E8               	movlw	232
  3341  01AB  00C5               	movwf	(_gLedPara^(0+128)+5)	;volatile
  3342  01AC                     l2828:	
  3343                           
  3344                           ;led.c: 22: }
  3345                           ;led.c: 24: if (gLedPara.all_bright < 10) {
  3346  01AC  3000               	movlw	0
  3347  01AD  0242               	subwf	((_gLedPara+1)^(0+128)+1),w	;volatile
  3348  01AE  300A               	movlw	10
  3349  01AF  1903               	skipnz
  3350  01B0  0241               	subwf	(_gLedPara^(0+128)+1),w	;volatile
  3351  01B1  1803               	skipnc
  3352  01B2  29B6               	goto	l369
  3353                           
  3354                           ;led.c: 25: gLedPara.all_bright = 10;
  3355  01B3  300A               	movlw	10
  3356  01B4  00C1               	movwf	(_gLedPara^(0+128)+1)	;volatile
  3357  01B5  01C2               	clrf	((_gLedPara+1)^(0+128)+1)	;volatile
  3358  01B6                     l369:	
  3359                           
  3360                           ;led.c: 26: }
  3361                           ;led.c: 27: if (gLedPara.white_bright < 10) {
  3362  01B6  3000               	movlw	0
  3363  01B7  0244               	subwf	((_gLedPara+1)^(0+128)+3),w	;volatile
  3364  01B8  300A               	movlw	10
  3365  01B9  1903               	skipnz
  3366  01BA  0243               	subwf	(_gLedPara^(0+128)+3),w	;volatile
  3367  01BB  1803               	skipnc
  3368  01BC  29C0               	goto	l370
  3369                           
  3370                           ;led.c: 28: gLedPara.white_bright = 10;
  3371  01BD  300A               	movlw	10
  3372  01BE  00C3               	movwf	(_gLedPara^(0+128)+3)	;volatile
  3373  01BF  01C4               	clrf	((_gLedPara+1)^(0+128)+3)	;volatile
  3374  01C0                     l370:	
  3375                           
  3376                           ;led.c: 29: }
  3377                           ;led.c: 30: if (gLedPara.blue_bright < 10) {
  3378  01C0  3000               	movlw	0
  3379  01C1  0246               	subwf	((_gLedPara+1)^(0+128)+5),w	;volatile
  3380  01C2  300A               	movlw	10
  3381  01C3  1903               	skipnz
  3382  01C4  0245               	subwf	(_gLedPara^(0+128)+5),w	;volatile
  3383  01C5  1803               	skipnc
  3384  01C6  29CA               	goto	l2836
  3385                           
  3386                           ;led.c: 31: gLedPara.blue_bright = 10;
  3387  01C7  300A               	movlw	10
  3388  01C8  00C5               	movwf	(_gLedPara^(0+128)+5)	;volatile
  3389  01C9  01C6               	clrf	((_gLedPara+1)^(0+128)+5)	;volatile
  3390  01CA                     l2836:	
  3391                           
  3392                           ;led.c: 32: }
  3393                           ;led.c: 34: if (gLedPara.mMode > 4) {
  3394  01CA  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  3395  01CB  2364  3180         	fcall	PL38	;call to abstracted procedure
  3396  01CD  1C03               	skipc
  3397  01CE  29D2               	goto	l372
  3398                           
  3399                           ;led.c: 35: gLedPara.mMode = 0;
  3400  01CF  30F1               	movlw	-15
  3401  01D0  0021               	movlb	1	; select bank1
  3402  01D1  05C0               	andwf	_gLedPara^(0+128),f	;volatile
  3403  01D2                     l372:	
  3404                           
  3405                           ;led.c: 36: }
  3406                           ;led.c: 37: if (gLedPara.mVolume > 4) {
  3407  01D2  0021               	movlb	1	; select bank1
  3408  01D3  0E40               	swapf	_gLedPara^(0+128),w	;volatile
  3409  01D4  0C89               	rrf	9,f
  3410  01D5  2364  3180         	fcall	PL38	;call to abstracted procedure
  3411  01D7  1C03               	skipc
  3412  01D8  29DE               	goto	l373
  3413                           
  3414                           ;led.c: 38: gLedPara.mVolume = 4;
  3415  01D9  0021               	movlb	1	; select bank1
  3416  01DA  0840               	movf	_gLedPara^(0+128),w	;volatile
  3417  01DB  391F               	andlw	-225
  3418  01DC  3880               	iorlw	128
  3419  01DD  00C0               	movwf	_gLedPara^(0+128)	;volatile
  3420  01DE                     l373:	
  3421                           
  3422                           ;led.c: 39: }
  3423                           ;led.c: 45: gLedRunPara.music_state = 0;
  3424  01DE  3001               	movlw	-255
  3425  01DF  0020               	movlb	0	; select bank0
  3426  01E0  05A8               	andwf	_gLedRunPara+8,f	;volatile
  3427  01E1  0008               	return
  3428  01E2                     __end_of_Led_InitPara:	
  3429  01E2                     __ptext24:	
  3430 ;; *************** function _TMR2_SetInterruptHandler *****************
  3431 ;; Defined at:
  3432 ;;		line 31 in file "driver/src/tmr2.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  handler         2    7[BANK0 ] PTR FTN()void 
  3435 ;;		 -> Led_Run(1), 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg
  3442 ;; Tracked objects:
  3443 ;;		On entry : 1F/0
  3444 ;;		On exit  : 1F/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3447 ;;      Params:         0       2       0       0
  3448 ;;      Locals:         0       0       0       0
  3449 ;;      Temps:          0       0       0       0
  3450 ;;      Totals:         0       2       0       0
  3451 ;;Total ram usage:        2 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    7
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_Interrupt_Initialize
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           
  3462                           ;psect for function _TMR2_SetInterruptHandler
  3463  01E2                     _TMR2_SetInterruptHandler:	
  3464                           
  3465                           ;tmr2.c: 32: tmr2_isr_handler = handler;
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  3469  01E2  084A               	movf	TMR2_SetInterruptHandler@handler+1,w
  3470  01E3  00B8               	movwf	_tmr2_isr_handler+1
  3471  01E4  0849               	movf	TMR2_SetInterruptHandler@handler,w
  3472  01E5  00B7               	movwf	_tmr2_isr_handler
  3473  01E6  0008               	return
  3474  01E7                     __end_of_TMR2_SetInterruptHandler:	
  3475  01E7                     __ptext21:	
  3476 ;; *************** function _FLASH_ReadBuffer *****************
  3477 ;; Defined at:
  3478 ;;		line 86 in file "driver/src/flash.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  buf             1    wreg     PTR unsigned char 
  3481 ;;		 -> gLedPara(32), 
  3482 ;;  addr            2   10[BANK0 ] unsigned int 
  3483 ;;  size            1   12[BANK0 ] unsigned char 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  buf             1   14[BANK0 ] PTR unsigned char 
  3486 ;;		 -> gLedPara(32), 
  3487 ;;  i               1   15[BANK0 ] unsigned char 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      void 
  3490 ;; Registers used:
  3491 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 1F/0
  3494 ;;		On exit  : 1F/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3497 ;;      Params:         0       3       0       0
  3498 ;;      Locals:         0       2       0       0
  3499 ;;      Temps:          0       1       0       0
  3500 ;;      Totals:         0       6       0       0
  3501 ;;Total ram usage:        6 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    8
  3504 ;; This function calls:
  3505 ;;		_FLASH_ReadByte
  3506 ;; This function is called by:
  3507 ;;		_Led_InitPara
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           
  3512                           ;psect for function _FLASH_ReadBuffer
  3513  01E7                     _FLASH_ReadBuffer:	
  3514                           
  3515                           ;incstack = 0
  3516                           ; Regs used in _FLASH_ReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3517                           ;FLASH_ReadBuffer@buf stored from wreg
  3518  01E7  00D0               	movwf	FLASH_ReadBuffer@buf
  3519                           
  3520                           ;flash.c: 87: for (uint8_t i = 0; i < size; i++) {
  3521  01E8  01D1               	clrf	FLASH_ReadBuffer@i
  3522  01E9                     l2638:	
  3523  01E9  084E               	movf	FLASH_ReadBuffer@size,w
  3524  01EA  0251               	subwf	FLASH_ReadBuffer@i,w
  3525  01EB  1803               	btfsc	3,0
  3526  01EC  0008               	return
  3527                           
  3528                           ;flash.c: 88: *(buf + i) = FLASH_ReadByte(addr + i);
  3529  01ED  0851               	movf	FLASH_ReadBuffer@i,w
  3530  01EE  0750               	addwf	FLASH_ReadBuffer@buf,w
  3531  01EF  00CF               	movwf	??_FLASH_ReadBuffer
  3532  01F0  0086               	movwf	6
  3533  01F1  0187               	clrf	7
  3534  01F2  0851               	movf	FLASH_ReadBuffer@i,w
  3535  01F3  00C9               	movwf	FLASH_ReadByte@addr
  3536  01F4  01CA               	clrf	FLASH_ReadByte@addr+1
  3537  01F5  084C               	movf	FLASH_ReadBuffer@addr,w
  3538  01F6  07C9               	addwf	FLASH_ReadByte@addr,f
  3539  01F7  084D               	movf	FLASH_ReadBuffer@addr+1,w
  3540  01F8  3DCA               	addwfc	FLASH_ReadByte@addr+1,f
  3541  01F9  21FF  3180         	fcall	_FLASH_ReadByte
  3542  01FB  0081               	movwf	1
  3543  01FC  0020               	movlb	0	; select bank0
  3544  01FD  0AD1               	incf	FLASH_ReadBuffer@i,f
  3545  01FE  29E9               	goto	l2638
  3546  01FF                     __end_of_FLASH_ReadBuffer:	
  3547  01FF                     __ptext22:	
  3548 ;; *************** function _FLASH_ReadByte *****************
  3549 ;; Defined at:
  3550 ;;		line 73 in file "driver/src/flash.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;  addr            2    7[BANK0 ] unsigned int 
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  state           1    9[BANK0 ] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      unsigned char 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2
  3559 ;; Tracked objects:
  3560 ;;		On entry : 1F/0
  3561 ;;		On exit  : 1F/3
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3564 ;;      Params:         0       2       0       0
  3565 ;;      Locals:         0       1       0       0
  3566 ;;      Temps:          0       0       0       0
  3567 ;;      Totals:         0       3       0       0
  3568 ;;Total ram usage:        3 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    7
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_FLASH_ReadBuffer
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _FLASH_ReadByte
  3580  01FF                     _FLASH_ReadByte:	
  3581                           
  3582                           ;flash.c: 74: uint8_t state = GIE;
  3583                           
  3584                           ;incstack = 0
  3585                           ; Regs used in _FLASH_ReadByte: [wreg+status,2]
  3586  01FF  3000               	movlw	0
  3587  0200  1B8B               	btfsc	11,7	;volatile
  3588  0201  3001               	movlw	1
  3589  0202  00CB               	movwf	FLASH_ReadByte@state
  3590                           
  3591                           ;flash.c: 75: GIE = 0;
  3592  0203  138B               	bcf	11,7	;volatile
  3593                           
  3594                           ;flash.c: 76: PMADR = addr;
  3595  0204  084A               	movf	FLASH_ReadByte@addr+1,w
  3596  0205  0023               	movlb	3	; select bank3
  3597  0206  0092               	movwf	18	;volatile
  3598  0207  0020               	movlb	0	; select bank0
  3599  0208  0849               	movf	FLASH_ReadByte@addr,w
  3600  0209  0023               	movlb	3	; select bank3
  3601  020A  0091               	movwf	17	;volatile
  3602                           
  3603                           ;flash.c: 78: CFGS = 0;
  3604  020B  1315               	bcf	21,6	;volatile
  3605                           
  3606                           ;flash.c: 79: RD = 1;
  3607  020C  1415               	bsf	21,0	;volatile
  3608                           
  3609                           ;flash.c: 80: __nop();
  3610  020D  0000               	nop
  3611                           
  3612                           ;flash.c: 81: __nop();
  3613  020E  0000               	nop
  3614                           
  3615                           ;flash.c: 82: GIE = state;
  3616  020F  0020               	movlb	0	; select bank0
  3617  0210  1C4B               	btfss	FLASH_ReadByte@state,0
  3618  0211  2A14               	goto	u1690
  3619  0212  178B               	bsf	11,7	;volatile
  3620  0213  2A15               	goto	l2456
  3621  0214                     u1690:	
  3622  0214  138B               	bcf	11,7	;volatile
  3623  0215                     l2456:	
  3624                           
  3625                           ;flash.c: 83: return PMDATL;
  3626  0215  0023               	movlb	3	; select bank3
  3627  0216  0813               	movf	19,w	;volatile
  3628  0217  0008               	return
  3629  0218                     __end_of_FLASH_ReadByte:	
  3630  0218                     __ptext15:	
  3631 ;; *************** function _Led_Initialize *****************
  3632 ;; Defined at:
  3633 ;;		line 57 in file "user/src/led.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;		None
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;		None
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      void 
  3640 ;; Registers used:
  3641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/0
  3644 ;;		On exit  : 1E/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3647 ;;      Params:         0       0       0       0
  3648 ;;      Locals:         0       0       0       0
  3649 ;;      Temps:          0       0       0       0
  3650 ;;      Totals:         0       0       0       0
  3651 ;;Total ram usage:        0 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; Hardware stack levels required when called:    8
  3654 ;; This function calls:
  3655 ;;		_Led_TurnOffRamp
  3656 ;;		_Led_TurnOnAllRamp
  3657 ;;		_Led_TurnOnBlueRamp
  3658 ;;		_Led_TurnOnWhiteRamp
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _Led_Initialize
  3666  0218                     _Led_Initialize:	
  3667                           
  3668                           ;led.c: 58: if (!gLedPara.mOn) {
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _Led_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3672  0218  0021               	movlb	1	; select bank1
  3673  0219  1840               	btfsc	_gLedPara^(0+128),0	;volatile
  3674  021A  2A1C               	goto	l2866
  3675                           
  3676                           ;led.c: 59: Led_TurnOffRamp();
  3677  021B  2AAD               	ljmp	l2682
  3678  021C                     l2866:	
  3679                           ;led.c: 60: } else {
  3680                           
  3681                           
  3682                           ;led.c: 61: gLedRunPara.music_state = 0;
  3683  021C  3001               	movlw	-255
  3684  021D  0020               	movlb	0	; select bank0
  3685  021E  05A8               	andwf	_gLedRunPara+8,f	;volatile
  3686                           
  3687                           ;led.c: 71: break;
  3688                           
  3689                           ;led.c: 62: switch (gLedPara.mMode) {
  3690  021F  0021               	movlb	1	; select bank1
  3691  0220  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  3692  0221  3907               	andlw	7
  3693                           
  3694                           ; Switch size 1, requested type "space"
  3695                           ; Number of cases is 3, Range of values is 0 to 2
  3696                           ; switch strategies available:
  3697                           ; Name         Instructions Cycles
  3698                           ; simple_byte           10     6 (average)
  3699                           ; direct_byte           12     6 (fixed)
  3700                           ; jumptable            260     6 (fixed)
  3701                           ;	Chosen strategy is simple_byte
  3702  0222  1903               	skipnz
  3703  0223  2A2B               	goto	l2868
  3704  0224  3A01               	xorlw	1	; case 1
  3705  0225  1903               	skipnz
  3706  0226  2A2C               	goto	l2870
  3707  0227  3A03               	xorlw	3	; case 2
  3708  0228  1903               	skipnz
  3709  0229  2A2D               	goto	l2872
  3710  022A  2A2E               	goto	l392
  3711  022B                     l2868:	
  3712                           
  3713                           ;led.c: 64: Led_TurnOnAllRamp();
  3714  022B  2AB8               	ljmp	l2696
  3715  022C                     l2870:	
  3716                           ;led.c: 65: break;
  3717                           
  3718                           
  3719                           ;led.c: 67: Led_TurnOnWhiteRamp();
  3720  022C  2ACF               	ljmp	l2710
  3721  022D                     l2872:	
  3722                           ;led.c: 68: break;
  3723                           
  3724                           
  3725                           ;led.c: 70: Led_TurnOnBlueRamp();
  3726  022D  2ACC               	ljmp	l2716
  3727  022E                     l392:	
  3728  022E  0008               	return
  3729  022F                     __end_of_Led_Initialize:	
  3730  022F                     __ptext12:	
  3731 ;; *************** function _Led_SaveParaIfChanged *****************
  3732 ;; Defined at:
  3733 ;;		line 78 in file "user/src/led.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      void 
  3740 ;; Registers used:
  3741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 1E/1
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3747 ;;      Params:         0       0       0       0
  3748 ;;      Locals:         0       0       0       0
  3749 ;;      Temps:          0       1       0       0
  3750 ;;      Totals:         0       1       0       0
  3751 ;;Total ram usage:        1 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    9
  3754 ;; This function calls:
  3755 ;;		_FLASH_WriteBlock
  3756 ;; This function is called by:
  3757 ;;		_main
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           
  3762                           ;psect for function _Led_SaveParaIfChanged
  3763  022F                     _Led_SaveParaIfChanged:	
  3764                           
  3765                           ;led.c: 79: if (gLedRunPara.mParaChanged) {
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _Led_SaveParaIfChanged: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3769  022F  0020               	movlb	0	; select bank0
  3770  0230  1C28               	btfss	_gLedRunPara+8,0	;volatile
  3771  0231  0008               	return
  3772                           
  3773                           ;led.c: 80: gLedRunPara.mParaChanged = 0;
  3774  0232  1028               	bcf	_gLedRunPara+8,0	;volatile
  3775                           
  3776                           ;led.c: 81: _delay((unsigned long)((8)*(16000000/4000.0)));
  3777  0233  302A               	movlw	42
  3778  0234  0020               	movlb	0	; select bank0
  3779  0235  00D4               	movwf	??_Led_SaveParaIfChanged
  3780  0236  308D               	movlw	141
  3781  0237                     u2237:	
  3782  0237  0B89               	decfsz	9,f
  3783  0238  2A37               	goto	u2237
  3784  0239  0BD4               	decfsz	??_Led_SaveParaIfChanged,f
  3785  023A  2A37               	goto	u2237
  3786  023B  3200               	nop2
  3787                           
  3788                           ;led.c: 82: FLASH_WriteBlock(0xFC0, (uint8_t *) & gLedPara);
  3789  023C  30C0               	movlw	192
  3790  023D  0020               	movlb	0	; select bank0
  3791  023E  00CC               	movwf	FLASH_WriteBlock@addr
  3792  023F  300F               	movlw	15
  3793  0240  00CD               	movwf	FLASH_WriteBlock@addr+1
  3794  0241  30C0               	movlw	(low (_gLedPara| 0))& (0+255)
  3795  0242  00CE               	movwf	FLASH_WriteBlock@buf
  3796  0243  2AD4               	ljmp	l2590
  3797  0244                     __end_of_Led_SaveParaIfChanged:	
  3798  0244                     __ptext2:	
  3799 ;; *************** function _SYSTEM_Initialize *****************
  3800 ;; Defined at:
  3801 ;;		line 74 in file "user/src/main.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;		None
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;		None
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  1    wreg      void 
  3808 ;; Registers used:
  3809 ;;		wreg, status,2, status,0, pclath, cstack
  3810 ;; Tracked objects:
  3811 ;;		On entry : B1F/0
  3812 ;;		On exit  : B1F/1
  3813 ;;		Unchanged: B00/0
  3814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3815 ;;      Params:         0       0       0       0
  3816 ;;      Locals:         0       0       0       0
  3817 ;;      Temps:          0       0       0       0
  3818 ;;      Totals:         0       0       0       0
  3819 ;;Total ram usage:        0 bytes
  3820 ;; Hardware stack levels used:    1
  3821 ;; Hardware stack levels required when called:    8
  3822 ;; This function calls:
  3823 ;;		_ADC_Initialize_Default
  3824 ;;		_EUSART_Initialize_Default
  3825 ;;		_OSC_Initialize_Default
  3826 ;;		_PIN_Initialize
  3827 ;;		_PWM1_Initialize
  3828 ;;		_PWM2_Initialize
  3829 ;;		_PWM3_Initialize
  3830 ;;		_PWM4_Initialize
  3831 ;;		_TMR2_Initialize_Default
  3832 ;; This function is called by:
  3833 ;;		_main
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           
  3838                           ;psect for function _SYSTEM_Initialize
  3839  0244                     _SYSTEM_Initialize:	
  3840                           
  3841                           ;main.c: 76: PIN_Initialize();
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3845  0244  225A  3180         	fcall	_PIN_Initialize
  3846                           
  3847                           ;main.c: 77: OSC_Initialize_Default();
  3848  0246  2255  3180         	fcall	_OSC_Initialize_Default
  3849                           
  3850                           ;main.c: 78: TMR2_Initialize_Default();
  3851  0248  2286  3180         	fcall	_TMR2_Initialize_Default
  3852                           
  3853                           ;main.c: 79: PWM1_Initialize();
  3854  024A  2271  3180         	fcall	_PWM1_Initialize
  3855                           
  3856                           ;main.c: 80: PWM2_Initialize();
  3857  024C  2277  3180         	fcall	_PWM2_Initialize
  3858                           
  3859                           ;main.c: 81: PWM3_Initialize();
  3860  024E  227C  3180         	fcall	_PWM3_Initialize
  3861                           
  3862                           ;main.c: 82: PWM4_Initialize();
  3863  0250  2281  3180         	fcall	_PWM4_Initialize
  3864                           
  3865                           ;main.c: 83: EUSART_Initialize_Default();
  3866  0252  2350  3180         	fcall	_EUSART_Initialize_Default
  3867                           
  3868                           ;main.c: 84: ADC_Initialize_Default();
  3869  0254  2B48               	ljmp	l2534
  3870  0255                     __end_of_SYSTEM_Initialize:	
  3871  0255                     __ptext9:	
  3872 ;; *************** function _OSC_Initialize_Default *****************
  3873 ;; Defined at:
  3874 ;;		line 6 in file "driver/src/osc.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg
  3883 ;; Tracked objects:
  3884 ;;		On entry : B1F/1
  3885 ;;		On exit  : B1F/1
  3886 ;;		Unchanged: B00/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3888 ;;      Params:         0       0       0       0
  3889 ;;      Locals:         0       0       0       0
  3890 ;;      Temps:          0       0       0       0
  3891 ;;      Totals:         0       0       0       0
  3892 ;;Total ram usage:        0 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    7
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_SYSTEM_Initialize
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _OSC_Initialize_Default
  3904  0255                     _OSC_Initialize_Default:	
  3905                           
  3906                           ;osc.c: 8: OSCCON = (15<<3) | (2<<0);
  3907                           
  3908                           ;incstack = 0
  3909                           ; Regs used in _OSC_Initialize_Default: [wreg]
  3910  0255  307A               	movlw	122
  3911  0256  0099               	movwf	25	;volatile
  3912  0257                     l279:	
  3913                           ;osc.c: 9: while( OSCSTATbits.HFIOFS == 0 );
  3914                           
  3915  0257  181A               	btfsc	26,0	;volatile
  3916  0258  0008               	return
  3917  0259  2A57               	goto	l279
  3918  025A                     __end_of_OSC_Initialize_Default:	
  3919  025A                     __ptext8:	
  3920 ;; *************** function _PIN_Initialize *****************
  3921 ;; Defined at:
  3922 ;;		line 55 in file "user/src/main.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;		None
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;		None
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg, status,2
  3931 ;; Tracked objects:
  3932 ;;		On entry : B1F/0
  3933 ;;		On exit  : B1F/1
  3934 ;;		Unchanged: B00/0
  3935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3936 ;;      Params:         0       0       0       0
  3937 ;;      Locals:         0       0       0       0
  3938 ;;      Temps:          0       0       0       0
  3939 ;;      Totals:         0       0       0       0
  3940 ;;Total ram usage:        0 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    7
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_SYSTEM_Initialize
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _PIN_Initialize
  3952  025A                     _PIN_Initialize:	
  3953                           
  3954                           ;main.c: 57: LATA = 0x00;
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _PIN_Initialize: [wreg+status,2]
  3958  025A  0022               	movlb	2	; select bank2
  3959  025B  018C               	clrf	12	;volatile
  3960                           
  3961                           ;main.c: 58: LATB = 0x80;
  3962  025C  3080               	movlw	128
  3963  025D  008D               	movwf	13	;volatile
  3964                           
  3965                           ;main.c: 59: LATC = 0x00;
  3966  025E  018E               	clrf	14	;volatile
  3967                           
  3968                           ;main.c: 61: TRISA = 0x30;
  3969  025F  3030               	movlw	48
  3970  0260  0021               	movlb	1	; select bank1
  3971  0261  008C               	movwf	12	;volatile
  3972                           
  3973                           ;main.c: 62: TRISB = 0x60;
  3974  0262  3060               	movlw	96
  3975  0263  008D               	movwf	13	;volatile
  3976                           
  3977                           ;main.c: 63: TRISC = 0x05;
  3978  0264  3005               	movlw	5
  3979  0265  008E               	movwf	14	;volatile
  3980                           
  3981                           ;main.c: 65: ANSELC = 0x05;
  3982  0266  0023               	movlb	3	; select bank3
  3983  0267  008E               	movwf	14	;volatile
  3984                           
  3985                           ;main.c: 66: ANSELB = 0x00;
  3986  0268  018D               	clrf	13	;volatile
  3987                           
  3988                           ;main.c: 67: ANSELA = 0x00;
  3989  0269  018C               	clrf	12	;volatile
  3990                           
  3991                           ;main.c: 69: WPUB = 0x60;
  3992  026A  3060               	movlw	96
  3993  026B  0024               	movlb	4	; select bank4
  3994  026C  008D               	movwf	13	;volatile
  3995                           
  3996                           ;main.c: 70: WPUA = 0x00;
  3997  026D  018C               	clrf	12	;volatile
  3998                           
  3999                           ;main.c: 71: OPTION_REGbits.nWPUEN = 0;
  4000  026E  0021               	movlb	1	; select bank1
  4001  026F  1395               	bcf	21,7	;volatile
  4002  0270  0008               	return
  4003  0271                     __end_of_PIN_Initialize:	
  4004  0271                     __ptext7:	
  4005 ;; *************** function _PWM1_Initialize *****************
  4006 ;; Defined at:
  4007 ;;		line 8 in file "driver/src/pwm.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;		None
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;		None
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      void 
  4014 ;; Registers used:
  4015 ;;		wreg, status,2
  4016 ;; Tracked objects:
  4017 ;;		On entry : B1F/1
  4018 ;;		On exit  : B1F/C
  4019 ;;		Unchanged: B00/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4021 ;;      Params:         0       0       0       0
  4022 ;;      Locals:         0       0       0       0
  4023 ;;      Temps:          0       0       0       0
  4024 ;;      Totals:         0       0       0       0
  4025 ;;Total ram usage:        0 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    7
  4028 ;; This function calls:
  4029 ;;		Nothing
  4030 ;; This function is called by:
  4031 ;;		_SYSTEM_Initialize
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _PWM1_Initialize
  4037  0271                     _PWM1_Initialize:	
  4038                           
  4039                           ;pwm.c: 10: PWM1CON = (1<<7) | (1<<6);
  4040                           
  4041                           ;incstack = 0
  4042                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
  4043  0271  30C0               	movlw	192
  4044  0272  002C               	movlb	12	; select bank12
  4045  0273  0093               	movwf	19	;volatile
  4046                           
  4047                           ;pwm.c: 11: PWM1DC = 0;
  4048  0274  0191               	clrf	17	;volatile
  4049  0275  0192               	clrf	18	;volatile
  4050  0276  0008               	return
  4051  0277                     __end_of_PWM1_Initialize:	
  4052  0277                     __ptext6:	
  4053 ;; *************** function _PWM2_Initialize *****************
  4054 ;; Defined at:
  4055 ;;		line 19 in file "driver/src/pwm.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;		None
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;		None
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg, status,2
  4064 ;; Tracked objects:
  4065 ;;		On entry : B1F/C
  4066 ;;		On exit  : B1F/C
  4067 ;;		Unchanged: B00/0
  4068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4069 ;;      Params:         0       0       0       0
  4070 ;;      Locals:         0       0       0       0
  4071 ;;      Temps:          0       0       0       0
  4072 ;;      Totals:         0       0       0       0
  4073 ;;Total ram usage:        0 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; Hardware stack levels required when called:    7
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_SYSTEM_Initialize
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           
  4084                           ;psect for function _PWM2_Initialize
  4085  0277                     _PWM2_Initialize:	
  4086                           
  4087                           ;pwm.c: 21: PWM2CON = (1<<7) | (1<<6);
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
  4091  0277  30C0               	movlw	192
  4092  0278  0096               	movwf	22	;volatile
  4093                           
  4094                           ;pwm.c: 22: PWM2DC = 0;
  4095  0279  0194               	clrf	20	;volatile
  4096  027A  0195               	clrf	21	;volatile
  4097  027B  0008               	return
  4098  027C                     __end_of_PWM2_Initialize:	
  4099  027C                     __ptext5:	
  4100 ;; *************** function _PWM3_Initialize *****************
  4101 ;; Defined at:
  4102 ;;		line 30 in file "driver/src/pwm.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;		None
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;		None
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		wreg, status,2
  4111 ;; Tracked objects:
  4112 ;;		On entry : B1F/C
  4113 ;;		On exit  : B1F/C
  4114 ;;		Unchanged: B00/0
  4115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4116 ;;      Params:         0       0       0       0
  4117 ;;      Locals:         0       0       0       0
  4118 ;;      Temps:          0       0       0       0
  4119 ;;      Totals:         0       0       0       0
  4120 ;;Total ram usage:        0 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:    7
  4123 ;; This function calls:
  4124 ;;		Nothing
  4125 ;; This function is called by:
  4126 ;;		_SYSTEM_Initialize
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           
  4131                           ;psect for function _PWM3_Initialize
  4132  027C                     _PWM3_Initialize:	
  4133                           
  4134                           ;pwm.c: 32: PWM3CON = (1<<7) | (1<<6);
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in _PWM3_Initialize: [wreg+status,2]
  4138  027C  30C0               	movlw	192
  4139  027D  0099               	movwf	25	;volatile
  4140                           
  4141                           ;pwm.c: 33: PWM3DC = 0;
  4142  027E  0197               	clrf	23	;volatile
  4143  027F  0198               	clrf	24	;volatile
  4144  0280  0008               	return
  4145  0281                     __end_of_PWM3_Initialize:	
  4146  0281                     __ptext4:	
  4147 ;; *************** function _PWM4_Initialize *****************
  4148 ;; Defined at:
  4149 ;;		line 41 in file "driver/src/pwm.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;		None
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2
  4158 ;; Tracked objects:
  4159 ;;		On entry : B1F/C
  4160 ;;		On exit  : B1F/C
  4161 ;;		Unchanged: B00/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4163 ;;      Params:         0       0       0       0
  4164 ;;      Locals:         0       0       0       0
  4165 ;;      Temps:          0       0       0       0
  4166 ;;      Totals:         0       0       0       0
  4167 ;;Total ram usage:        0 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    7
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_SYSTEM_Initialize
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _PWM4_Initialize
  4179  0281                     _PWM4_Initialize:	
  4180                           
  4181                           ;pwm.c: 43: PWM4CON = (1<<7) | (1<<6);
  4182                           
  4183                           ;incstack = 0
  4184                           ; Regs used in _PWM4_Initialize: [wreg+status,2]
  4185  0281  30C0               	movlw	192
  4186  0282  009C               	movwf	28	;volatile
  4187                           
  4188                           ;pwm.c: 44: PWM4DC = 0;
  4189  0283  019A               	clrf	26	;volatile
  4190  0284  019B               	clrf	27	;volatile
  4191  0285  0008               	return
  4192  0286                     __end_of_PWM4_Initialize:	
  4193  0286                     __ptext3:	
  4194 ;; *************** function _TMR2_Initialize_Default *****************
  4195 ;; Defined at:
  4196 ;;		line 8 in file "driver/src/tmr2.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  1    wreg      void 
  4203 ;; Registers used:
  4204 ;;		wreg, status,2
  4205 ;; Tracked objects:
  4206 ;;		On entry : B1F/1
  4207 ;;		On exit  : B1F/1
  4208 ;;		Unchanged: B00/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4210 ;;      Params:         0       0       0       0
  4211 ;;      Locals:         0       0       0       0
  4212 ;;      Temps:          0       0       0       0
  4213 ;;      Totals:         0       0       0       0
  4214 ;;Total ram usage:        0 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    7
  4217 ;; This function calls:
  4218 ;;		Nothing
  4219 ;; This function is called by:
  4220 ;;		_SYSTEM_Initialize
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function _TMR2_Initialize_Default
  4226  0286                     _TMR2_Initialize_Default:	
  4227                           
  4228                           ;tmr2.c: 9: T2CON = (0<<0) | (15<<3);
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _TMR2_Initialize_Default: [wreg+status,2]
  4232  0286  3078               	movlw	120
  4233  0287  0020               	movlb	0	; select bank0
  4234  0288  009C               	movwf	28	;volatile
  4235                           
  4236                           ;tmr2.c: 10: PR2 = 0xF9;
  4237  0289  30F9               	movlw	249
  4238  028A  009B               	movwf	27	;volatile
  4239                           
  4240                           ;tmr2.c: 11: TMR2 = 0x00;
  4241  028B  019A               	clrf	26	;volatile
  4242                           
  4243                           ;tmr2.c: 12: PIR1bits.TMR2IF = 0;
  4244  028C  1091               	bcf	17,1	;volatile
  4245                           
  4246                           ;tmr2.c: 13: PIE1bits.TMR2IE = 1;
  4247  028D  0021               	movlb	1	; select bank1
  4248  028E  1491               	bsf	17,1	;volatile
  4249  028F  0008               	return
  4250  0290                     __end_of_TMR2_Initialize_Default:	
  4251  0290                     __ptext1:	
  4252 ;; *************** function _TMR2_StartTimer *****************
  4253 ;; Defined at:
  4254 ;;		line 16 in file "driver/src/tmr2.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;		None
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;		None
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		None
  4263 ;; Tracked objects:
  4264 ;;		On entry : 1E/0
  4265 ;;		On exit  : 1F/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4268 ;;      Params:         0       0       0       0
  4269 ;;      Locals:         0       0       0       0
  4270 ;;      Temps:          0       0       0       0
  4271 ;;      Totals:         0       0       0       0
  4272 ;;Total ram usage:        0 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    7
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_main
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           
  4283                           ;psect for function _TMR2_StartTimer
  4284  0290                     _TMR2_StartTimer:	
  4285                           
  4286                           ;tmr2.c: 17: T2CONbits.TMR2ON = 1;
  4287                           
  4288                           ;incstack = 0
  4289                           ; Regs used in _TMR2_StartTimer: []
  4290  0290  0020               	movlb	0	; select bank0
  4291  0291  151C               	bsf	28,2	;volatile
  4292  0292  0008               	return
  4293  0293                     __end_of_TMR2_StartTimer:	
  4294  0293                     __ptext32:	
  4295 ;; *************** function ___wmul *****************
  4296 ;; Defined at:
  4297 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  multiplier      2    7[BANK0 ] unsigned int 
  4300 ;;  multiplicand    2    9[BANK0 ] unsigned int 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  product         2   11[BANK0 ] unsigned int 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  2    7[BANK0 ] unsigned int 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 1F/0
  4309 ;;		On exit  : 1F/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4312 ;;      Params:         0       4       0       0
  4313 ;;      Locals:         0       2       0       0
  4314 ;;      Temps:          0       0       0       0
  4315 ;;      Totals:         0       6       0       0
  4316 ;;Total ram usage:        6 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    7
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_Audio_GetValue
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function ___wmul
  4328  0293                     ___wmul:	
  4329                           
  4330                           ;incstack = 0
  4331                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4332  0293  01CD               	clrf	___wmul@product
  4333  0294  01CE               	clrf	___wmul@product+1
  4334  0295                     l2752:	
  4335  0295  1C49               	btfss	___wmul@multiplier,0
  4336  0296  2A9B               	goto	l2756
  4337  0297  084B               	movf	___wmul@multiplicand,w
  4338  0298  07CD               	addwf	___wmul@product,f
  4339  0299  084C               	movf	___wmul@multiplicand+1,w
  4340  029A  3DCE               	addwfc	___wmul@product+1,f
  4341  029B                     l2756:	
  4342  029B  35CB               	lslf	___wmul@multiplicand,f
  4343  029C  0DCC               	rlf	___wmul@multiplicand+1,f
  4344  029D  36CA               	lsrf	___wmul@multiplier+1,f
  4345  029E  0CC9               	rrf	___wmul@multiplier,f
  4346  029F  0849               	movf	___wmul@multiplier,w
  4347  02A0  044A               	iorwf	___wmul@multiplier+1,w
  4348  02A1  1D03               	btfss	3,2
  4349  02A2  2A95               	goto	l2752
  4350  02A3  084E               	movf	___wmul@product+1,w
  4351  02A4  00CA               	movwf	?___wmul+1
  4352  02A5  084D               	movf	___wmul@product,w
  4353  02A6  00C9               	movwf	?___wmul
  4354  02A7  0008               	return
  4355  02A8                     __end_of___wmul:	
  4356  02A8                     __ptext25:	
  4357 ;; *************** function _Key_SetActionHandler *****************
  4358 ;; Defined at:
  4359 ;;		line 68 in file "user/src/key.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  handler         2    7[BANK0 ] PTR FTN(unsigned char ,)
  4362 ;;		 -> Led_OnKeyPressed(1), 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg
  4369 ;; Tracked objects:
  4370 ;;		On entry : 1F/0
  4371 ;;		On exit  : 1F/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4374 ;;      Params:         0       2       0       0
  4375 ;;      Locals:         0       0       0       0
  4376 ;;      Temps:          0       0       0       0
  4377 ;;      Totals:         0       2       0       0
  4378 ;;Total ram usage:        2 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    7
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_Interrupt_Initialize
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _Key_SetActionHandler
  4390  02A8                     _Key_SetActionHandler:	
  4391  02A8                     l2748:	
  4392                           ;incstack = 0
  4393                           ; Regs used in _Key_SetActionHandler: [wreg]
  4394                           
  4395                           
  4396                           ;key.c: 69: key_press_cb = handler;
  4397  02A8  084A               	movf	Key_SetActionHandler@handler+1,w
  4398  02A9  00AE               	movwf	_key_press_cb+1
  4399  02AA  0849               	movf	Key_SetActionHandler@handler,w
  4400  02AB  00AD               	movwf	_key_press_cb
  4401  02AC  0008               	return
  4402  02AD                     __end_of_Key_SetActionHandler:	
  4403  02AD                     __ptext19:	
  4404 ;; *************** function _Led_TurnOffRamp *****************
  4405 ;; Defined at:
  4406 ;;		line 111 in file "user/src/led.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;		None
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  i               1    7[BANK0 ] unsigned char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4415 ;; Tracked objects:
  4416 ;;		On entry : 1F/1
  4417 ;;		On exit  : 1F/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4420 ;;      Params:         0       0       0       0
  4421 ;;      Locals:         0       1       0       0
  4422 ;;      Temps:          0       0       0       0
  4423 ;;      Totals:         0       1       0       0
  4424 ;;Total ram usage:        1 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    7
  4427 ;; This function calls:
  4428 ;;		Nothing
  4429 ;; This function is called by:
  4430 ;;		_Led_Initialize
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           
  4435                           ;psect for function _Led_TurnOffRamp
  4436  02AD                     _Led_TurnOffRamp:	
  4437  02AD                     l2682:	
  4438                           ;incstack = 0
  4439                           ; Regs used in _Led_TurnOffRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  4440                           
  4441                           
  4442                           ;led.c: 112: gLedPara.mOn = 0;
  4443  02AD  1040               	bcf	_gLedPara^(0+128),0	;volatile
  4444                           
  4445                           ;led.c: 113: for (uint8_t i = 0; i < 2; i++) {
  4446  02AE  0020               	movlb	0	; select bank0
  4447  02AF  01C9               	clrf	Led_TurnOffRamp@i
  4448  02B0                     l2690:	
  4449                           
  4450                           ;led.c: 114: gLedRunPara.mTargetBright[i] = 0;
  4451  02B0  3549               	lslf	Led_TurnOffRamp@i,w
  4452  02B1  2682  3180         	fcall	PL24	;call to abstracted procedure
  4453  02B3  0AC9               	incf	Led_TurnOffRamp@i,f
  4454  02B4  0249               	subwf	Led_TurnOffRamp@i,w
  4455  02B5  1803               	btfsc	3,0
  4456  02B6  0008               	return
  4457  02B7  2AB0               	goto	l2690
  4458  02B8                     __end_of_Led_TurnOffRamp:	
  4459  02B8                     __ptext18:	
  4460 ;; *************** function _Led_TurnOnAllRamp *****************
  4461 ;; Defined at:
  4462 ;;		line 92 in file "user/src/led.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;  i               1    7[BANK0 ] unsigned char 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/1
  4473 ;;		On exit  : 1F/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4476 ;;      Params:         0       0       0       0
  4477 ;;      Locals:         0       1       0       0
  4478 ;;      Temps:          0       0       0       0
  4479 ;;      Totals:         0       1       0       0
  4480 ;;Total ram usage:        1 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    7
  4483 ;; This function calls:
  4484 ;;		Nothing
  4485 ;; This function is called by:
  4486 ;;		_Led_Initialize
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           
  4491                           ;psect for function _Led_TurnOnAllRamp
  4492  02B8                     _Led_TurnOnAllRamp:	
  4493  02B8                     l2696:	
  4494                           ;incstack = 0
  4495                           ; Regs used in _Led_TurnOnAllRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  4496                           
  4497                           
  4498                           ;led.c: 93: gLedPara.mOn = 1;
  4499  02B8  0021               	movlb	1	; select bank1
  4500  02B9  1440               	bsf	_gLedPara^(0+128),0	;volatile
  4501                           
  4502                           ;led.c: 94: for (uint8_t i = 0; i < 2; i++) {
  4503  02BA  0020               	movlb	0	; select bank0
  4504  02BB  01C9               	clrf	Led_TurnOnAllRamp@i
  4505  02BC                     l2704:	
  4506                           
  4507                           ;led.c: 95: gLedRunPara.mTargetBright[i] = gLedPara.all_bright;
  4508  02BC  3549               	lslf	Led_TurnOnAllRamp@i,w
  4509  02BD  3E24               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
  4510  02BE  0086               	movwf	6
  4511  02BF  0187               	clrf	7
  4512  02C0  0021               	movlb	1	; select bank1
  4513  02C1  0841               	movf	(_gLedPara^(0+128)+1),w	;volatile
  4514  02C2  3FC0               	movwi [0]fsr1
  4515  02C3  0842               	movf	((_gLedPara+1)^(0+128)+1),w	;volatile
  4516  02C4  3FC1               	movwi [1]fsr1
  4517  02C5  0020               	movlb	0	; select bank0
  4518  02C6  3002               	movlw	2
  4519  02C7  0AC9               	incf	Led_TurnOnAllRamp@i,f
  4520  02C8  0249               	subwf	Led_TurnOnAllRamp@i,w
  4521  02C9  1803               	btfsc	3,0
  4522  02CA  0008               	return
  4523  02CB  2ABC               	goto	l2704
  4524  02CC                     __end_of_Led_TurnOnAllRamp:	
  4525  02CC                     __ptext17:	
  4526 ;; *************** function _Led_TurnOnBlueRamp *****************
  4527 ;; Defined at:
  4528 ;;		line 105 in file "user/src/led.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      void 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/1
  4539 ;;		On exit  : 1F/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4542 ;;      Params:         0       0       0       0
  4543 ;;      Locals:         0       0       0       0
  4544 ;;      Temps:          0       0       0       0
  4545 ;;      Totals:         0       0       0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    7
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_Led_Initialize
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           
  4557                           ;psect for function _Led_TurnOnBlueRamp
  4558  02CC                     _Led_TurnOnBlueRamp:	
  4559  02CC                     l2716:	
  4560                           ;incstack = 0
  4561                           ; Regs used in _Led_TurnOnBlueRamp: [wreg+status,2]
  4562                           
  4563                           
  4564                           ;led.c: 106: gLedPara.mOn = 1;
  4565  02CC  0021               	movlb	1	; select bank1
  4566  02CD  1440               	bsf	_gLedPara^(0+128),0	;volatile
  4567                           
  4568                           ;led.c: 107: gLedRunPara.mTargetBright[0] = gLedPara.blue_bright;
  4569                           
  4570                           ;led.c: 108: gLedRunPara.mTargetBright[1] = 0;
  4571  02CE  2E60               	ljmp	PL16	;call to abstracted procedure
  4572  02CF                     __end_of_Led_TurnOnBlueRamp:	
  4573  02CF                     __ptext16:	
  4574 ;; *************** function _Led_TurnOnWhiteRamp *****************
  4575 ;; Defined at:
  4576 ;;		line 99 in file "user/src/led.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;		None
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;		None
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      void 
  4583 ;; Registers used:
  4584 ;;		wreg, status,2
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/1
  4587 ;;		On exit  : 1F/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4590 ;;      Params:         0       0       0       0
  4591 ;;      Locals:         0       0       0       0
  4592 ;;      Temps:          0       0       0       0
  4593 ;;      Totals:         0       0       0       0
  4594 ;;Total ram usage:        0 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    7
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_Led_Initialize
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           
  4605                           ;psect for function _Led_TurnOnWhiteRamp
  4606  02CF                     _Led_TurnOnWhiteRamp:	
  4607  02CF                     l2710:	
  4608                           ;incstack = 0
  4609                           ; Regs used in _Led_TurnOnWhiteRamp: [wreg+status,2]
  4610                           
  4611                           
  4612                           ;led.c: 100: gLedPara.mOn = 1;
  4613  02CF  0021               	movlb	1	; select bank1
  4614  02D0  1440               	bsf	_gLedPara^(0+128),0	;volatile
  4615                           
  4616                           ;led.c: 101: gLedRunPara.mTargetBright[0] = 0;
  4617  02D1  0020               	movlb	0	; select bank0
  4618  02D2  01A4               	clrf	_gLedRunPara+4	;volatile
  4619                           
  4620                           ;led.c: 102: gLedRunPara.mTargetBright[1] = gLedPara.white_bright;
  4621  02D3  2E6A               	ljmp	PL18	;call to abstracted procedure
  4622  02D4                     __end_of_Led_TurnOnWhiteRamp:	
  4623  02D4                     __ptext13:	
  4624 ;; *************** function _FLASH_WriteBlock *****************
  4625 ;; Defined at:
  4626 ;;		line 35 in file "driver/src/flash.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  addr            2   10[BANK0 ] unsigned int 
  4629 ;;  buf             1   12[BANK0 ] PTR unsigned char 
  4630 ;;		 -> gLedPara(32), 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  start_addr      2   15[BANK0 ] unsigned int 
  4633 ;;  i               1   17[BANK0 ] unsigned char 
  4634 ;;  state           1   14[BANK0 ] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      unsigned char 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 1F/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4644 ;;      Params:         0       3       0       0
  4645 ;;      Locals:         0       4       0       0
  4646 ;;      Temps:          0       1       0       0
  4647 ;;      Totals:         0       8       0       0
  4648 ;;Total ram usage:        8 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    8
  4651 ;; This function calls:
  4652 ;;		_FLASH_EraseBlock
  4653 ;; This function is called by:
  4654 ;;		_Led_SaveParaIfChanged
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           
  4659                           ;psect for function _FLASH_WriteBlock
  4660  02D4                     _FLASH_WriteBlock:	
  4661  02D4                     l2590:	
  4662                           ;incstack = 0
  4663                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4664                           
  4665                           
  4666                           ;flash.c: 36: uint16_t start_addr = (uint16_t) (addr & ((4096 - 1) ^ (32 - 1)));
  4667  02D4  30FF               	movlw	255
  4668  02D5  00D1               	movwf	FLASH_WriteBlock@start_addr
  4669  02D6  300F               	movlw	15
  4670  02D7  00D2               	movwf	FLASH_WriteBlock@start_addr+1
  4671  02D8  301F               	movlw	31
  4672  02D9  06D1               	xorwf	FLASH_WriteBlock@start_addr,f
  4673  02DA  084C               	movf	FLASH_WriteBlock@addr,w
  4674  02DB  05D1               	andwf	FLASH_WriteBlock@start_addr,f
  4675  02DC  084D               	movf	FLASH_WriteBlock@addr+1,w
  4676  02DD  05D2               	andwf	FLASH_WriteBlock@start_addr+1,f
  4677                           
  4678                           ;flash.c: 37: uint8_t i;
  4679                           ;flash.c: 39: if (addr != start_addr) {
  4680  02DE  0652               	xorwf	FLASH_WriteBlock@start_addr+1,w
  4681  02DF  1D03               	skipz
  4682  02E0  2AE3               	goto	u1855
  4683  02E1  0851               	movf	FLASH_WriteBlock@start_addr,w
  4684  02E2  064C               	xorwf	FLASH_WriteBlock@addr,w
  4685  02E3                     u1855:	
  4686  02E3  1D03               	btfss	3,2
  4687  02E4  0008               	return
  4688                           
  4689                           ;flash.c: 41: }
  4690                           ;flash.c: 43: FLASH_EraseBlock(addr);
  4691  02E5  084D               	movf	FLASH_WriteBlock@addr+1,w
  4692  02E6  00CA               	movwf	FLASH_EraseBlock@addr+1
  4693  02E7  084C               	movf	FLASH_WriteBlock@addr,w
  4694  02E8  00C9               	movwf	FLASH_EraseBlock@addr
  4695  02E9  2329  3180         	fcall	_FLASH_EraseBlock
  4696                           
  4697                           ;flash.c: 44: uint8_t state = GIE;
  4698  02EB  3000               	movlw	0
  4699  02EC  1B8B               	btfsc	11,7	;volatile
  4700  02ED  3001               	movlw	1
  4701  02EE  0020               	movlb	0	; select bank0
  4702  02EF  00D0               	movwf	FLASH_WriteBlock@state
  4703                           
  4704                           ;flash.c: 45: GIE = 0;
  4705  02F0  138B               	bcf	11,7	;volatile
  4706                           
  4707                           ;flash.c: 46: CFGS = 0;
  4708  02F1  0023               	movlb	3	; select bank3
  4709  02F2  1315               	bcf	21,6	;volatile
  4710                           
  4711                           ;flash.c: 47: WREN = 1;
  4712  02F3  1515               	bsf	21,2	;volatile
  4713                           
  4714                           ;flash.c: 48: LWLO = 1;
  4715  02F4  1695               	bsf	21,5	;volatile
  4716                           
  4717                           ;flash.c: 50: for (i = 0; i < 32; i++) {
  4718  02F5  0020               	movlb	0	; select bank0
  4719  02F6  01D3               	clrf	FLASH_WriteBlock@i
  4720  02F7                     l2612:	
  4721                           
  4722                           ;flash.c: 51: PMADR = addr;
  4723  02F7  084D               	movf	FLASH_WriteBlock@addr+1,w
  4724  02F8  0023               	movlb	3	; select bank3
  4725  02F9  0092               	movwf	18	;volatile
  4726  02FA  0020               	movlb	0	; select bank0
  4727  02FB  084C               	movf	FLASH_WriteBlock@addr,w
  4728  02FC  0023               	movlb	3	; select bank3
  4729  02FD  0091               	movwf	17	;volatile
  4730                           
  4731                           ;flash.c: 52: PMDAT = *(buf+i);
  4732  02FE  0020               	movlb	0	; select bank0
  4733  02FF  0853               	movf	FLASH_WriteBlock@i,w
  4734  0300  074E               	addwf	FLASH_WriteBlock@buf,w
  4735  0301  00CF               	movwf	??_FLASH_WriteBlock
  4736  0302  0086               	movwf	6
  4737  0303  0187               	clrf	7
  4738  0304  0801               	movf	1,w
  4739  0305  0023               	movlb	3	; select bank3
  4740  0306  0093               	movwf	19	;volatile
  4741  0307  0194               	clrf	20	;volatile
  4742                           
  4743                           ;flash.c: 54: if (i == (32 - 1)) {
  4744  0308  301F               	movlw	31
  4745  0309  0020               	movlb	0	; select bank0
  4746  030A  0653               	xorwf	FLASH_WriteBlock@i,w
  4747  030B  1D03               	btfss	3,2
  4748  030C  2B0F               	goto	l2620
  4749                           
  4750                           ;flash.c: 55: LWLO = 0;
  4751  030D  0023               	movlb	3	; select bank3
  4752  030E  1295               	bcf	21,5	;volatile
  4753  030F                     l2620:	
  4754                           
  4755                           ;flash.c: 56: }
  4756                           ;flash.c: 58: PMCON2 = 0x55;
  4757  030F  3055               	movlw	85
  4758  0310  0023               	movlb	3	; select bank3
  4759  0311  0096               	movwf	22	;volsfr
  4760                           
  4761                           ;flash.c: 59: PMCON2 = 0xAA;
  4762  0312  30AA               	movlw	170
  4763  0313  0096               	movwf	22	;volsfr
  4764                           
  4765                           ;flash.c: 60: WR = 1;
  4766  0314  1495               	bsf	21,1	;volatile
  4767                           
  4768                           ;flash.c: 61: __nop();
  4769  0315  0000               	nop
  4770                           
  4771                           ;flash.c: 62: __nop();
  4772  0316  0000               	nop
  4773                           
  4774                           ;flash.c: 64: addr++;
  4775  0317  0020               	movlb	0	; select bank0
  4776  0318  0ACC               	incf	FLASH_WriteBlock@addr,f
  4777  0319  1903               	skipnz
  4778  031A  0ACD               	incf	FLASH_WriteBlock@addr+1,f
  4779  031B  3020               	movlw	32
  4780  031C  0AD3               	incf	FLASH_WriteBlock@i,f
  4781  031D  0253               	subwf	FLASH_WriteBlock@i,w
  4782  031E  1C03               	skipc
  4783  031F  2AF7               	goto	l2612
  4784                           
  4785                           ;flash.c: 65: }
  4786                           ;flash.c: 67: WREN = 0;
  4787  0320  0023               	movlb	3	; select bank3
  4788  0321  1115               	bcf	21,2	;volatile
  4789                           
  4790                           ;flash.c: 68: GIE = state;
  4791  0322  0020               	movlb	0	; select bank0
  4792  0323  1C50               	btfss	FLASH_WriteBlock@state,0
  4793  0324  2B27               	goto	u1880
  4794  0325  178B               	bsf	11,7	;volatile
  4795  0326  0008               	return
  4796  0327                     u1880:	
  4797  0327  138B               	bcf	11,7	;volatile
  4798                           
  4799                           ;flash.c: 70: return 1;
  4800                           ;	Return value of _FLASH_WriteBlock is never used
  4801  0328  0008               	return
  4802  0329                     __end_of_FLASH_WriteBlock:	
  4803  0329                     __ptext14:	
  4804 ;; *************** function _FLASH_EraseBlock *****************
  4805 ;; Defined at:
  4806 ;;		line 3 in file "driver/src/flash.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  addr            2    7[BANK0 ] unsigned int 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  state           1    9[BANK0 ] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      void 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2
  4815 ;; Tracked objects:
  4816 ;;		On entry : 1F/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4820 ;;      Params:         0       2       0       0
  4821 ;;      Locals:         0       1       0       0
  4822 ;;      Temps:          0       0       0       0
  4823 ;;      Totals:         0       3       0       0
  4824 ;;Total ram usage:        3 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    7
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_FLASH_WriteBlock
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           
  4835                           ;psect for function _FLASH_EraseBlock
  4836  0329                     _FLASH_EraseBlock:	
  4837                           
  4838                           ;flash.c: 4: uint8_t state = GIE;
  4839                           
  4840                           ;incstack = 0
  4841                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2]
  4842  0329  3000               	movlw	0
  4843  032A  1B8B               	btfsc	11,7	;volatile
  4844  032B  3001               	movlw	1
  4845  032C  00CB               	movwf	FLASH_EraseBlock@state
  4846                           
  4847                           ;flash.c: 5: GIE = 0;
  4848  032D  138B               	bcf	11,7	;volatile
  4849                           
  4850                           ;flash.c: 6: PMADR = addr;
  4851  032E  084A               	movf	FLASH_EraseBlock@addr+1,w
  4852  032F  0023               	movlb	3	; select bank3
  4853  0330  0092               	movwf	18	;volatile
  4854  0331  0020               	movlb	0	; select bank0
  4855  0332  0849               	movf	FLASH_EraseBlock@addr,w
  4856  0333  0023               	movlb	3	; select bank3
  4857  0334  0091               	movwf	17	;volatile
  4858                           
  4859                           ;flash.c: 8: CFGS = 0;
  4860  0335  1315               	bcf	21,6	;volatile
  4861                           
  4862                           ;flash.c: 9: FREE = 1;
  4863  0336  1615               	bsf	21,4	;volatile
  4864                           
  4865                           ;flash.c: 10: WREN = 1;
  4866  0337  1515               	bsf	21,2	;volatile
  4867                           
  4868                           ;flash.c: 12: PMCON2 = 0x55;
  4869  0338  3055               	movlw	85
  4870  0339  0096               	movwf	22	;volsfr
  4871                           
  4872                           ;flash.c: 13: PMCON2 = 0xAA;
  4873  033A  30AA               	movlw	170
  4874  033B  0096               	movwf	22	;volsfr
  4875                           
  4876                           ;flash.c: 14: WR = 1;
  4877  033C  1495               	bsf	21,1	;volatile
  4878                           
  4879                           ;flash.c: 15: __nop();
  4880  033D  0000               	nop
  4881                           
  4882                           ;flash.c: 16: __nop();
  4883  033E  0000               	nop
  4884                           
  4885                           ;flash.c: 18: WREN = 0;
  4886  033F  0023               	movlb	3	; select bank3
  4887  0340  1115               	bcf	21,2	;volatile
  4888                           
  4889                           ;flash.c: 19: GIE = state;
  4890  0341  0020               	movlb	0	; select bank0
  4891  0342  1C4B               	btfss	FLASH_EraseBlock@state,0
  4892  0343  2B46               	goto	u1670
  4893  0344  178B               	bsf	11,7	;volatile
  4894  0345  0008               	return
  4895  0346                     u1670:	
  4896  0346  138B               	bcf	11,7	;volatile
  4897  0347  0008               	return
  4898  0348                     __end_of_FLASH_EraseBlock:	
  4899  0348                     __ptext11:	
  4900 ;; *************** function _ADC_Initialize_Default *****************
  4901 ;; Defined at:
  4902 ;;		line 14 in file "driver/src/adc.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;		None
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2
  4911 ;; Tracked objects:
  4912 ;;		On entry : B1F/0
  4913 ;;		On exit  : B1F/1
  4914 ;;		Unchanged: B00/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4916 ;;      Params:         0       0       0       0
  4917 ;;      Locals:         0       0       0       0
  4918 ;;      Temps:          0       0       0       0
  4919 ;;      Totals:         0       0       0       0
  4920 ;;Total ram usage:        0 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    7
  4923 ;; This function calls:
  4924 ;;		Nothing
  4925 ;; This function is called by:
  4926 ;;		_SYSTEM_Initialize
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           
  4931                           ;psect for function _ADC_Initialize_Default
  4932  0348                     _ADC_Initialize_Default:	
  4933  0348                     l2534:	
  4934                           ;incstack = 0
  4935                           ; Regs used in _ADC_Initialize_Default: [wreg+status,2]
  4936                           
  4937                           
  4938                           ;adc.c: 16: ADCON0 = 0x00;
  4939  0348  0021               	movlb	1	; select bank1
  4940  0349  019D               	clrf	29	;volatile
  4941                           
  4942                           ;adc.c: 17: ADCON1 = (1<<7) | (5<<4);
  4943  034A  30D0               	movlw	208
  4944  034B  009E               	movwf	30	;volatile
  4945                           
  4946                           ;adc.c: 18: ADCON2 = (0<<4);
  4947  034C  019F               	clrf	31	;volatile
  4948                           
  4949                           ;adc.c: 19: ADRES = 0x00;
  4950  034D  019B               	clrf	27	;volatile
  4951  034E  019C               	clrf	28	;volatile
  4952  034F  0008               	return
  4953  0350                     __end_of_ADC_Initialize_Default:	
  4954  0350                     __ptext10:	
  4955 ;; *************** function _EUSART_Initialize_Default *****************
  4956 ;; Defined at:
  4957 ;;		line 20 in file "driver/src/eusart.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;		None
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;		None
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, status,2
  4966 ;; Tracked objects:
  4967 ;;		On entry : B1F/C
  4968 ;;		On exit  : B1F/0
  4969 ;;		Unchanged: B00/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4971 ;;      Params:         0       0       0       0
  4972 ;;      Locals:         0       0       0       0
  4973 ;;      Temps:          0       0       0       0
  4974 ;;      Totals:         0       0       0       0
  4975 ;;Total ram usage:        0 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    7
  4978 ;; This function calls:
  4979 ;;		Nothing
  4980 ;; This function is called by:
  4981 ;;		_SYSTEM_Initialize
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _EUSART_Initialize_Default
  4987  0350                     _EUSART_Initialize_Default:	
  4988                           
  4989                           ;eusart.c: 22: PIE1bits.RCIE = 0;
  4990                           
  4991                           ;incstack = 0
  4992                           ; Regs used in _EUSART_Initialize_Default: [wreg+status,2]
  4993  0350  0021               	movlb	1	; select bank1
  4994  0351  1291               	bcf	17,5	;volatile
  4995                           
  4996                           ;eusart.c: 23: PIE1bits.TXIE = 0;
  4997  0352  1211               	bcf	17,4	;volatile
  4998                           
  4999                           ;eusart.c: 24: BAUDCON = (1<<3);
  5000  0353  3008               	movlw	8
  5001  0354  0023               	movlb	3	; select bank3
  5002  0355  009F               	movwf	31	;volatile
  5003                           
  5004                           ;eusart.c: 25: RCSTA = (1<<7) | (1<<4);
  5005  0356  3090               	movlw	144
  5006  0357  009D               	movwf	29	;volatile
  5007                           
  5008                           ;eusart.c: 26: TXSTA = (1<<5) | (1<<2);
  5009  0358  3024               	movlw	36
  5010  0359  009E               	movwf	30	;volatile
  5011                           
  5012                           ;eusart.c: 27: SPBRG = 416;
  5013  035A  3001               	movlw	1
  5014  035B  009C               	movwf	28	;volatile
  5015  035C  30A0               	movlw	160
  5016  035D  009B               	movwf	27	;volatile
  5017                           
  5018                           ;eusart.c: 30: txTail = 0;
  5019  035E  0020               	movlb	0	; select bank0
  5020  035F  3020               	movlw	32
  5021  0360  01C1               	clrf	_txTail
  5022  0361  01BF               	clrf	_txHead
  5023                           
  5024                           ;eusart.c: 32: txRemain = sizeof (txBuf );
  5025  0362  00C0               	movwf	_txRemain
  5026  0363  0008               	return
  5027  0364                     __end_of_EUSART_Initialize_Default:	
  5028  0364                     PL38:	
  5029  0364  3907               	andlw	7
  5030  0365  0020               	movlb	0	; select bank0
  5031  0366  00D2               	movwf	??_Led_InitPara
  5032  0367  3005               	movlw	5
  5033  0368  0252               	subwf	??_Led_InitPara,w
  5034  0369  0008               	return
  5035  036A                     __end_ofPL38:	
  5036  036A                     PL40:	
  5037  036A  0854               	movf	Audio_GetValue@value+1,w
  5038  036B  00B4               	movwf	Audio_GetValue@max+1
  5039  036C  0853               	movf	Audio_GetValue@value,w
  5040  036D  00B3               	movwf	Audio_GetValue@max
  5041  036E  0008               	return
  5042  036F                     __end_ofPL40:	
  5043  036F                     __ptext37:	
  5044 ;; *************** function _Led_RunMusic *****************
  5045 ;; Defined at:
  5046 ;;		line 245 in file "user/src/led.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;		None
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      void 
  5053 ;; Registers used:
  5054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 1F/1
  5057 ;;		On exit  : 12/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5060 ;;      Params:         0       0       0       0
  5061 ;;      Locals:         0       0       0       0
  5062 ;;      Temps:          1       0       0       0
  5063 ;;      Totals:         1       0       0       0
  5064 ;;Total ram usage:        1 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    2
  5067 ;; This function calls:
  5068 ;;		_Audio_SelectSound
  5069 ;;		_Led_DynamicCloud
  5070 ;;		_Led_DynamicStorm
  5071 ;;		_Led_Ramp
  5072 ;; This function is called by:
  5073 ;;		_Led_Run
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function _Led_RunMusic
  5079  036F                     _Led_RunMusic:	
  5080  036F                     i1l2460:	
  5081                           ;incstack = 0
  5082                           ; Regs used in _Led_RunMusic: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5083                           
  5084                           
  5085                           ;led.c: 246: if (gLedRunPara.music_state < 32) {
  5086  036F  0020               	movlb	0	; select bank0
  5087  0370  0C28               	rrf	_gLedRunPara+8,w	;volatile
  5088  0371  397F               	andlw	127
  5089  0372  00FC               	movwf	??_Led_RunMusic
  5090  0373  3020               	movlw	32
  5091  0374  027C               	subwf	??_Led_RunMusic,w
  5092  0375  1803               	skipnc
  5093  0376  2B8F               	goto	i1l2464
  5094  0377                     i1l2462:	
  5095                           
  5096                           ;led.c: 247: gLedRunPara.music_state++;
  5097  0377  0020               	movlb	0	; select bank0
  5098  0378  0C28               	rrf	_gLedRunPara+8,w	;volatile
  5099  0379  397F               	andlw	127
  5100  037A  00FC               	movwf	??_Led_RunMusic
  5101  037B  0AFC               	incf	??_Led_RunMusic,f
  5102  037C  0DFC               	rlf	??_Led_RunMusic,f
  5103  037D  0828               	movf	_gLedRunPara+8,w	;volatile
  5104  037E  067C               	xorwf	??_Led_RunMusic,w
  5105  037F  3901               	andlw	-255
  5106  0380  067C               	xorwf	??_Led_RunMusic,w
  5107  0381  00A8               	movwf	_gLedRunPara+8	;volatile
  5108  0382                     i1l2478:	
  5109                           ;led.c: 263: break;
  5110                           
  5111                           ;led.c: 248: } else if (gLedRunPara.music_state == 32 ) {
  5112                           
  5113  0382  0021               	movlb	1	; select bank1
  5114  0383  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5115  0384  3907               	andlw	7
  5116                           
  5117                           ; Switch size 1, requested type "space"
  5118                           ; Number of cases is 5, Range of values is 0 to 4
  5119                           ; switch strategies available:
  5120                           ; Name         Instructions Cycles
  5121                           ; direct_byte           16     6 (fixed)
  5122                           ; simple_byte           16     9 (average)
  5123                           ; jumptable            260     6 (fixed)
  5124                           ;	Chosen strategy is direct_byte
  5125  0385  0084               	movwf	4
  5126  0386  3005               	movlw	5
  5127  0387  0204               	subwf	4,w
  5128  0388  1803               	skipnc
  5129  0389  0008               	return
  5130  038A  3188               	movlp	high i1S2944
  5131  038B  3504               	lslf	4,w
  5132  038C  3E07               	addlw	low i1S2944
  5133  038D  0082               	movwf	2
  5134  038E  0008               	return
  5135  038F                     i1l2464:	
  5136  038F  0C28               	rrf	_gLedRunPara+8,w	;volatile
  5137  0390  397F               	andlw	127
  5138  0391  3A20               	xorlw	32
  5139  0392  1D03               	skipz
  5140  0393  2B82               	goto	i1l2478
  5141                           
  5142                           ;led.c: 249: Audio_SelectSound(gLedPara.mMode + 0x31);
  5143  0394  0021               	movlb	1	; select bank1
  5144  0395  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5145  0396  3907               	andlw	7
  5146  0397  3E31               	addlw	49
  5147  0398  24E4  3180         	fcall	_Audio_SelectSound
  5148  039A  2B77               	goto	i1l2462
  5149  039B                     i1l2470:	
  5150                           
  5151                           ;led.c: 254: case 1:
  5152                           ;led.c: 255: case 2:
  5153                           ;led.c: 256: Led_Ramp();
  5154  039B  3187  2F76         	ljmp	i1l2258
  5155  039D                     i1l2472:	
  5156                           ;led.c: 257: break;
  5157                           
  5158                           
  5159                           ;led.c: 259: Led_DynamicCloud(audio_value);
  5160  039D  0020               	movlb	0	; select bank0
  5161  039E  0836               	movf	_audio_value+1,w	;volatile
  5162  039F  00F7               	movwf	Led_DynamicCloud@ptp+1
  5163  03A0  0835               	movf	_audio_value,w	;volatile
  5164  03A1  00F6               	movwf	Led_DynamicCloud@ptp
  5165  03A2  2D4F               	ljmp	i1l2280
  5166  03A3                     i1l2474:	
  5167                           ;led.c: 260: break;
  5168                           
  5169                           
  5170                           ;led.c: 262: Led_DynamicStorm(audio_value);
  5171  03A3  0020               	movlb	0	; select bank0
  5172  03A4  0836               	movf	_audio_value+1,w	;volatile
  5173  03A5  00F7               	movwf	Led_DynamicStorm@ptp+1
  5174  03A6  0835               	movf	_audio_value,w	;volatile
  5175  03A7  00F6               	movwf	Led_DynamicStorm@ptp
  5176  03A8  2DA5               	ljmp	i1l2308
  5177  03A9                     __end_of_Led_RunMusic:	
  5178  03A9                     __ptext46:	
  5179 ;; *************** function _Led_OnKeyPressed *****************
  5180 ;; Defined at:
  5181 ;;		line 118 in file "user/src/led.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  key             1    9[COMMON] unsigned char 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;		None
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  1    wreg      void 
  5188 ;; Registers used:
  5189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 1F/0
  5192 ;;		On exit  : 1E/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5195 ;;      Params:         1       0       0       0
  5196 ;;      Locals:         2       0       0       0
  5197 ;;      Temps:          1       0       0       0
  5198 ;;      Totals:         4       0       0       0
  5199 ;;Total ram usage:        4 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    2
  5202 ;; This function calls:
  5203 ;;		_Util_DecValue
  5204 ;;		_Util_IncValue
  5205 ;;		i1_Audio_SetVolume
  5206 ;;		i1_Audio_StopSound
  5207 ;;		i1_Led_Initialize
  5208 ;;		i1_Led_TurnOnAllRamp
  5209 ;;		i1_Led_TurnOnBlueRamp
  5210 ;;		i1_Led_TurnOnWhiteRamp
  5211 ;; This function is called by:
  5212 ;;		_Interrupt_Initialize
  5213 ;;		_Key_Scan
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _Led_OnKeyPressed
  5219  03A9                     _Led_OnKeyPressed:	
  5220                           
  5221                           ;led.c: 119: switch (key) {
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _Led_OnKeyPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5225  03A9  2C5E               	goto	i1l2256
  5226  03AA                     i1l421:	
  5227                           ;led.c: 120: case 0x08:
  5228                           
  5229                           
  5230                           ;led.c: 121: if (gLedPara.mOn) {
  5231  03AA  0021               	movlb	1	; select bank1
  5232  03AB  1C40               	btfss	_gLedPara^(0+128),0	;volatile
  5233  03AC  0008               	return
  5234                           
  5235                           ;led.c: 123: gLedPara.mMode++;
  5236  03AD  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5237  03AE  3907               	andlw	7
  5238  03AF  00FA               	movwf	??_Led_OnKeyPressed
  5239  03B0  0AFA               	incf	??_Led_OnKeyPressed,f
  5240  03B1  0DFA               	rlf	??_Led_OnKeyPressed,f
  5241  03B2  0840               	movf	_gLedPara^(0+128),w	;volatile
  5242  03B3  067A               	xorwf	??_Led_OnKeyPressed,w
  5243  03B4  39F1               	andlw	-15
  5244  03B5  067A               	xorwf	??_Led_OnKeyPressed,w
  5245  03B6  00C0               	movwf	_gLedPara^(0+128)	;volatile
  5246                           
  5247                           ;led.c: 124: if (gLedPara.mMode >= 5) {
  5248  03B7  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5249  03B8  3907               	andlw	7
  5250  03B9  00FA               	movwf	??_Led_OnKeyPressed
  5251  03BA  3005               	movlw	5
  5252  03BB  027A               	subwf	??_Led_OnKeyPressed,w
  5253  03BC  1C03               	skipc
  5254  03BD  2BC0               	goto	i1l2176
  5255                           
  5256                           ;led.c: 125: gLedPara.mMode = 0;
  5257  03BE  30F1               	movlw	-15
  5258  03BF  05C0               	andwf	_gLedPara^(0+128),f	;volatile
  5259  03C0                     i1l2176:	
  5260                           
  5261                           ;led.c: 126: }
  5262                           ;led.c: 127: Led_Initialize();
  5263  03C0  252E  3180         	fcall	i1_Led_Initialize
  5264  03C2  2BD3               	goto	i1l2178
  5265  03C3                     i1l2182:	
  5266                           
  5267                           ;led.c: 134: Util_IncValue((uint16_t *) & gLedPara.all_bright, 1000, 200);
  5268  03C3  2674  3180         	fcall	PL20	;call to abstracted procedure
  5269  03C5  30C1               	movlw	(low ((_gLedPara| 0+1)))& (0+255)
  5270  03C6  01F3               	clrf	Util_IncValue@delta+1
  5271  03C7  2497  3180         	fcall	_Util_IncValue
  5272                           
  5273                           ;led.c: 135: Led_TurnOnAllRamp();
  5274  03C9  251B  3180         	fcall	i1_Led_TurnOnAllRamp
  5275  03CB  2BD3               	goto	i1l2178
  5276  03CC                     i1l2188:	
  5277                           
  5278                           ;led.c: 138: Util_IncValue((uint16_t *) & gLedPara.white_bright, 1000, 200);
  5279  03CC  2674  3180         	fcall	PL20	;call to abstracted procedure
  5280  03CE  30C3               	movlw	(low ((_gLedPara| 0+3)))& (0+255)
  5281  03CF  01F3               	clrf	Util_IncValue@delta+1
  5282  03D0  2497  3180         	fcall	_Util_IncValue
  5283  03D2                     i1l2190:	
  5284                           
  5285                           ;led.c: 139: Led_TurnOnWhiteRamp();
  5286  03D2  254A               	fcall	i1_Led_TurnOnWhiteRamp
  5287  03D3                     i1l2178:	
  5288                           
  5289                           ;led.c: 128: gLedRunPara.mParaChanged = 1;
  5290  03D3  0020               	movlb	0	; select bank0
  5291  03D4  1428               	bsf	_gLedRunPara+8,0	;volatile
  5292                           
  5293                           ;led.c: 129: }
  5294                           ;led.c: 130: break;
  5295  03D5  0008               	return
  5296  03D6                     i1l425:	
  5297                           ;led.c: 131: case 0x04:
  5298                           
  5299                           
  5300                           ;led.c: 132: if (gLedPara.mOn) {
  5301  03D6  0021               	movlb	1	; select bank1
  5302  03D7  1C40               	btfss	_gLedPara^(0+128),0	;volatile
  5303  03D8  0008               	return
  5304                           
  5305                           ;led.c: 133: if (gLedPara.mMode == 0) {
  5306  03D9  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5307  03DA  3907               	andlw	7
  5308  03DB  1903               	btfsc	3,2
  5309  03DC  2BC3               	goto	i1l2182
  5310  03DD  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5311  03DE  3907               	andlw	7
  5312  03DF  3A01               	xorlw	1
  5313  03E0  1903               	btfsc	3,2
  5314  03E1  2BCC               	goto	i1l2188
  5315  03E2  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5316  03E3  3907               	andlw	7
  5317  03E4  3A02               	xorlw	2
  5318  03E5  1D03               	skipz
  5319  03E6  0008               	return
  5320                           
  5321                           ;led.c: 142: Util_IncValue((uint16_t *) & gLedPara.blue_bright, 1000, 200);
  5322  03E7  2674  3180         	fcall	PL20	;call to abstracted procedure
  5323  03E9  30C5               	movlw	(low ((_gLedPara| 0+5)))& (0+255)
  5324  03EA  01F3               	clrf	Util_IncValue@delta+1
  5325  03EB  2497  3180         	fcall	_Util_IncValue
  5326  03ED                     i1l2198:	
  5327                           
  5328                           ;led.c: 143: Led_TurnOnBlueRamp();
  5329  03ED  252B  3180         	fcall	i1_Led_TurnOnBlueRamp
  5330  03EF  2BD3               	goto	i1l2178
  5331  03F0                     i1l432:	
  5332                           ;led.c: 148: case 0x02:
  5333                           
  5334                           
  5335                           ;led.c: 149: if (gLedPara.mOn) {
  5336  03F0  0021               	movlb	1	; select bank1
  5337  03F1  1C40               	btfss	_gLedPara^(0+128),0	;volatile
  5338  03F2  0008               	return
  5339                           
  5340                           ;led.c: 150: if (gLedPara.mMode == 0) {
  5341  03F3  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5342  03F4  3907               	andlw	7
  5343  03F5  1D03               	skipz
  5344  03F6  2C00               	goto	i1l2208
  5345                           
  5346                           ;led.c: 151: Util_DecValue((uint16_t *) & gLedPara.all_bright, 10, 200);
  5347  03F7  26A1  3180         	fcall	PL34	;call to abstracted procedure
  5348  03F9  30C1               	movlw	(low ((_gLedPara| 0+1)))& (0+255)
  5349  03FA  01F3               	clrf	Util_DecValue@delta+1
  5350  03FB  2473  3180         	fcall	_Util_DecValue
  5351                           
  5352                           ;led.c: 152: Led_TurnOnAllRamp();
  5353  03FD  251B  3180         	fcall	i1_Led_TurnOnAllRamp
  5354  03FF  2BD3               	goto	i1l2178
  5355  0400                     i1l2208:	
  5356  0400  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5357  0401  3907               	andlw	7
  5358  0402  3A01               	xorlw	1
  5359  0403  1D03               	skipz
  5360  0404  2C0C               	goto	i1l2216
  5361                           
  5362                           ;led.c: 155: Util_DecValue((uint16_t *) & gLedPara.white_bright, 10, 200);
  5363  0405  26A1  3180         	fcall	PL34	;call to abstracted procedure
  5364  0407  30C3               	movlw	(low ((_gLedPara| 0+3)))& (0+255)
  5365  0408  01F3               	clrf	Util_DecValue@delta+1
  5366  0409  2473  3180         	fcall	_Util_DecValue
  5367  040B  2BD2               	goto	i1l2190
  5368  040C                     i1l2216:	
  5369  040C  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  5370  040D  3907               	andlw	7
  5371  040E  3A02               	xorlw	2
  5372  040F  1D03               	skipz
  5373  0410  0008               	return
  5374                           
  5375                           ;led.c: 159: Util_DecValue((uint16_t *) & gLedPara.blue_bright, 10, 200);
  5376  0411  26A1  3180         	fcall	PL34	;call to abstracted procedure
  5377  0413  30C5               	movlw	(low ((_gLedPara| 0+5)))& (0+255)
  5378  0414  01F3               	clrf	Util_DecValue@delta+1
  5379  0415  2473  3180         	fcall	_Util_DecValue
  5380  0417  2BED               	goto	i1l2198
  5381  0418                     i1l439:	
  5382                           ;led.c: 165: case 0x01:
  5383                           
  5384                           
  5385                           ;led.c: 166: if (gLedPara.mOn && gLedPara.mVolOn) {
  5386  0418  0021               	movlb	1	; select bank1
  5387  0419  1840               	btfsc	_gLedPara^(0+128),0	;volatile
  5388  041A  1E40               	btfss	_gLedPara^(0+128),4	;volatile
  5389  041B  0008               	return
  5390                           
  5391                           ;led.c: 167: gLedPara.mVolume++;
  5392  041C  0E40               	swapf	_gLedPara^(0+128),w	;volatile
  5393  041D  00FA               	movwf	??_Led_OnKeyPressed
  5394  041E  0C7A               	rrf	??_Led_OnKeyPressed,w
  5395  041F  3907               	andlw	7
  5396  0420  00FA               	movwf	??_Led_OnKeyPressed
  5397  0421  0AFA               	incf	??_Led_OnKeyPressed,f
  5398  0422  0EFA               	swapf	??_Led_OnKeyPressed,f
  5399  0423  0DFA               	rlf	??_Led_OnKeyPressed,f
  5400  0424  0840               	movf	_gLedPara^(0+128),w	;volatile
  5401  0425  067A               	xorwf	??_Led_OnKeyPressed,w
  5402  0426  391F               	andlw	-225
  5403  0427  067A               	xorwf	??_Led_OnKeyPressed,w
  5404  0428  00C0               	movwf	_gLedPara^(0+128)	;volatile
  5405                           
  5406                           ;led.c: 168: if (gLedPara.mVolume > 4) {
  5407  0429  0E40               	swapf	_gLedPara^(0+128),w	;volatile
  5408  042A  0C89               	rrf	9,f
  5409  042B  3907               	andlw	7
  5410  042C  00FA               	movwf	??_Led_OnKeyPressed
  5411  042D  3005               	movlw	5
  5412  042E  027A               	subwf	??_Led_OnKeyPressed,w
  5413  042F  1C03               	skipc
  5414  0430  2C33               	goto	i1l2230
  5415                           
  5416                           ;led.c: 169: gLedPara.mVolume = 0;
  5417  0431  301F               	movlw	-225
  5418  0432  05C0               	andwf	_gLedPara^(0+128),f	;volatile
  5419  0433                     i1l2230:	
  5420                           
  5421                           ;led.c: 170: }
  5422                           ;led.c: 171: Audio_SetVolume(VOLUME[gLedPara.mVolume]);
  5423  0433  261E  3180         	fcall	PL4	;call to abstracted procedure
  5424  0435  24CD  3180         	fcall	i1_Audio_SetVolume
  5425  0437  2BD3               	goto	i1l2178
  5426  0438                     i1l2234:	
  5427                           
  5428                           ;led.c: 176: Audio_StopSound();
  5429  0438  24BB  3180         	fcall	i1_Audio_StopSound
  5430                           
  5431                           ;led.c: 177: gLedPara.mOn = !gLedPara.mOn;
  5432  043A  1003               	clrc
  5433  043B  1C40               	btfss	_gLedPara^(0+128),0	;volatile
  5434  043C  1403               	setc
  5435  043D  1C03               	btfss	3,0
  5436  043E  2C42               	goto	u138_20
  5437  043F  0021               	movlb	1	; select bank1
  5438  0440  1440               	bsf	_gLedPara^(0+128),0	;volatile
  5439  0441  2BC0               	goto	i1l2176
  5440  0442                     u138_20:	
  5441  0442  0021               	movlb	1	; select bank1
  5442  0443  1040               	bcf	_gLedPara^(0+128),0	;volatile
  5443  0444  2BC0               	goto	i1l2176
  5444  0445                     i1l443:	
  5445                           ;led.c: 181: case (0x80 | 0x01):
  5446                           
  5447                           
  5448                           ;led.c: 182: if (gLedPara.mOn) {
  5449  0445  0021               	movlb	1	; select bank1
  5450  0446  1C40               	btfss	_gLedPara^(0+128),0	;volatile
  5451  0447  0008               	return
  5452                           
  5453                           ;led.c: 183: gLedPara.mVolOn = !gLedPara.mVolOn;
  5454  0448  1003               	clrc
  5455  0449  1E40               	btfss	_gLedPara^(0+128),4	;volatile
  5456  044A  1403               	setc
  5457  044B  1C03               	btfss	3,0
  5458  044C  2C50               	goto	u141_20
  5459  044D  0021               	movlb	1	; select bank1
  5460  044E  1640               	bsf	_gLedPara^(0+128),4	;volatile
  5461  044F  2C52               	goto	i1l2244
  5462  0450                     u141_20:	
  5463  0450  0021               	movlb	1	; select bank1
  5464  0451  1240               	bcf	_gLedPara^(0+128),4	;volatile
  5465  0452                     i1l2244:	
  5466                           
  5467                           ;led.c: 184: Audio_SetVolume(gLedPara.mVolOn ? VOLUME[ gLedPara.mVolume ] : 0);
  5468  0452  1A40               	btfsc	_gLedPara^(0+128),4	;volatile
  5469  0453  2C56               	goto	i1l2248
  5470  0454  01FB               	clrf	_Led_OnKeyPressed$610
  5471  0455  2C59               	goto	L4
  5472  0456                     i1l2248:	
  5473  0456  261E  3180         	fcall	PL4	;call to abstracted procedure
  5474  0458  00FB               	movwf	_Led_OnKeyPressed$610
  5475  0459                     L4:	
  5476  0459  01FC               	clrf	_Led_OnKeyPressed$610+1
  5477  045A  087B               	movf	_Led_OnKeyPressed$610,w
  5478  045B  24CD  3180         	fcall	i1_Audio_SetVolume
  5479  045D  2BD3               	goto	i1l2178
  5480  045E                     i1l2256:	
  5481  045E  0879               	movf	Led_OnKeyPressed@key,w
  5482                           
  5483                           ; Switch size 1, requested type "space"
  5484                           ; Number of cases is 6, Range of values is 1 to 136
  5485                           ; switch strategies available:
  5486                           ; Name         Instructions Cycles
  5487                           ; simple_byte           19    10 (average)
  5488                           ; jumptable            263     9 (fixed)
  5489                           ;	Chosen strategy is simple_byte
  5490  045F  3A01               	xorlw	1	; case 1
  5491  0460  1903               	skipnz
  5492  0461  2C18               	goto	i1l439
  5493  0462  3A03               	xorlw	3	; case 2
  5494  0463  1903               	skipnz
  5495  0464  2BF0               	goto	i1l432
  5496  0465  3A06               	xorlw	6	; case 4
  5497  0466  1903               	skipnz
  5498  0467  2BD6               	goto	i1l425
  5499  0468  3A0C               	xorlw	12	; case 8
  5500  0469  1903               	skipnz
  5501  046A  2BAA               	goto	i1l421
  5502  046B  3A89               	xorlw	137	; case 129
  5503  046C  1903               	skipnz
  5504  046D  2C45               	goto	i1l443
  5505  046E  3A09               	xorlw	9	; case 136
  5506  046F  1903               	skipnz
  5507  0470  2C38               	goto	i1l2234
  5508  0471  2C72               	goto	i1l450
  5509  0472                     i1l450:	
  5510  0472  0008               	return
  5511  0473                     __end_of_Led_OnKeyPressed:	
  5512  0473                     __ptext56:	
  5513 ;; *************** function _Util_DecValue *****************
  5514 ;; Defined at:
  5515 ;;		line 15 in file "user/src/util.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  pSrc            1    wreg     PTR unsigned int 
  5518 ;;		 -> gLedPara.blue_bright(2), gLedPara.white_bright(2), gLedPara.all_bright(2), gLedPara(32), 
  5519 ;;  min             2    0[COMMON] unsigned int 
  5520 ;;  delta           2    2[COMMON] unsigned int 
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  pSrc            1    8[COMMON] PTR unsigned int 
  5523 ;;		 -> gLedPara.blue_bright(2), gLedPara.white_bright(2), gLedPara.all_bright(2), gLedPara(32), 
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  1    wreg      void 
  5526 ;; Registers used:
  5527 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5528 ;; Tracked objects:
  5529 ;;		On entry : 1F/1
  5530 ;;		On exit  : 1F/1
  5531 ;;		Unchanged: 1F/0
  5532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5533 ;;      Params:         4       0       0       0
  5534 ;;      Locals:         1       0       0       0
  5535 ;;      Temps:          4       0       0       0
  5536 ;;      Totals:         9       0       0       0
  5537 ;;Total ram usage:        9 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; This function calls:
  5540 ;;		Nothing
  5541 ;; This function is called by:
  5542 ;;		_Led_OnKeyPressed
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           
  5547                           ;psect for function _Util_DecValue
  5548  0473                     _Util_DecValue:	
  5549                           
  5550                           ;incstack = 0
  5551                           ; Regs used in _Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
  5552                           ;Util_DecValue@pSrc stored from wreg
  5553  0473  00F8               	movwf	Util_DecValue@pSrc
  5554                           
  5555                           ;util.c: 17: if( *pSrc > min + delta )
  5556  0474  0086               	movwf	6
  5557  0475  0187               	clrf	7
  5558  0476  3F40               	moviw [0]fsr1
  5559  0477  00F4               	movwf	??_Util_DecValue
  5560  0478  3F41               	moviw [1]fsr1
  5561  0479  00F5               	movwf	??_Util_DecValue+1
  5562  047A  0872               	movf	Util_DecValue@delta,w
  5563  047B  0770               	addwf	Util_DecValue@min,w
  5564  047C  00F6               	movwf	??_Util_DecValue+2
  5565  047D  0873               	movf	Util_DecValue@delta+1,w
  5566  047E  3D71               	addwfc	Util_DecValue@min+1,w
  5567  047F  00F7               	movwf	??_Util_DecValue+3
  5568  0480  0875               	movf	??_Util_DecValue+1,w
  5569  0481  0277               	subwf	??_Util_DecValue+3,w
  5570  0482  1D03               	skipz
  5571  0483  2C86               	goto	u120_25
  5572  0484  0874               	movf	??_Util_DecValue,w
  5573  0485  0276               	subwf	??_Util_DecValue+2,w
  5574  0486                     u120_25:	
  5575                           
  5576                           ;util.c: 18: {
  5577                           ;util.c: 19: (*pSrc) -= delta;
  5578  0486  0878               	movf	Util_DecValue@pSrc,w
  5579  0487  0086               	movwf	6
  5580  0488  0187               	clrf	7
  5581  0489  1803               	skipnc
  5582  048A  2C92               	goto	L6
  5583  048B  0872               	movf	Util_DecValue@delta,w
  5584  048C  0281               	subwf	1,f
  5585  048D  3141               	addfsr 1,1
  5586  048E  0873               	movf	Util_DecValue@delta+1,w
  5587  048F  3B81               	subwfb	1,f
  5588  0490  317F               	addfsr 1,-1
  5589                           
  5590                           ;util.c: 20: }
  5591  0491  0008               	return
  5592  0492                     L6:	
  5593                           ;util.c: 21: else
  5594                           ;util.c: 22: {
  5595                           ;util.c: 23: *pSrc = min;
  5596                           
  5597  0492  0870               	movf	Util_DecValue@min,w
  5598  0493  3FC0               	movwi [0]fsr1
  5599  0494  0871               	movf	Util_DecValue@min+1,w
  5600  0495  3FC1               	movwi [1]fsr1
  5601  0496  0008               	return
  5602  0497                     __end_of_Util_DecValue:	
  5603  0497                     __ptext55:	
  5604 ;; *************** function _Util_IncValue *****************
  5605 ;; Defined at:
  5606 ;;		line 3 in file "user/src/util.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  pSrc            1    wreg     PTR unsigned int 
  5609 ;;		 -> gLedPara.blue_bright(2), gLedPara.white_bright(2), gLedPara.all_bright(2), gLedPara(32), 
  5610 ;;  max             2    0[COMMON] unsigned int 
  5611 ;;  delta           2    2[COMMON] unsigned int 
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;  pSrc            1    8[COMMON] PTR unsigned int 
  5614 ;;		 -> gLedPara.blue_bright(2), gLedPara.white_bright(2), gLedPara.all_bright(2), gLedPara(32), 
  5615 ;; Return value:  Size  Location     Type
  5616 ;;                  1    wreg      void 
  5617 ;; Registers used:
  5618 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5619 ;; Tracked objects:
  5620 ;;		On entry : 1F/1
  5621 ;;		On exit  : 1F/1
  5622 ;;		Unchanged: 1F/0
  5623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5624 ;;      Params:         4       0       0       0
  5625 ;;      Locals:         1       0       0       0
  5626 ;;      Temps:          4       0       0       0
  5627 ;;      Totals:         9       0       0       0
  5628 ;;Total ram usage:        9 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; This function calls:
  5631 ;;		Nothing
  5632 ;; This function is called by:
  5633 ;;		_Led_OnKeyPressed
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           
  5638                           ;psect for function _Util_IncValue
  5639  0497                     _Util_IncValue:	
  5640                           
  5641                           ;incstack = 0
  5642                           ; Regs used in _Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
  5643                           ;Util_IncValue@pSrc stored from wreg
  5644  0497  00F8               	movwf	Util_IncValue@pSrc
  5645                           
  5646                           ;util.c: 5: if( *pSrc + delta < max )
  5647  0498  0086               	movwf	6
  5648  0499  0187               	clrf	7
  5649  049A  3F40               	moviw [0]fsr1
  5650  049B  00F4               	movwf	??_Util_IncValue
  5651  049C  3F41               	moviw [1]fsr1
  5652  049D  00F5               	movwf	??_Util_IncValue+1
  5653  049E  0872               	movf	Util_IncValue@delta,w
  5654  049F  0774               	addwf	??_Util_IncValue,w
  5655  04A0  00F6               	movwf	??_Util_IncValue+2
  5656  04A1  0873               	movf	Util_IncValue@delta+1,w
  5657  04A2  3D75               	addwfc	??_Util_IncValue+1,w
  5658  04A3  00F7               	movwf	??_Util_IncValue+3
  5659  04A4  0871               	movf	Util_IncValue@max+1,w
  5660  04A5  0277               	subwf	??_Util_IncValue+3,w
  5661  04A6  1D03               	skipz
  5662  04A7  2CAA               	goto	u119_25
  5663  04A8  0870               	movf	Util_IncValue@max,w
  5664  04A9  0276               	subwf	??_Util_IncValue+2,w
  5665  04AA                     u119_25:	
  5666                           
  5667                           ;util.c: 6: {
  5668                           ;util.c: 7: (*pSrc) += delta;
  5669  04AA  0878               	movf	Util_IncValue@pSrc,w
  5670  04AB  0086               	movwf	6
  5671  04AC  0187               	clrf	7
  5672  04AD  1803               	skipnc
  5673  04AE  2CB6               	goto	L5
  5674  04AF  0872               	movf	Util_IncValue@delta,w
  5675  04B0  0781               	addwf	1,f
  5676  04B1  3141               	addfsr 1,1
  5677  04B2  0873               	movf	Util_IncValue@delta+1,w
  5678  04B3  3D81               	addwfc	1,f
  5679  04B4  317F               	addfsr 1,-1
  5680                           
  5681                           ;util.c: 8: }
  5682  04B5  0008               	return
  5683  04B6                     L5:	
  5684                           ;util.c: 9: else
  5685                           ;util.c: 10: {
  5686                           ;util.c: 11: *pSrc = max;
  5687                           
  5688  04B6  0870               	movf	Util_IncValue@max,w
  5689  04B7  3FC0               	movwi [0]fsr1
  5690  04B8  0871               	movf	Util_IncValue@max+1,w
  5691  04B9  3FC1               	movwi [1]fsr1
  5692  04BA  0008               	return
  5693  04BB                     __end_of_Util_IncValue:	
  5694  04BB                     __ptext52:	
  5695 ;; *************** function i1_Audio_StopSound *****************
  5696 ;; Defined at:
  5697 ;;		line 15 in file "user/src/audio.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;		None
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  Audio_StopSo    1    1[COMMON] unsigned char 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  1    wreg      void 
  5704 ;; Registers used:
  5705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 1F/0
  5708 ;;		On exit  : 1F/1
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5711 ;;      Params:         0       0       0       0
  5712 ;;      Locals:         1       0       0       0
  5713 ;;      Temps:          0       0       0       0
  5714 ;;      Totals:         1       0       0       0
  5715 ;;Total ram usage:        1 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    1
  5718 ;; This function calls:
  5719 ;;		i1_EUSART_Write
  5720 ;; This function is called by:
  5721 ;;		_Led_OnKeyPressed
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           
  5726                           ;psect for function i1_Audio_StopSound
  5727  04BB                     i1_Audio_StopSound:	
  5728  04BB  307E               	movlw	126
  5729                           
  5730                           ;audio.c: 17: uint8_t checksum = 0x00;
  5731                           
  5732                           ;incstack = 0
  5733                           ; Regs used in i1_Audio_StopSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5734  04BC  01F1               	clrf	i1Audio_StopSound@checksum
  5735                           
  5736                           ;audio.c: 18: EUSART_Write ( 0x7E );
  5737  04BD  2507  3180         	fcall	i1_EUSART_Write
  5738                           
  5739                           ;audio.c: 19: checksum += EUSART_Write ( 0x03 );
  5740  04BF  3003               	movlw	3
  5741  04C0  2507  3180         	fcall	i1_EUSART_Write
  5742  04C2  07F1               	addwf	i1Audio_StopSound@checksum,f
  5743                           
  5744                           ;audio.c: 20: checksum += EUSART_Write ( 0xAB );
  5745  04C3  30AB               	movlw	171
  5746  04C4  2507  3180         	fcall	i1_EUSART_Write
  5747  04C6  07F1               	addwf	i1Audio_StopSound@checksum,f
  5748                           
  5749                           ;audio.c: 21: EUSART_Write ( checksum );
  5750  04C7  0871               	movf	i1Audio_StopSound@checksum,w
  5751  04C8  2507  3180         	fcall	i1_EUSART_Write
  5752                           
  5753                           ;audio.c: 22: EUSART_Write ( 0xEF );
  5754  04CA  30EF               	movlw	239
  5755  04CB  2507               	fcall	i1_EUSART_Write
  5756  04CC  0008               	return
  5757  04CD                     __end_ofi1_Audio_StopSound:	
  5758  04CD                     __ptext53:	
  5759 ;; *************** function i1_Audio_SetVolume *****************
  5760 ;; Defined at:
  5761 ;;		line 50 in file "user/src/audio.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  vol             1    wreg     unsigned char 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  vol             1    1[COMMON] unsigned char 
  5766 ;;  Audio_SetVol    1    2[COMMON] unsigned char 
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      void 
  5769 ;; Registers used:
  5770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5771 ;; Tracked objects:
  5772 ;;		On entry : 1F/1
  5773 ;;		On exit  : 1F/1
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5776 ;;      Params:         0       0       0       0
  5777 ;;      Locals:         2       0       0       0
  5778 ;;      Temps:          0       0       0       0
  5779 ;;      Totals:         2       0       0       0
  5780 ;;Total ram usage:        2 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    1
  5783 ;; This function calls:
  5784 ;;		i1_EUSART_Write
  5785 ;; This function is called by:
  5786 ;;		_Led_OnKeyPressed
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           
  5791                           ;psect for function i1_Audio_SetVolume
  5792  04CD                     i1_Audio_SetVolume:	
  5793                           
  5794                           ;incstack = 0
  5795                           ; Regs used in i1_Audio_SetVolume: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5796                           ;i1Audio_SetVolume@vol stored from wreg
  5797  04CD  00F1               	movwf	i1Audio_SetVolume@vol
  5798  04CE  307E               	movlw	126
  5799                           
  5800                           ;audio.c: 52: uint8_t checksum = 0x00;
  5801  04CF  01F2               	clrf	i1Audio_SetVolume@checksum
  5802                           
  5803                           ;audio.c: 53: EUSART_Write ( 0x7E );
  5804  04D0  2507  3180         	fcall	i1_EUSART_Write
  5805                           
  5806                           ;audio.c: 54: checksum += EUSART_Write ( 0x04 );
  5807  04D2  3004               	movlw	4
  5808  04D3  2507  3180         	fcall	i1_EUSART_Write
  5809  04D5  07F2               	addwf	i1Audio_SetVolume@checksum,f
  5810                           
  5811                           ;audio.c: 55: checksum += EUSART_Write ( 0xAE );
  5812  04D6  30AE               	movlw	174
  5813  04D7  2507  3180         	fcall	i1_EUSART_Write
  5814  04D9  07F2               	addwf	i1Audio_SetVolume@checksum,f
  5815                           
  5816                           ;audio.c: 56: checksum += EUSART_Write ( vol );
  5817  04DA  0871               	movf	i1Audio_SetVolume@vol,w
  5818  04DB  2507  3180         	fcall	i1_EUSART_Write
  5819  04DD  07F2               	addwf	i1Audio_SetVolume@checksum,f
  5820                           
  5821                           ;audio.c: 57: EUSART_Write ( checksum );
  5822  04DE  0872               	movf	i1Audio_SetVolume@checksum,w
  5823  04DF  2507  3180         	fcall	i1_EUSART_Write
  5824                           
  5825                           ;audio.c: 58: EUSART_Write ( 0xEF );
  5826  04E1  30EF               	movlw	239
  5827  04E2  2507               	fcall	i1_EUSART_Write
  5828  04E3  0008               	return
  5829  04E4                     __end_ofi1_Audio_SetVolume:	
  5830  04E4                     __ptext44:	
  5831 ;; *************** function _Audio_SelectSound *****************
  5832 ;; Defined at:
  5833 ;;		line 25 in file "user/src/audio.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  index           1    wreg     unsigned char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  index           1    1[COMMON] unsigned char 
  5838 ;;  checksum        1    2[COMMON] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 1F/1
  5845 ;;		On exit  : 1F/1
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5848 ;;      Params:         0       0       0       0
  5849 ;;      Locals:         2       0       0       0
  5850 ;;      Temps:          0       0       0       0
  5851 ;;      Totals:         2       0       0       0
  5852 ;;Total ram usage:        2 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    1
  5855 ;; This function calls:
  5856 ;;		i1_EUSART_Write
  5857 ;; This function is called by:
  5858 ;;		_Led_RunMusic
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function _Audio_SelectSound
  5864  04E4                     _Audio_SelectSound:	
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _Audio_SelectSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5868                           ;Audio_SelectSound@index stored from wreg
  5869  04E4  00F1               	movwf	Audio_SelectSound@index
  5870  04E5  307E               	movlw	126
  5871                           
  5872                           ;audio.c: 27: uint8_t checksum = 0x00;
  5873  04E6  01F2               	clrf	Audio_SelectSound@checksum
  5874                           
  5875                           ;audio.c: 28: EUSART_Write ( 0x7E );
  5876  04E7  2507  3180         	fcall	i1_EUSART_Write
  5877                           
  5878                           ;audio.c: 29: checksum += EUSART_Write ( 0x07 );
  5879  04E9  3007               	movlw	7
  5880  04EA  2507  3180         	fcall	i1_EUSART_Write
  5881  04EC  07F2               	addwf	Audio_SelectSound@checksum,f
  5882                           
  5883                           ;audio.c: 30: checksum += EUSART_Write ( 0xA1 );
  5884  04ED  30A1               	movlw	161
  5885  04EE  2507  3180         	fcall	i1_EUSART_Write
  5886  04F0  07F2               	addwf	Audio_SelectSound@checksum,f
  5887                           
  5888                           ;audio.c: 31: checksum += EUSART_Write ( 0x30 );
  5889  04F1  3030               	movlw	48
  5890  04F2  2507  3180         	fcall	i1_EUSART_Write
  5891  04F4  07F2               	addwf	Audio_SelectSound@checksum,f
  5892                           
  5893                           ;audio.c: 32: checksum += EUSART_Write ( 0x30 );
  5894  04F5  3030               	movlw	48
  5895  04F6  2507  3180         	fcall	i1_EUSART_Write
  5896  04F8  07F2               	addwf	Audio_SelectSound@checksum,f
  5897                           
  5898                           ;audio.c: 33: checksum += EUSART_Write ( 0x30 );
  5899  04F9  3030               	movlw	48
  5900  04FA  2507  3180         	fcall	i1_EUSART_Write
  5901  04FC  07F2               	addwf	Audio_SelectSound@checksum,f
  5902                           
  5903                           ;audio.c: 34: checksum += EUSART_Write ( index );
  5904  04FD  0871               	movf	Audio_SelectSound@index,w
  5905  04FE  2507  3180         	fcall	i1_EUSART_Write
  5906  0500  07F2               	addwf	Audio_SelectSound@checksum,f
  5907                           
  5908                           ;audio.c: 35: EUSART_Write ( checksum );
  5909  0501  0872               	movf	Audio_SelectSound@checksum,w
  5910  0502  2507  3180         	fcall	i1_EUSART_Write
  5911                           
  5912                           ;audio.c: 36: EUSART_Write ( 0xEF );
  5913  0504  30EF               	movlw	239
  5914  0505  2507               	fcall	i1_EUSART_Write
  5915  0506  0008               	return
  5916  0507                     __end_of_Audio_SelectSound:	
  5917  0507                     __ptext54:	
  5918 ;; *************** function i1_EUSART_Write *****************
  5919 ;; Defined at:
  5920 ;;		line 35 in file "driver/src/eusart.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;  byte            1    wreg     unsigned char 
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;  byte            1    0[COMMON] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      unsigned char 
  5927 ;; Registers used:
  5928 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 1E/1
  5931 ;;		On exit  : 1F/1
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5934 ;;      Params:         0       0       0       0
  5935 ;;      Locals:         1       0       0       0
  5936 ;;      Temps:          0       0       0       0
  5937 ;;      Totals:         1       0       0       0
  5938 ;;Total ram usage:        1 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; This function calls:
  5941 ;;		Nothing
  5942 ;; This function is called by:
  5943 ;;		_Audio_SelectSound
  5944 ;;		i1_Audio_StopSound
  5945 ;;		i1_Audio_SetVolume
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           
  5950                           ;psect for function i1_EUSART_Write
  5951  0507                     i1_EUSART_Write:	
  5952                           
  5953                           ;incstack = 0
  5954                           ; Regs used in i1_EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5955                           ;i1EUSART_Write@byte stored from wreg
  5956  0507  00F0               	movwf	i1EUSART_Write@byte
  5957  0508                     i1l2004:	
  5958                           ;eusart.c: 37: while ( 0 == txRemain );
  5959                           
  5960  0508  0020               	movlb	0	; select bank0
  5961  0509  0840               	movf	_txRemain,w
  5962  050A  1903               	btfsc	3,2
  5963  050B  2D08               	goto	i1l2004
  5964                           
  5965                           ;eusart.c: 39: if ( !PIE1bits.TXIE )
  5966  050C  0021               	movlb	1	; select bank1
  5967  050D  1A11               	btfsc	17,4	;volatile
  5968  050E  2D13               	goto	i1l58
  5969                           
  5970                           ;eusart.c: 40: {
  5971                           ;eusart.c: 41: TXREG = byte;
  5972  050F  0870               	movf	i1EUSART_Write@byte,w
  5973  0510  0023               	movlb	3	; select bank3
  5974  0511  009A               	movwf	26	;volatile
  5975                           
  5976                           ;eusart.c: 42: }
  5977  0512  2D17               	goto	i1l2018
  5978  0513                     i1l58:	
  5979                           
  5980                           ;eusart.c: 43: else
  5981                           ;eusart.c: 44: {
  5982                           ;eusart.c: 45: PIE1bits.TXIE = 0;
  5983                           
  5984                           ;eusart.c: 46: txBuf[txHead++] = byte;
  5985  0513  26A7  3180         	fcall	PL36	;call to abstracted procedure
  5986  0515  0870               	movf	i1EUSART_Write@byte,w
  5987                           
  5988                           ;eusart.c: 47: if ( sizeof (txBuf ) <= txHead )
  5989                           
  5990                           ;eusart.c: 48: {
  5991                           ;eusart.c: 49: txHead = 0;
  5992                           
  5993                           ;eusart.c: 50: }
  5994                           ;eusart.c: 51: txRemain--;
  5995  0516  2689               	fcall	PL28	;call to abstracted procedure
  5996  0517                     i1l2018:	
  5997                           
  5998                           ;eusart.c: 52: }
  5999                           ;eusart.c: 53: PIE1bits.TXIE = 1;
  6000  0517  0021               	movlb	1	; select bank1
  6001  0518  1611               	bsf	17,4	;volatile
  6002                           
  6003                           ;eusart.c: 54: return byte;
  6004  0519  0870               	movf	i1EUSART_Write@byte,w
  6005  051A  0008               	return
  6006  051B                     __end_ofi1_EUSART_Write:	
  6007  051B                     __ptext50:	
  6008 ;; *************** function i1_Led_TurnOnAllRamp *****************
  6009 ;; Defined at:
  6010 ;;		line 92 in file "user/src/led.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;		None
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;  Led_TurnOnAl    1    0[COMMON] unsigned char 
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  1    wreg      void 
  6017 ;; Registers used:
  6018 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6019 ;; Tracked objects:
  6020 ;;		On entry : 1F/1
  6021 ;;		On exit  : 1F/1
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6024 ;;      Params:         0       0       0       0
  6025 ;;      Locals:         1       0       0       0
  6026 ;;      Temps:          0       0       0       0
  6027 ;;      Totals:         1       0       0       0
  6028 ;;Total ram usage:        1 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_Led_OnKeyPressed
  6034 ;;		i1_Led_Initialize
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           
  6039                           ;psect for function i1_Led_TurnOnAllRamp
  6040  051B                     i1_Led_TurnOnAllRamp:	
  6041                           
  6042                           ;led.c: 93: gLedPara.mOn = 1;
  6043                           
  6044                           ;incstack = 0
  6045                           ; Regs used in i1_Led_TurnOnAllRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  6046  051B  1440               	bsf	_gLedPara^(0+128),0	;volatile
  6047                           
  6048                           ;led.c: 94: for (uint8_t i = 0; i < 2; i++) {
  6049  051C  01F0               	clrf	i1Led_TurnOnAllRamp@i
  6050  051D                     i1l2032:	
  6051                           
  6052                           ;led.c: 95: gLedRunPara.mTargetBright[i] = gLedPara.all_bright;
  6053  051D  3570               	lslf	i1Led_TurnOnAllRamp@i,w
  6054  051E  3E24               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
  6055  051F  0086               	movwf	6
  6056  0520  0187               	clrf	7
  6057  0521  0841               	movf	(_gLedPara^(0+128)+1),w	;volatile
  6058  0522  3FC0               	movwi [0]fsr1
  6059  0523  0842               	movf	((_gLedPara+1)^(0+128)+1),w	;volatile
  6060  0524  3FC1               	movwi [1]fsr1
  6061  0525  3002               	movlw	2
  6062  0526  0AF0               	incf	i1Led_TurnOnAllRamp@i,f
  6063  0527  0270               	subwf	i1Led_TurnOnAllRamp@i,w
  6064  0528  1803               	btfsc	3,0
  6065  0529  0008               	return
  6066  052A  2D1D               	goto	i1l2032
  6067  052B                     __end_ofi1_Led_TurnOnAllRamp:	
  6068  052B                     __ptext49:	
  6069 ;; *************** function i1_Led_TurnOnBlueRamp *****************
  6070 ;; Defined at:
  6071 ;;		line 105 in file "user/src/led.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;		None
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;		None
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      void 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2
  6080 ;; Tracked objects:
  6081 ;;		On entry : 1E/1
  6082 ;;		On exit  : 1F/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6085 ;;      Params:         0       0       0       0
  6086 ;;      Locals:         0       0       0       0
  6087 ;;      Temps:          0       0       0       0
  6088 ;;      Totals:         0       0       0       0
  6089 ;;Total ram usage:        0 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		_Led_OnKeyPressed
  6095 ;;		i1_Led_Initialize
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           
  6100                           ;psect for function i1_Led_TurnOnBlueRamp
  6101  052B                     i1_Led_TurnOnBlueRamp:	
  6102                           
  6103                           ;led.c: 106: gLedPara.mOn = 1;
  6104                           
  6105                           ;incstack = 0
  6106                           ; Regs used in i1_Led_TurnOnBlueRamp: [wreg+status,2]
  6107  052B  0021               	movlb	1	; select bank1
  6108  052C  1440               	bsf	_gLedPara^(0+128),0	;volatile
  6109                           
  6110                           ;led.c: 107: gLedRunPara.mTargetBright[0] = gLedPara.blue_bright;
  6111                           
  6112                           ;led.c: 108: gLedRunPara.mTargetBright[1] = 0;
  6113  052D  2E60               	ljmp	PL16	;call to abstracted procedure
  6114  052E                     __end_ofi1_Led_TurnOnBlueRamp:	
  6115  052E                     __ptext47:	
  6116 ;; *************** function i1_Led_Initialize *****************
  6117 ;; Defined at:
  6118 ;;		line 57 in file "user/src/led.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 1E/1
  6129 ;;		On exit  : 1E/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6132 ;;      Params:         0       0       0       0
  6133 ;;      Locals:         0       0       0       0
  6134 ;;      Temps:          0       0       0       0
  6135 ;;      Totals:         0       0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    1
  6139 ;; This function calls:
  6140 ;;		i1_Led_TurnOffRamp
  6141 ;;		i1_Led_TurnOnAllRamp
  6142 ;;		i1_Led_TurnOnBlueRamp
  6143 ;;		i1_Led_TurnOnWhiteRamp
  6144 ;; This function is called by:
  6145 ;;		_Led_OnKeyPressed
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function i1_Led_Initialize
  6151  052E                     i1_Led_Initialize:	
  6152                           
  6153                           ;led.c: 58: if (!gLedPara.mOn) {
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in i1_Led_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6157  052E  0021               	movlb	1	; select bank1
  6158  052F  1840               	btfsc	_gLedPara^(0+128),0	;volatile
  6159  0530  2D33               	goto	i1l2122
  6160                           
  6161                           ;led.c: 59: Led_TurnOffRamp();
  6162  0531  2614               	fcall	i1_Led_TurnOffRamp
  6163                           
  6164                           ;led.c: 60: } else {
  6165  0532  0008               	return
  6166  0533                     i1l2122:	
  6167                           
  6168                           ;led.c: 61: gLedRunPara.music_state = 0;
  6169  0533  3001               	movlw	-255
  6170  0534  0020               	movlb	0	; select bank0
  6171  0535  05A8               	andwf	_gLedRunPara+8,f	;volatile
  6172                           
  6173                           ;led.c: 62: switch (gLedPara.mMode) {
  6174  0536  2D3D               	goto	i1l2132
  6175  0537                     i1l2124:	
  6176                           
  6177                           ;led.c: 64: Led_TurnOnAllRamp();
  6178  0537  251B               	fcall	i1_Led_TurnOnAllRamp
  6179                           
  6180                           ;led.c: 65: break;
  6181  0538  0008               	return
  6182  0539                     i1l2126:	
  6183                           
  6184                           ;led.c: 67: Led_TurnOnWhiteRamp();
  6185  0539  254A               	fcall	i1_Led_TurnOnWhiteRamp
  6186                           
  6187                           ;led.c: 68: break;
  6188  053A  0008               	return
  6189  053B                     i1l2128:	
  6190                           
  6191                           ;led.c: 70: Led_TurnOnBlueRamp();
  6192  053B  252B               	fcall	i1_Led_TurnOnBlueRamp
  6193                           
  6194                           ;led.c: 71: break;
  6195  053C  0008               	return
  6196  053D                     i1l2132:	
  6197  053D  0021               	movlb	1	; select bank1
  6198  053E  0C40               	rrf	_gLedPara^(0+128),w	;volatile
  6199  053F  3907               	andlw	7
  6200                           
  6201                           ; Switch size 1, requested type "space"
  6202                           ; Number of cases is 3, Range of values is 0 to 2
  6203                           ; switch strategies available:
  6204                           ; Name         Instructions Cycles
  6205                           ; simple_byte           10     6 (average)
  6206                           ; direct_byte           12     6 (fixed)
  6207                           ; jumptable            260     6 (fixed)
  6208                           ;	Chosen strategy is simple_byte
  6209  0540  1903               	skipnz
  6210  0541  2D37               	goto	i1l2124
  6211  0542  3A01               	xorlw	1	; case 1
  6212  0543  1903               	skipnz
  6213  0544  2D39               	goto	i1l2126
  6214  0545  3A03               	xorlw	3	; case 2
  6215  0546  1903               	skipnz
  6216  0547  2D3B               	goto	i1l2128
  6217  0548  2D49               	goto	i1l392
  6218  0549                     i1l392:	
  6219  0549  0008               	return
  6220  054A                     __end_ofi1_Led_Initialize:	
  6221  054A                     __ptext48:	
  6222 ;; *************** function i1_Led_TurnOnWhiteRamp *****************
  6223 ;; Defined at:
  6224 ;;		line 99 in file "user/src/led.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;		None
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;		None
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      void 
  6231 ;; Registers used:
  6232 ;;		wreg, status,2
  6233 ;; Tracked objects:
  6234 ;;		On entry : 1E/1
  6235 ;;		On exit  : 1F/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6238 ;;      Params:         0       0       0       0
  6239 ;;      Locals:         0       0       0       0
  6240 ;;      Temps:          0       0       0       0
  6241 ;;      Totals:         0       0       0       0
  6242 ;;Total ram usage:        0 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; This function calls:
  6245 ;;		Nothing
  6246 ;; This function is called by:
  6247 ;;		_Led_OnKeyPressed
  6248 ;;		i1_Led_Initialize
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function i1_Led_TurnOnWhiteRamp
  6254  054A                     i1_Led_TurnOnWhiteRamp:	
  6255                           
  6256                           ;led.c: 100: gLedPara.mOn = 1;
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in i1_Led_TurnOnWhiteRamp: [wreg+status,2]
  6260  054A  0021               	movlb	1	; select bank1
  6261  054B  1440               	bsf	_gLedPara^(0+128),0	;volatile
  6262                           
  6263                           ;led.c: 101: gLedRunPara.mTargetBright[0] = 0;
  6264  054C  0020               	movlb	0	; select bank0
  6265  054D  01A4               	clrf	_gLedRunPara+4	;volatile
  6266                           
  6267                           ;led.c: 102: gLedRunPara.mTargetBright[1] = gLedPara.white_bright;
  6268  054E  2E6A               	ljmp	PL18	;call to abstracted procedure
  6269  054F                     __end_ofi1_Led_TurnOnWhiteRamp:	
  6270  054F                     __ptext40:	
  6271 ;; *************** function _Led_DynamicCloud *****************
  6272 ;; Defined at:
  6273 ;;		line 206 in file "user/src/led.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  ptp             2    6[COMMON] unsigned int 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  duty            4    2[BANK0 ] unsigned int [2]
  6278 ;;  val             2    0[BANK0 ] unsigned int 
  6279 ;;  i               1    6[BANK0 ] unsigned char 
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      void 
  6282 ;; Registers used:
  6283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 1F/0
  6286 ;;		On exit  : 1F/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6289 ;;      Params:         2       0       0       0
  6290 ;;      Locals:         0       7       0       0
  6291 ;;      Temps:          4       0       0       0
  6292 ;;      Totals:         6       7       0       0
  6293 ;;Total ram usage:       13 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    1
  6296 ;; This function calls:
  6297 ;;		_PWM1_LoadDutyValue
  6298 ;;		_PWM3_LoadDutyValue
  6299 ;;		i1___wmul
  6300 ;; This function is called by:
  6301 ;;		_Led_RunMusic
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           
  6306                           ;psect for function _Led_DynamicCloud
  6307  054F                     _Led_DynamicCloud:	
  6308  054F                     i1l2280:	
  6309                           ;incstack = 0
  6310                           ; Regs used in _Led_DynamicCloud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6311                           
  6312                           
  6313                           ;led.c: 207: uint8_t i;
  6314                           ;led.c: 208: uint16_t val = ptp * ( 6 + GAIN[gLedPara.mVolume] );
  6315  054F  2633  3180         	fcall	PL8	;call to abstracted procedure
  6316  0551  3006               	movlw	6
  6317  0552  01F1               	clrf	i1___wmul@multiplier+1
  6318  0553  07F0               	addwf	i1___wmul@multiplier,f
  6319  0554  1803               	skipnc
  6320  0555  0AF1               	incf	i1___wmul@multiplier+1,f
  6321  0556  0877               	movf	Led_DynamicCloud@ptp+1,w
  6322  0557  00F3               	movwf	i1___wmul@multiplicand+1
  6323  0558  0876               	movf	Led_DynamicCloud@ptp,w
  6324  0559  00F2               	movwf	i1___wmul@multiplicand
  6325  055A  25FF  3180         	fcall	i1___wmul
  6326  055C  0871               	movf	?i1___wmul+1,w
  6327  055D  0020               	movlb	0	; select bank0
  6328  055E  00C3               	movwf	Led_DynamicCloud@val+1
  6329  055F  0870               	movf	?i1___wmul,w
  6330  0560  00C2               	movwf	Led_DynamicCloud@val
  6331                           
  6332                           ;led.c: 209: uint16_t duty[2] = {400, 320};
  6333  0561  085C               	movf	Led_DynamicCloud@F4458+3,w
  6334  0562  00C7               	movwf	Led_DynamicCloud@duty+3
  6335  0563  085B               	movf	Led_DynamicCloud@F4458+2,w
  6336  0564  00C6               	movwf	Led_DynamicCloud@duty+2
  6337  0565  085A               	movf	Led_DynamicCloud@F4458+1,w
  6338  0566  00C5               	movwf	Led_DynamicCloud@duty+1
  6339  0567  0859               	movf	Led_DynamicCloud@F4458,w
  6340  0568  00C4               	movwf	Led_DynamicCloud@duty
  6341                           
  6342                           ;led.c: 210: if (duty[1] > val) {
  6343  0569  0847               	movf	Led_DynamicCloud@duty+3,w
  6344  056A  0243               	subwf	Led_DynamicCloud@val+1,w
  6345  056B  1D03               	skipz
  6346  056C  2D6F               	goto	u147_25
  6347  056D  0846               	movf	Led_DynamicCloud@duty+2,w
  6348  056E  0242               	subwf	Led_DynamicCloud@val,w
  6349  056F                     u147_25:	
  6350  056F  1803               	skipnc
  6351  0570  2D76               	goto	i1l2288
  6352                           
  6353                           ;led.c: 211: duty[1] -= val;
  6354  0571  0842               	movf	Led_DynamicCloud@val,w
  6355  0572  02C6               	subwf	Led_DynamicCloud@duty+2,f
  6356  0573  0843               	movf	Led_DynamicCloud@val+1,w
  6357  0574  3BC7               	subwfb	Led_DynamicCloud@duty+3,f
  6358                           
  6359                           ;led.c: 212: } else {
  6360  0575  2D78               	goto	i1l465
  6361  0576                     i1l2288:	
  6362                           
  6363                           ;led.c: 213: duty[1] = 0;
  6364  0576  01C6               	clrf	Led_DynamicCloud@duty+2
  6365  0577  01C7               	clrf	Led_DynamicCloud@duty+3
  6366  0578                     i1l465:	
  6367                           
  6368                           ;led.c: 214: }
  6369                           ;led.c: 215: for (i = 0; i < 2; i++) {
  6370  0578  01C8               	clrf	Led_DynamicCloud@i
  6371  0579                     i1l2294:	
  6372                           
  6373                           ;led.c: 216: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
  6374  0579  3548               	lslf	Led_DynamicCloud@i,w
  6375  057A  3E44               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
  6376  057B  2691  3180         	fcall	PL30	;call to abstracted procedure
  6377  057D  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6378  057E  2640  3180         	fcall	PL10	;call to abstracted procedure
  6379  0580  1803               	skipnc
  6380  0581  2D88               	goto	i1l2298
  6381                           
  6382                           ;led.c: 217: gLedRunPara.mCurrentBright[i]++;
  6383  0582  3548               	lslf	Led_DynamicCloud@i,w
  6384  0583  267B  3180         	fcall	PL22	;call to abstracted procedure
  6385  0585  1803               	skipnc
  6386  0586  0A81               	incf	1,f
  6387                           
  6388                           ;led.c: 218: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
  6389  0587  2D94               	goto	i1l2302
  6390  0588                     i1l2298:	
  6391  0588  3548               	lslf	Led_DynamicCloud@i,w
  6392  0589  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6393  058A  2691  3180         	fcall	PL30	;call to abstracted procedure
  6394  058C  3E44               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
  6395  058D  2640  3180         	fcall	PL10	;call to abstracted procedure
  6396  058F  1803               	skipnc
  6397  0590  2D94               	goto	i1l2302
  6398                           
  6399                           ;led.c: 219: gLedRunPara.mCurrentBright[i]--;
  6400  0591  3548               	lslf	Led_DynamicCloud@i,w
  6401  0592  2629  3180         	fcall	PL6	;call to abstracted procedure
  6402  0594                     i1l2302:	
  6403                           
  6404                           ;led.c: 220: }
  6405                           ;led.c: 221: loadDuty[i](gLedRunPara.mCurrentBright[i]);
  6406  0594  3548               	lslf	Led_DynamicCloud@i,w
  6407  0595  2658               	fcall	PL14	;call to abstracted procedure
  6408  0596  3548               	lslf	Led_DynamicCloud@i,w
  6409  0597  3E5D               	addlw	(low (_loadDuty| 0))& (0+255)
  6410  0598  0086               	movwf	6
  6411  0599  3F41               	moviw [1]fsr1
  6412  059A  008A               	movwf	10
  6413  059B  3F40               	moviw [0]fsr1
  6414  059C  000A               	callw
  6415  059D  3180               	pagesel	$
  6416  059E  0020               	movlb	0	; select bank0
  6417  059F  3002               	movlw	2
  6418  05A0  0AC8               	incf	Led_DynamicCloud@i,f
  6419  05A1  0248               	subwf	Led_DynamicCloud@i,w
  6420  05A2  1803               	btfsc	3,0
  6421  05A3  0008               	return
  6422  05A4  2D79               	goto	i1l2294
  6423  05A5                     __end_of_Led_DynamicCloud:	
  6424  05A5                     __ptext39:	
  6425 ;; *************** function _Led_DynamicStorm *****************
  6426 ;; Defined at:
  6427 ;;		line 225 in file "user/src/led.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;  ptp             2    6[COMMON] unsigned int 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  duty            4    0[BANK0 ] unsigned int [2]
  6432 ;;  val             2    4[BANK0 ] unsigned int 
  6433 ;;  i               1    6[BANK0 ] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 1F/0
  6440 ;;		On exit  : 1F/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6443 ;;      Params:         2       0       0       0
  6444 ;;      Locals:         0       7       0       0
  6445 ;;      Temps:          4       0       0       0
  6446 ;;      Totals:         6       7       0       0
  6447 ;;Total ram usage:       13 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    1
  6450 ;; This function calls:
  6451 ;;		_PWM1_LoadDutyValue
  6452 ;;		_PWM3_LoadDutyValue
  6453 ;;		i1___wmul
  6454 ;; This function is called by:
  6455 ;;		_Led_RunMusic
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           
  6460                           ;psect for function _Led_DynamicStorm
  6461  05A5                     _Led_DynamicStorm:	
  6462  05A5                     i1l2308:	
  6463                           ;incstack = 0
  6464                           ; Regs used in _Led_DynamicStorm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6465                           
  6466                           
  6467                           ;led.c: 226: uint8_t i;
  6468                           ;led.c: 227: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
  6469  05A5  2633  3180         	fcall	PL8	;call to abstracted procedure
  6470  05A7  3005               	movlw	5
  6471  05A8  01F1               	clrf	i1___wmul@multiplier+1
  6472  05A9  07F0               	addwf	i1___wmul@multiplier,f
  6473  05AA  1803               	skipnc
  6474  05AB  0AF1               	incf	i1___wmul@multiplier+1,f
  6475  05AC  0877               	movf	Led_DynamicStorm@ptp+1,w
  6476  05AD  00F3               	movwf	i1___wmul@multiplicand+1
  6477  05AE  0876               	movf	Led_DynamicStorm@ptp,w
  6478  05AF  00F2               	movwf	i1___wmul@multiplicand
  6479  05B0  25FF  3180         	fcall	i1___wmul
  6480  05B2  0871               	movf	?i1___wmul+1,w
  6481  05B3  0020               	movlb	0	; select bank0
  6482  05B4  00C7               	movwf	Led_DynamicStorm@val+1
  6483  05B5  0870               	movf	?i1___wmul,w
  6484  05B6  00C6               	movwf	Led_DynamicStorm@val
  6485                           
  6486                           ;led.c: 228: uint16_t duty[2] = {500, 64};
  6487  05B7  0858               	movf	Led_DynamicStorm@F4469+3,w
  6488  05B8  00C5               	movwf	Led_DynamicStorm@duty+3
  6489  05B9  0857               	movf	Led_DynamicStorm@F4469+2,w
  6490  05BA  00C4               	movwf	Led_DynamicStorm@duty+2
  6491  05BB  0856               	movf	Led_DynamicStorm@F4469+1,w
  6492  05BC  00C3               	movwf	Led_DynamicStorm@duty+1
  6493  05BD  0855               	movf	Led_DynamicStorm@F4469,w
  6494  05BE  00C2               	movwf	Led_DynamicStorm@duty
  6495                           
  6496                           ;led.c: 229: if (duty[0] > val) {
  6497  05BF  0843               	movf	Led_DynamicStorm@duty+1,w
  6498  05C0  0247               	subwf	Led_DynamicStorm@val+1,w
  6499  05C1  1D03               	skipz
  6500  05C2  2DC5               	goto	u151_25
  6501  05C3  0842               	movf	Led_DynamicStorm@duty,w
  6502  05C4  0246               	subwf	Led_DynamicStorm@val,w
  6503  05C5                     u151_25:	
  6504  05C5  1803               	skipnc
  6505  05C6  2DCC               	goto	i1l2316
  6506                           
  6507                           ;led.c: 230: duty[0] -= val;
  6508  05C7  0846               	movf	Led_DynamicStorm@val,w
  6509  05C8  02C2               	subwf	Led_DynamicStorm@duty,f
  6510  05C9  0847               	movf	Led_DynamicStorm@val+1,w
  6511  05CA  3BC3               	subwfb	Led_DynamicStorm@duty+1,f
  6512                           
  6513                           ;led.c: 231: } else {
  6514  05CB  2DCE               	goto	i1l2318
  6515  05CC                     i1l2316:	
  6516                           
  6517                           ;led.c: 232: duty[0] = 0;
  6518  05CC  01C2               	clrf	Led_DynamicStorm@duty
  6519  05CD  01C3               	clrf	Led_DynamicStorm@duty+1
  6520  05CE                     i1l2318:	
  6521                           
  6522                           ;led.c: 233: }
  6523                           ;led.c: 234: duty[1] += val;
  6524  05CE  0846               	movf	Led_DynamicStorm@val,w
  6525  05CF  07C4               	addwf	Led_DynamicStorm@duty+2,f
  6526  05D0  0847               	movf	Led_DynamicStorm@val+1,w
  6527  05D1  3DC5               	addwfc	Led_DynamicStorm@duty+3,f
  6528                           
  6529                           ;led.c: 235: for (i = 0; i < 2; i++) {
  6530  05D2  01C8               	clrf	Led_DynamicStorm@i
  6531  05D3                     i1l2324:	
  6532                           
  6533                           ;led.c: 236: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
  6534  05D3  3548               	lslf	Led_DynamicStorm@i,w
  6535  05D4  3E42               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
  6536  05D5  2699  3180         	fcall	PL32	;call to abstracted procedure
  6537  05D7  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6538  05D8  264C  3180         	fcall	PL12	;call to abstracted procedure
  6539  05DA  1803               	skipnc
  6540  05DB  2DE2               	goto	i1l2328
  6541                           
  6542                           ;led.c: 237: gLedRunPara.mCurrentBright[i]++;
  6543  05DC  3548               	lslf	Led_DynamicStorm@i,w
  6544  05DD  267B  3180         	fcall	PL22	;call to abstracted procedure
  6545  05DF  1803               	skipnc
  6546  05E0  0A81               	incf	1,f
  6547                           
  6548                           ;led.c: 238: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
  6549  05E1  2DEE               	goto	i1l2332
  6550  05E2                     i1l2328:	
  6551  05E2  3548               	lslf	Led_DynamicStorm@i,w
  6552  05E3  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6553  05E4  2699  3180         	fcall	PL32	;call to abstracted procedure
  6554  05E6  3E42               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
  6555  05E7  264C  3180         	fcall	PL12	;call to abstracted procedure
  6556  05E9  1803               	skipnc
  6557  05EA  2DEE               	goto	i1l2332
  6558                           
  6559                           ;led.c: 239: gLedRunPara.mCurrentBright[i]--;
  6560  05EB  3548               	lslf	Led_DynamicStorm@i,w
  6561  05EC  2629  3180         	fcall	PL6	;call to abstracted procedure
  6562  05EE                     i1l2332:	
  6563                           
  6564                           ;led.c: 240: }
  6565                           ;led.c: 241: loadDuty[i](gLedRunPara.mCurrentBright[i]);
  6566  05EE  3548               	lslf	Led_DynamicStorm@i,w
  6567  05EF  2658               	fcall	PL14	;call to abstracted procedure
  6568  05F0  3548               	lslf	Led_DynamicStorm@i,w
  6569  05F1  3E5D               	addlw	(low (_loadDuty| 0))& (0+255)
  6570  05F2  0086               	movwf	6
  6571  05F3  3F41               	moviw [1]fsr1
  6572  05F4  008A               	movwf	10
  6573  05F5  3F40               	moviw [0]fsr1
  6574  05F6  000A               	callw
  6575  05F7  3180               	pagesel	$
  6576  05F8  0020               	movlb	0	; select bank0
  6577  05F9  3002               	movlw	2
  6578  05FA  0AC8               	incf	Led_DynamicStorm@i,f
  6579  05FB  0248               	subwf	Led_DynamicStorm@i,w
  6580  05FC  1803               	btfsc	3,0
  6581  05FD  0008               	return
  6582  05FE  2DD3               	goto	i1l2324
  6583  05FF                     __end_of_Led_DynamicStorm:	
  6584  05FF                     __ptext41:	
  6585 ;; *************** function i1___wmul *****************
  6586 ;; Defined at:
  6587 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  multiplier      2    0[COMMON] unsigned int 
  6590 ;;  multiplicand    2    2[COMMON] unsigned int 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  __wmul          2    4[COMMON] unsigned int 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  2    0[COMMON] unsigned int 
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0
  6597 ;; Tracked objects:
  6598 ;;		On entry : 1F/1
  6599 ;;		On exit  : 1F/1
  6600 ;;		Unchanged: 1F/0
  6601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6602 ;;      Params:         4       0       0       0
  6603 ;;      Locals:         2       0       0       0
  6604 ;;      Temps:          0       0       0       0
  6605 ;;      Totals:         6       0       0       0
  6606 ;;Total ram usage:        6 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; This function calls:
  6609 ;;		Nothing
  6610 ;; This function is called by:
  6611 ;;		_Led_DynamicCloud
  6612 ;;		_Led_DynamicStorm
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           
  6617                           ;psect for function i1___wmul
  6618  05FF                     i1___wmul:	
  6619                           
  6620                           ;incstack = 0
  6621                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6622  05FF  01F4               	clrf	i1___wmul@product
  6623  0600  01F5               	clrf	i1___wmul@product+1
  6624  0601                     i1l2136:	
  6625  0601  1C70               	btfss	i1___wmul@multiplier,0
  6626  0602  2E07               	goto	i1l2140
  6627  0603  0872               	movf	i1___wmul@multiplicand,w
  6628  0604  07F4               	addwf	i1___wmul@product,f
  6629  0605  0873               	movf	i1___wmul@multiplicand+1,w
  6630  0606  3DF5               	addwfc	i1___wmul@product+1,f
  6631  0607                     i1l2140:	
  6632  0607  35F2               	lslf	i1___wmul@multiplicand,f
  6633  0608  0DF3               	rlf	i1___wmul@multiplicand+1,f
  6634  0609  36F1               	lsrf	i1___wmul@multiplier+1,f
  6635  060A  0CF0               	rrf	i1___wmul@multiplier,f
  6636  060B  0870               	movf	i1___wmul@multiplier,w
  6637  060C  0471               	iorwf	i1___wmul@multiplier+1,w
  6638  060D  1D03               	btfss	3,2
  6639  060E  2E01               	goto	i1l2136
  6640  060F  0875               	movf	i1___wmul@product+1,w
  6641  0610  00F1               	movwf	?i1___wmul+1
  6642  0611  0874               	movf	i1___wmul@product,w
  6643  0612  00F0               	movwf	?i1___wmul
  6644  0613  0008               	return
  6645  0614                     __end_ofi1___wmul:	
  6646  0614                     __ptext51:	
  6647 ;; *************** function i1_Led_TurnOffRamp *****************
  6648 ;; Defined at:
  6649 ;;		line 111 in file "user/src/led.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;		None
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;  Led_TurnOffR    1    0[COMMON] unsigned char 
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      void 
  6656 ;; Registers used:
  6657 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6658 ;; Tracked objects:
  6659 ;;		On entry : 1F/1
  6660 ;;		On exit  : 1F/1
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6663 ;;      Params:         0       0       0       0
  6664 ;;      Locals:         1       0       0       0
  6665 ;;      Temps:          0       0       0       0
  6666 ;;      Totals:         1       0       0       0
  6667 ;;Total ram usage:        1 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		i1_Led_Initialize
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           
  6677                           ;psect for function i1_Led_TurnOffRamp
  6678  0614                     i1_Led_TurnOffRamp:	
  6679                           
  6680                           ;led.c: 112: gLedPara.mOn = 0;
  6681                           
  6682                           ;incstack = 0
  6683                           ; Regs used in i1_Led_TurnOffRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  6684  0614  1040               	bcf	_gLedPara^(0+128),0	;volatile
  6685                           
  6686                           ;led.c: 113: for (uint8_t i = 0; i < 2; i++) {
  6687  0615  01F0               	clrf	i1Led_TurnOffRamp@i
  6688  0616                     i1l2058:	
  6689                           
  6690                           ;led.c: 114: gLedRunPara.mTargetBright[i] = 0;
  6691  0616  3570               	lslf	i1Led_TurnOffRamp@i,w
  6692  0617  2682  3180         	fcall	PL24	;call to abstracted procedure
  6693  0619  0AF0               	incf	i1Led_TurnOffRamp@i,f
  6694  061A  0270               	subwf	i1Led_TurnOffRamp@i,w
  6695  061B  1803               	btfsc	3,0
  6696  061C  0008               	return
  6697  061D  2E16               	goto	i1l2058
  6698  061E                     __end_ofi1_Led_TurnOffRamp:	
  6699  061E                     PL4:	
  6700  061E  0E40               	swapf	_gLedPara^(0+128),w	;volatile
  6701  061F  0C89               	rrf	9,f
  6702  0620  3907               	andlw	7
  6703  0621  3E02               	addlw	low (_VOLUME| (0+32768))
  6704  0622  0084               	movwf	4
  6705  0623  3088               	movlw	high (_VOLUME| (0+32768))
  6706  0624  1803               	skipnc
  6707  0625  3E01               	addlw	1
  6708  0626  0085               	movwf	5
  6709  0627  0800               	movf	0,w	;code access
  6710  0628  0008               	return
  6711  0629                     __end_ofPL4:	
  6712  0629                     PL6:	
  6713  0629  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6714  062A  0086               	movwf	6
  6715  062B  3001               	movlw	1
  6716  062C  0187               	clrf	7
  6717  062D  0281               	subwf	1,f
  6718  062E  3000               	movlw	0
  6719  062F  3141               	addfsr 1,1
  6720  0630  3B81               	subwfb	1,f
  6721  0631  317F               	addfsr 1,-1
  6722  0632  0008               	return
  6723  0633                     __end_ofPL6:	
  6724  0633                     PL8:	
  6725  0633  0021               	movlb	1	; select bank1
  6726  0634  0E40               	swapf	_gLedPara^(0+128),w	;volatile
  6727  0635  0C89               	rrf	9,f
  6728  0636  3907               	andlw	7
  6729  0637  3EFD               	addlw	low (_GAIN| (0+32768))
  6730  0638  0084               	movwf	4
  6731  0639  3087               	movlw	high (_GAIN| (0+32768))
  6732  063A  1803               	skipnc
  6733  063B  3E01               	addlw	1
  6734  063C  0085               	movwf	5
  6735  063D  0800               	movf	0,w	;code access
  6736  063E  00F0               	movwf	i1___wmul@multiplier
  6737  063F  0008               	return
  6738  0640                     __end_ofPL8:	
  6739  0640                     PL10:	
  6740  0640  0086               	movwf	6
  6741  0641  3F40               	moviw [0]fsr1
  6742  0642  00FA               	movwf	??_Led_DynamicCloud+2
  6743  0643  3F41               	moviw [1]fsr1
  6744  0644  00FB               	movwf	??_Led_DynamicCloud+3
  6745  0645  0879               	movf	??_Led_DynamicCloud+1,w
  6746  0646  027B               	subwf	??_Led_DynamicCloud+3,w
  6747  0647  1D03               	skipz
  6748  0648  0008               	return
  6749  0649  0878               	movf	??_Led_DynamicCloud,w
  6750  064A  027A               	subwf	??_Led_DynamicCloud+2,w
  6751  064B  0008               	return
  6752  064C                     __end_ofPL10:	
  6753  064C                     PL12:	
  6754  064C  0086               	movwf	6
  6755  064D  3F40               	moviw [0]fsr1
  6756  064E  00FA               	movwf	??_Led_DynamicStorm+2
  6757  064F  3F41               	moviw [1]fsr1
  6758  0650  00FB               	movwf	??_Led_DynamicStorm+3
  6759  0651  0879               	movf	??_Led_DynamicStorm+1,w
  6760  0652  027B               	subwf	??_Led_DynamicStorm+3,w
  6761  0653  1D03               	skipz
  6762  0654  0008               	return
  6763  0655  0878               	movf	??_Led_DynamicStorm,w
  6764  0656  027A               	subwf	??_Led_DynamicStorm+2,w
  6765  0657  0008               	return
  6766  0658                     __end_ofPL12:	
  6767  0658                     PL14:	
  6768  0658  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6769  0659  0086               	movwf	6
  6770  065A  0187               	clrf	7
  6771  065B  3F40               	moviw [0]fsr1
  6772  065C  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  6773  065D  3F41               	moviw [1]fsr1
  6774  065E  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  6775  065F  0008               	return
  6776  0660                     __end_ofPL14:	
  6777  0660                     PL16:	
  6778  0660  0846               	movf	((_gLedPara+1)^(0+128)+5),w	;volatile
  6779  0661  0020               	movlb	0	; select bank0
  6780  0662  00A5               	movwf	_gLedRunPara+5	;volatile
  6781  0663  0021               	movlb	1	; select bank1
  6782  0664  0845               	movf	(_gLedPara^(0+128)+5),w	;volatile
  6783  0665  0020               	movlb	0	; select bank0
  6784  0666  00A4               	movwf	_gLedRunPara+4	;volatile
  6785  0667  01A6               	clrf	_gLedRunPara+6	;volatile
  6786  0668  01A7               	clrf	_gLedRunPara+7	;volatile
  6787  0669  0008               	return
  6788  066A                     __end_ofPL16:	
  6789  066A                     PL18:	
  6790  066A  01A5               	clrf	_gLedRunPara+5	;volatile
  6791  066B  0021               	movlb	1	; select bank1
  6792  066C  0844               	movf	((_gLedPara+1)^(0+128)+3),w	;volatile
  6793  066D  0020               	movlb	0	; select bank0
  6794  066E  00A7               	movwf	_gLedRunPara+7	;volatile
  6795  066F  0021               	movlb	1	; select bank1
  6796  0670  0843               	movf	(_gLedPara^(0+128)+3),w	;volatile
  6797  0671  0020               	movlb	0	; select bank0
  6798  0672  00A6               	movwf	_gLedRunPara+6	;volatile
  6799  0673  0008               	return
  6800  0674                     __end_ofPL18:	
  6801  0674                     PL20:	
  6802  0674  30E8               	movlw	232
  6803  0675  00F0               	movwf	Util_IncValue@max
  6804  0676  3003               	movlw	3
  6805  0677  00F1               	movwf	Util_IncValue@max+1
  6806  0678  30C8               	movlw	200
  6807  0679  00F2               	movwf	Util_IncValue@delta
  6808  067A  0008               	return
  6809  067B                     __end_ofPL20:	
  6810  067B                     PL22:	
  6811  067B  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6812  067C  0086               	movwf	6
  6813  067D  3001               	movlw	1
  6814  067E  0187               	clrf	7
  6815  067F  0781               	addwf	1,f
  6816  0680  3141               	addfsr 1,1
  6817  0681  0008               	return
  6818  0682                     __end_ofPL22:	
  6819  0682                     PL24:	
  6820  0682  3E24               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
  6821  0683  0086               	movwf	6
  6822  0684  3000               	movlw	0
  6823  0685  0187               	clrf	7
  6824  0686  3FC0               	movwi [0]fsr1
  6825  0687  3FC1               	movwi [1]fsr1
  6826  0688  3402               	retlw	2
  6827  0689                     __end_ofPL24:	
  6828  0689                     PL28:	
  6829  0689  0081               	movwf	1
  6830  068A  3020               	movlw	32
  6831  068B  0ABF               	incf	_txHead,f
  6832  068C  023F               	subwf	_txHead,w
  6833  068D  1803               	btfsc	3,0
  6834  068E  01BF               	clrf	_txHead
  6835  068F  03C0               	decf	_txRemain,f
  6836  0690  0008               	return
  6837  0691                     __end_ofPL28:	
  6838  0691                     PL30:	
  6839  0691  0086               	movwf	6
  6840  0692  0187               	clrf	7
  6841  0693  3F40               	moviw [0]fsr1
  6842  0694  00F8               	movwf	??_Led_DynamicCloud
  6843  0695  3F41               	moviw [1]fsr1
  6844  0696  00F9               	movwf	??_Led_DynamicCloud+1
  6845  0697  3548               	lslf	Led_DynamicCloud@i,w
  6846  0698  0008               	return
  6847  0699                     __end_ofPL30:	
  6848  0699                     PL32:	
  6849  0699  0086               	movwf	6
  6850  069A  0187               	clrf	7
  6851  069B  3F40               	moviw [0]fsr1
  6852  069C  00F8               	movwf	??_Led_DynamicStorm
  6853  069D  3F41               	moviw [1]fsr1
  6854  069E  00F9               	movwf	??_Led_DynamicStorm+1
  6855  069F  3548               	lslf	Led_DynamicStorm@i,w
  6856  06A0  0008               	return
  6857  06A1                     __end_ofPL32:	
  6858  06A1                     PL34:	
  6859  06A1  300A               	movlw	10
  6860  06A2  00F0               	movwf	Util_DecValue@min
  6861  06A3  30C8               	movlw	200
  6862  06A4  01F1               	clrf	Util_DecValue@min+1
  6863  06A5  00F2               	movwf	Util_DecValue@delta
  6864  06A6  0008               	return
  6865  06A7                     __end_ofPL34:	
  6866  06A7                     PL36:	
  6867  06A7  1211               	bcf	17,4	;volatile
  6868  06A8  0020               	movlb	0	; select bank0
  6869  06A9  083F               	movf	_txHead,w
  6870  06AA  3EA0               	addlw	(low (_txBuf| 0))& (0+255)
  6871  06AB  0086               	movwf	6
  6872  06AC  0187               	clrf	7
  6873  06AD  0008               	return
  6874  06AE                     __end_ofPL36:	
  6875                           
  6876                           	psect	bssBANK0
  6877  0020                     __pbssBANK0:	
  6878  0020                     _gLedRunPara:	
  6879  0020                     	ds	9
  6880  0029                     Key_Scan@idleCount:	
  6881  0029                     	ds	2
  6882  002B                     _key_idle_cb:	
  6883  002B                     	ds	2
  6884  002D                     _key_press_cb:	
  6885  002D                     	ds	2
  6886  002F                     Audio_GetValue@cnt:	
  6887  002F                     	ds	2
  6888  0031                     Audio_GetValue@min:	
  6889  0031                     	ds	2
  6890  0033                     Audio_GetValue@max:	
  6891  0033                     	ds	2
  6892  0035                     _audio_value:	
  6893  0035                     	ds	2
  6894  0037                     _tmr2_isr_handler:	
  6895  0037                     	ds	2
  6896  0039                     _adc_result:	
  6897  0039                     	ds	2
  6898  003B                     Key_Scan@rptCount:	
  6899  003B                     	ds	1
  6900  003C                     Key_Scan@lastKey:	
  6901  003C                     	ds	1
  6902  003D                     _keyValue:	
  6903  003D                     	ds	1
  6904  003E                     Led_Run@cnt:	
  6905  003E                     	ds	1
  6906  003F                     _txHead:	
  6907  003F                     	ds	1
  6908  0040                     _txRemain:	
  6909  0040                     	ds	1
  6910  0041                     _txTail:	
  6911  0041                     	ds	1
  6912                           
  6913                           	psect	dataBANK0
  6914  0055                     __pdataBANK0:	
  6915  0055                     Led_DynamicStorm@F4469:	
  6916  0055                     	ds	4
  6917  0059                     Led_DynamicCloud@F4458:	
  6918  0059                     	ds	4
  6919  005D                     _loadDuty:	
  6920  005D                     	ds	4
  6921                           
  6922                           	psect	bssBANK1
  6923  00A0                     __pbssBANK1:	
  6924  00A0                     _txBuf:	
  6925  00A0                     	ds	32
  6926  00C0                     _gLedPara:	
  6927  00C0                     	ds	32
  6928                           
  6929                           	psect	clrtext
  6930  0F6B                     clear_ram0:	
  6931                           ;	Called with FSR0 containing the base address, and
  6932                           ;	WREG with the size to clear
  6933                           
  6934  0F6B  0064               	clrwdt	;clear the watchdog before getting into this loop
  6935  0F6C                     clrloop0:	
  6936  0F6C  0180               	clrf	0	;clear RAM location pointed to by FSR
  6937  0F6D  3101               	addfsr 0,1
  6938  0F6E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6939  0F6F  2F6C               	goto	clrloop0	;have we reached the end yet?
  6940  0F70  3400               	retlw	0	;all done for this memory range, return
  6941                           
  6942                           	psect	cstackCOMMON
  6943  0070                     __pcstackCOMMON:	
  6944  0070                     ?_Led_TurnOffRamp:	
  6945  0070                     ?_Led_TurnOnAllRamp:	
  6946                           ; 1 bytes @ 0x0
  6947                           
  6948  0070                     ?_Led_TurnOnWhiteRamp:	
  6949                           ; 1 bytes @ 0x0
  6950                           
  6951  0070                     ?_Led_TurnOnBlueRamp:	
  6952                           ; 1 bytes @ 0x0
  6953                           
  6954  0070                     ?_Util_IncValue:	
  6955                           ; 1 bytes @ 0x0
  6956                           
  6957  0070                     ?_Util_DecValue:	
  6958                           ; 1 bytes @ 0x0
  6959                           
  6960  0070                     ?_Key_Scan:	
  6961                           ; 1 bytes @ 0x0
  6962                           
  6963  0070                     ?_SYSTEM_Initialize:	
  6964                           ; 1 bytes @ 0x0
  6965                           
  6966  0070                     ?_Interrupt_Initialize:	
  6967                           ; 1 bytes @ 0x0
  6968                           
  6969  0070                     ?_ADC_Initialize_Default:	
  6970                           ; 1 bytes @ 0x0
  6971                           
  6972  0070                     ?_EUSART_Initialize_Default:	
  6973                           ; 1 bytes @ 0x0
  6974                           
  6975  0070                     ?_EUSART_Write:	
  6976                           ; 1 bytes @ 0x0
  6977                           
  6978  0070                     ?_EUSART_Transmit_ISR:	
  6979                           ; 1 bytes @ 0x0
  6980                           
  6981  0070                     ??_EUSART_Transmit_ISR:	
  6982                           ; 1 bytes @ 0x0
  6983                           
  6984  0070                     ?_PWM1_Initialize:	
  6985                           ; 1 bytes @ 0x0
  6986                           
  6987  0070                     ?_PWM1_LoadDutyValue:	
  6988                           ; 1 bytes @ 0x0
  6989                           
  6990  0070                     ?_PWM2_Initialize:	
  6991                           ; 1 bytes @ 0x0
  6992                           
  6993  0070                     ?_PWM3_Initialize:	
  6994                           ; 1 bytes @ 0x0
  6995                           
  6996  0070                     ?_PWM3_LoadDutyValue:	
  6997                           ; 1 bytes @ 0x0
  6998                           
  6999  0070                     ?_PWM4_Initialize:	
  7000                           ; 1 bytes @ 0x0
  7001                           
  7002  0070                     ?_TMR2_Initialize_Default:	
  7003                           ; 1 bytes @ 0x0
  7004                           
  7005  0070                     ?_TMR2_StartTimer:	
  7006                           ; 1 bytes @ 0x0
  7007                           
  7008  0070                     ?_TMR2_ISR:	
  7009                           ; 1 bytes @ 0x0
  7010                           
  7011  0070                     ?_OSC_Initialize_Default:	
  7012                           ; 1 bytes @ 0x0
  7013                           
  7014  0070                     ?_Audio_StopSound:	
  7015                           ; 1 bytes @ 0x0
  7016                           
  7017  0070                     ?_Audio_SelectSound:	
  7018                           ; 1 bytes @ 0x0
  7019                           
  7020  0070                     ?_Audio_SetPlayMode:	
  7021                           ; 1 bytes @ 0x0
  7022                           
  7023  0070                     ?_Audio_SetVolume:	
  7024                           ; 1 bytes @ 0x0
  7025                           
  7026  0070                     ?_Audio_GetValue:	
  7027                           ; 1 bytes @ 0x0
  7028                           
  7029  0070                     ?_Led_InitPara:	
  7030                           ; 1 bytes @ 0x0
  7031                           
  7032  0070                     ?_Audio_Initialize:	
  7033                           ; 1 bytes @ 0x0
  7034                           
  7035  0070                     ?_Led_Initialize:	
  7036                           ; 1 bytes @ 0x0
  7037                           
  7038  0070                     ?_Led_SaveParaIfChanged:	
  7039                           ; 1 bytes @ 0x0
  7040                           
  7041  0070                     ?_Led_Ramp:	
  7042                           ; 1 bytes @ 0x0
  7043                           
  7044  0070                     ?_Led_RunMusic:	
  7045                           ; 1 bytes @ 0x0
  7046                           
  7047  0070                     ?_Led_Run:	
  7048                           ; 1 bytes @ 0x0
  7049                           
  7050  0070                     ?_main:	
  7051                           ; 1 bytes @ 0x0
  7052                           
  7053  0070                     ?_ISR:	
  7054                           ; 1 bytes @ 0x0
  7055                           
  7056  0070                     ?_PIN_Initialize:	
  7057                           ; 1 bytes @ 0x0
  7058                           
  7059  0070                     ?_Key_Read:	
  7060                           ; 1 bytes @ 0x0
  7061                           
  7062  0070                     ?i1_EUSART_Write:	
  7063                           ; 1 bytes @ 0x0
  7064                           
  7065  0070                     ??i1_EUSART_Write:	
  7066                           ; 1 bytes @ 0x0
  7067                           
  7068  0070                     ?i1_Audio_StopSound:	
  7069                           ; 1 bytes @ 0x0
  7070                           
  7071  0070                     ?i1_Audio_SetVolume:	
  7072                           ; 1 bytes @ 0x0
  7073                           
  7074  0070                     ?i1_Led_Initialize:	
  7075                           ; 1 bytes @ 0x0
  7076                           
  7077  0070                     ?i1_Led_TurnOnAllRamp:	
  7078                           ; 1 bytes @ 0x0
  7079                           
  7080  0070                     ??i1_Led_TurnOnAllRamp:	
  7081                           ; 1 bytes @ 0x0
  7082                           
  7083  0070                     ?i1_Led_TurnOnWhiteRamp:	
  7084                           ; 1 bytes @ 0x0
  7085                           
  7086  0070                     ??i1_Led_TurnOnWhiteRamp:	
  7087                           ; 1 bytes @ 0x0
  7088                           
  7089  0070                     ?i1_Led_TurnOnBlueRamp:	
  7090                           ; 1 bytes @ 0x0
  7091                           
  7092  0070                     ??i1_Led_TurnOnBlueRamp:	
  7093                           ; 1 bytes @ 0x0
  7094                           
  7095  0070                     ?i1_Led_TurnOffRamp:	
  7096                           ; 1 bytes @ 0x0
  7097                           
  7098  0070                     ??i1_Led_TurnOffRamp:	
  7099                           ; 1 bytes @ 0x0
  7100                           
  7101  0070                     ?i1_ADC_Conversion:	
  7102                           ; 1 bytes @ 0x0
  7103                           
  7104  0070                     ?i1___wmul:	
  7105                           ; 2 bytes @ 0x0
  7106                           
  7107  0070                     i1EUSART_Write@byte:	
  7108                           ; 2 bytes @ 0x0
  7109                           
  7110  0070                     i1Led_TurnOnAllRamp@i:	
  7111                           ; 1 bytes @ 0x0
  7112                           
  7113  0070                     i1Led_TurnOffRamp@i:	
  7114                           ; 1 bytes @ 0x0
  7115                           
  7116  0070                     PWM1_LoadDutyValue@dutyValue:	
  7117                           ; 1 bytes @ 0x0
  7118                           
  7119  0070                     PWM3_LoadDutyValue@dutyValue:	
  7120                           ; 2 bytes @ 0x0
  7121                           
  7122  0070                     Util_IncValue@max:	
  7123                           ; 2 bytes @ 0x0
  7124                           
  7125  0070                     Util_DecValue@min:	
  7126                           ; 2 bytes @ 0x0
  7127                           
  7128  0070                     i1___wmul@multiplier:	
  7129                           ; 2 bytes @ 0x0
  7130                           
  7131                           
  7132                           ; 2 bytes @ 0x0
  7133  0070                     	ds	1
  7134  0071                     ??_Audio_SelectSound:	
  7135  0071                     ??i1_Audio_StopSound:	
  7136                           ; 1 bytes @ 0x1
  7137                           
  7138  0071                     ??i1_Audio_SetVolume:	
  7139                           ; 1 bytes @ 0x1
  7140                           
  7141  0071                     ??i1_Led_Initialize:	
  7142                           ; 1 bytes @ 0x1
  7143                           
  7144  0071                     Audio_SelectSound@index:	
  7145                           ; 1 bytes @ 0x1
  7146                           
  7147  0071                     i1Audio_StopSound@checksum:	
  7148                           ; 1 bytes @ 0x1
  7149                           
  7150  0071                     i1Audio_SetVolume@vol:	
  7151                           ; 1 bytes @ 0x1
  7152                           
  7153                           
  7154                           ; 1 bytes @ 0x1
  7155  0071                     	ds	1
  7156  0072                     ??_PWM1_LoadDutyValue:	
  7157  0072                     ??_PWM3_LoadDutyValue:	
  7158                           ; 1 bytes @ 0x2
  7159                           
  7160  0072                     ??i1_ADC_Conversion:	
  7161                           ; 1 bytes @ 0x2
  7162                           
  7163  0072                     Audio_SelectSound@checksum:	
  7164                           ; 1 bytes @ 0x2
  7165                           
  7166  0072                     i1Audio_SetVolume@checksum:	
  7167                           ; 1 bytes @ 0x2
  7168                           
  7169  0072                     Util_IncValue@delta:	
  7170                           ; 1 bytes @ 0x2
  7171                           
  7172  0072                     Util_DecValue@delta:	
  7173                           ; 2 bytes @ 0x2
  7174                           
  7175  0072                     i1___wmul@multiplicand:	
  7176                           ; 2 bytes @ 0x2
  7177                           
  7178                           
  7179                           ; 2 bytes @ 0x2
  7180  0072                     	ds	1
  7181  0073                     i1ADC_Conversion@chn:	
  7182                           
  7183                           ; 1 bytes @ 0x3
  7184  0073                     	ds	1
  7185  0074                     ??_Util_IncValue:	
  7186  0074                     ??_Util_DecValue:	
  7187                           ; 1 bytes @ 0x4
  7188                           
  7189  0074                     ??_Led_Ramp:	
  7190                           ; 1 bytes @ 0x4
  7191                           
  7192  0074                     ??_Key_Read:	
  7193                           ; 1 bytes @ 0x4
  7194                           
  7195  0074                     ??i1___wmul:	
  7196                           ; 1 bytes @ 0x4
  7197                           
  7198  0074                     Key_Read@value:	
  7199                           ; 1 bytes @ 0x4
  7200                           
  7201  0074                     i1___wmul@product:	
  7202                           ; 2 bytes @ 0x4
  7203                           
  7204                           
  7205                           ; 2 bytes @ 0x4
  7206  0074                     	ds	2
  7207  0076                     ?_Led_DynamicCloud:	
  7208  0076                     ?_Led_DynamicStorm:	
  7209                           ; 1 bytes @ 0x6
  7210                           
  7211  0076                     Led_DynamicCloud@ptp:	
  7212                           ; 1 bytes @ 0x6
  7213                           
  7214  0076                     Led_DynamicStorm@ptp:	
  7215                           ; 2 bytes @ 0x6
  7216                           
  7217                           
  7218                           ; 2 bytes @ 0x6
  7219  0076                     	ds	2
  7220  0078                     ??_Led_DynamicCloud:	
  7221  0078                     ??_Led_DynamicStorm:	
  7222                           ; 1 bytes @ 0x8
  7223                           
  7224  0078                     Util_IncValue@pSrc:	
  7225                           ; 1 bytes @ 0x8
  7226                           
  7227  0078                     Util_DecValue@pSrc:	
  7228                           ; 1 bytes @ 0x8
  7229                           
  7230                           
  7231                           ; 1 bytes @ 0x8
  7232  0078                     	ds	1
  7233  0079                     ?_Led_OnKeyPressed:	
  7234  0079                     Led_OnKeyPressed@key:	
  7235                           ; 1 bytes @ 0x9
  7236                           
  7237                           
  7238                           ; 1 bytes @ 0x9
  7239  0079                     	ds	1
  7240  007A                     ??_Led_OnKeyPressed:	
  7241  007A                     Led_Ramp@i:	
  7242                           ; 1 bytes @ 0xA
  7243                           
  7244                           
  7245                           ; 1 bytes @ 0xA
  7246  007A                     	ds	1
  7247  007B                     _Led_OnKeyPressed$610:	
  7248                           
  7249                           ; 2 bytes @ 0xB
  7250  007B                     	ds	1
  7251  007C                     ??_Led_RunMusic:	
  7252                           
  7253                           ; 1 bytes @ 0xC
  7254  007C                     	ds	1
  7255  007D                     ??_Key_Scan:	
  7256  007D                     Key_Scan@keyNum:	
  7257                           ; 1 bytes @ 0xD
  7258                           
  7259                           
  7260                           ; 1 bytes @ 0xD
  7261  007D                     	ds	1
  7262  007E                     ??_TMR2_ISR:	
  7263  007E                     ??_Led_Run:	
  7264                           ; 1 bytes @ 0xE
  7265                           
  7266  007E                     ??_ISR:	
  7267                           ; 1 bytes @ 0xE
  7268                           
  7269                           
  7270                           	psect	cstackBANK0
  7271  0042                     __pcstackBANK0:	
  7272                           ; 1 bytes @ 0xE
  7273                           
  7274  0042                     Led_DynamicCloud@val:	
  7275  0042                     Led_DynamicStorm@duty:	
  7276                           ; 2 bytes @ 0x0
  7277                           
  7278                           
  7279                           ; 4 bytes @ 0x0
  7280  0042                     	ds	2
  7281  0044                     Led_DynamicCloud@duty:	
  7282                           
  7283                           ; 4 bytes @ 0x2
  7284  0044                     	ds	2
  7285  0046                     Led_DynamicStorm@val:	
  7286                           
  7287                           ; 2 bytes @ 0x4
  7288  0046                     	ds	2
  7289  0048                     Led_DynamicCloud@i:	
  7290  0048                     Led_DynamicStorm@i:	
  7291                           ; 1 bytes @ 0x6
  7292                           
  7293                           
  7294                           ; 1 bytes @ 0x6
  7295  0048                     	ds	1
  7296  0049                     ?_FLASH_ReadByte:	
  7297  0049                     ??_Led_TurnOffRamp:	
  7298                           ; 1 bytes @ 0x7
  7299                           
  7300  0049                     ??_Led_TurnOnAllRamp:	
  7301                           ; 1 bytes @ 0x7
  7302                           
  7303  0049                     ??_Led_TurnOnWhiteRamp:	
  7304                           ; 1 bytes @ 0x7
  7305                           
  7306  0049                     ??_Led_TurnOnBlueRamp:	
  7307                           ; 1 bytes @ 0x7
  7308                           
  7309  0049                     ??_SYSTEM_Initialize:	
  7310                           ; 1 bytes @ 0x7
  7311                           
  7312  0049                     ?_Key_SetActionHandler:	
  7313                           ; 1 bytes @ 0x7
  7314                           
  7315  0049                     ??_ADC_Initialize_Default:	
  7316                           ; 1 bytes @ 0x7
  7317                           
  7318  0049                     ??_EUSART_Initialize_Default:	
  7319                           ; 1 bytes @ 0x7
  7320                           
  7321  0049                     ??_EUSART_Write:	
  7322                           ; 1 bytes @ 0x7
  7323                           
  7324  0049                     ??_PWM1_Initialize:	
  7325                           ; 1 bytes @ 0x7
  7326                           
  7327  0049                     ??_PWM2_Initialize:	
  7328                           ; 1 bytes @ 0x7
  7329                           
  7330  0049                     ??_PWM3_Initialize:	
  7331                           ; 1 bytes @ 0x7
  7332                           
  7333  0049                     ??_PWM4_Initialize:	
  7334                           ; 1 bytes @ 0x7
  7335                           
  7336  0049                     ??_TMR2_Initialize_Default:	
  7337                           ; 1 bytes @ 0x7
  7338                           
  7339  0049                     ??_TMR2_StartTimer:	
  7340                           ; 1 bytes @ 0x7
  7341                           
  7342  0049                     ?_TMR2_SetInterruptHandler:	
  7343                           ; 1 bytes @ 0x7
  7344                           
  7345  0049                     ?_FLASH_EraseBlock:	
  7346                           ; 1 bytes @ 0x7
  7347                           
  7348  0049                     ??_OSC_Initialize_Default:	
  7349                           ; 1 bytes @ 0x7
  7350                           
  7351  0049                     ??_PIN_Initialize:	
  7352                           ; 1 bytes @ 0x7
  7353                           
  7354  0049                     ?_ADC_Conversion:	
  7355                           ; 1 bytes @ 0x7
  7356                           
  7357  0049                     ?___wmul:	
  7358                           ; 2 bytes @ 0x7
  7359                           
  7360  0049                     EUSART_Write@byte:	
  7361                           ; 2 bytes @ 0x7
  7362                           
  7363  0049                     Led_TurnOnAllRamp@i:	
  7364                           ; 1 bytes @ 0x7
  7365                           
  7366  0049                     Led_TurnOffRamp@i:	
  7367                           ; 1 bytes @ 0x7
  7368                           
  7369  0049                     TMR2_SetInterruptHandler@handler:	
  7370                           ; 1 bytes @ 0x7
  7371                           
  7372  0049                     FLASH_EraseBlock@addr:	
  7373                           ; 2 bytes @ 0x7
  7374                           
  7375  0049                     FLASH_ReadByte@addr:	
  7376                           ; 2 bytes @ 0x7
  7377                           
  7378  0049                     Key_SetActionHandler@handler:	
  7379                           ; 2 bytes @ 0x7
  7380                           
  7381  0049                     ___wmul@multiplier:	
  7382                           ; 2 bytes @ 0x7
  7383                           
  7384                           
  7385                           ; 2 bytes @ 0x7
  7386  0049                     	ds	1
  7387  004A                     ??_Audio_StopSound:	
  7388  004A                     ??_Audio_SetPlayMode:	
  7389                           ; 1 bytes @ 0x8
  7390                           
  7391  004A                     ??_Audio_SetVolume:	
  7392                           ; 1 bytes @ 0x8
  7393                           
  7394  004A                     ??_Led_Initialize:	
  7395                           ; 1 bytes @ 0x8
  7396                           
  7397  004A                     Audio_StopSound@checksum:	
  7398                           ; 1 bytes @ 0x8
  7399                           
  7400  004A                     Audio_SetPlayMode@type:	
  7401                           ; 1 bytes @ 0x8
  7402                           
  7403  004A                     Audio_SetVolume@vol:	
  7404                           ; 1 bytes @ 0x8
  7405                           
  7406                           
  7407                           ; 1 bytes @ 0x8
  7408  004A                     	ds	1
  7409  004B                     ??_FLASH_ReadByte:	
  7410  004B                     ??_Interrupt_Initialize:	
  7411                           ; 1 bytes @ 0x9
  7412                           
  7413  004B                     ??_Key_SetActionHandler:	
  7414                           ; 1 bytes @ 0x9
  7415                           
  7416  004B                     ??_ADC_Conversion:	
  7417                           ; 1 bytes @ 0x9
  7418                           
  7419  004B                     ??_TMR2_SetInterruptHandler:	
  7420                           ; 1 bytes @ 0x9
  7421                           
  7422  004B                     ??_FLASH_EraseBlock:	
  7423                           ; 1 bytes @ 0x9
  7424                           
  7425  004B                     FLASH_EraseBlock@state:	
  7426                           ; 1 bytes @ 0x9
  7427                           
  7428  004B                     FLASH_ReadByte@state:	
  7429                           ; 1 bytes @ 0x9
  7430                           
  7431  004B                     Audio_SetPlayMode@checksum:	
  7432                           ; 1 bytes @ 0x9
  7433                           
  7434  004B                     Audio_SetVolume@checksum:	
  7435                           ; 1 bytes @ 0x9
  7436                           
  7437  004B                     ___wmul@multiplicand:	
  7438                           ; 1 bytes @ 0x9
  7439                           
  7440                           
  7441                           ; 2 bytes @ 0x9
  7442  004B                     	ds	1
  7443  004C                     ?_FLASH_WriteBlock:	
  7444  004C                     ?_FLASH_ReadBuffer:	
  7445                           ; 1 bytes @ 0xA
  7446                           
  7447  004C                     ??_Audio_Initialize:	
  7448                           ; 1 bytes @ 0xA
  7449                           
  7450  004C                     ADC_Conversion@chn:	
  7451                           ; 1 bytes @ 0xA
  7452                           
  7453  004C                     FLASH_WriteBlock@addr:	
  7454                           ; 1 bytes @ 0xA
  7455                           
  7456  004C                     FLASH_ReadBuffer@addr:	
  7457                           ; 2 bytes @ 0xA
  7458                           
  7459                           
  7460                           ; 2 bytes @ 0xA
  7461  004C                     	ds	1
  7462  004D                     ??___wmul:	
  7463  004D                     ___wmul@product:	
  7464                           ; 1 bytes @ 0xB
  7465                           
  7466                           
  7467                           ; 2 bytes @ 0xB
  7468  004D                     	ds	1
  7469  004E                     FLASH_WriteBlock@buf:	
  7470  004E                     FLASH_ReadBuffer@size:	
  7471                           ; 1 bytes @ 0xC
  7472                           
  7473  004E                     _Audio_Initialize$595:	
  7474                           ; 1 bytes @ 0xC
  7475                           
  7476                           
  7477                           ; 2 bytes @ 0xC
  7478  004E                     	ds	1
  7479  004F                     ??_FLASH_WriteBlock:	
  7480  004F                     ??_FLASH_ReadBuffer:	
  7481                           ; 1 bytes @ 0xD
  7482                           
  7483  004F                     ??_Audio_GetValue:	
  7484                           ; 1 bytes @ 0xD
  7485                           
  7486                           
  7487                           ; 1 bytes @ 0xD
  7488  004F                     	ds	1
  7489  0050                     FLASH_WriteBlock@state:	
  7490  0050                     FLASH_ReadBuffer@buf:	
  7491                           ; 1 bytes @ 0xE
  7492                           
  7493                           
  7494                           ; 1 bytes @ 0xE
  7495  0050                     	ds	1
  7496  0051                     FLASH_ReadBuffer@i:	
  7497  0051                     FLASH_WriteBlock@start_addr:	
  7498                           ; 1 bytes @ 0xF
  7499                           
  7500                           
  7501                           ; 2 bytes @ 0xF
  7502  0051                     	ds	1
  7503  0052                     ??_Led_InitPara:	
  7504                           
  7505                           ; 1 bytes @ 0x10
  7506  0052                     	ds	1
  7507  0053                     FLASH_WriteBlock@i:	
  7508  0053                     Audio_GetValue@value:	
  7509                           ; 1 bytes @ 0x11
  7510                           
  7511                           
  7512                           ; 2 bytes @ 0x11
  7513  0053                     	ds	1
  7514  0054                     ??_Led_SaveParaIfChanged:	
  7515                           
  7516                           ; 1 bytes @ 0x12
  7517  0054                     	ds	1
  7518  0055                     ??_main:	
  7519                           
  7520                           	psect	intentry
  7521  0004                     __pintentry:	
  7522 ;; *************** function _ISR *****************
  7523 ;; Defined at:
  7524 ;;		line 47 in file "user/src/main.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  1    wreg      void 
  7531 ;; Registers used:
  7532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7538 ;;      Params:         0       0       0       0
  7539 ;;      Locals:         0       0       0       0
  7540 ;;      Temps:          0       0       0       0
  7541 ;;      Totals:         0       0       0       0
  7542 ;;Total ram usage:        0 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    6
  7545 ;; This function calls:
  7546 ;;		_EUSART_Transmit_ISR
  7547 ;;		_TMR2_ISR
  7548 ;; This function is called by:
  7549 ;;		Interrupt level 1
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553  0004                     _ISR:	
  7554                           
  7555                           ;incstack = 0
  7556  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7557                           
  7558                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7559  0005  3180               	pagesel	$
  7560                           
  7561                           ;main.c: 48: if (PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
  7562  0006  0021               	movlb	1	; select bank1
  7563  0007  1C91               	btfss	17,1	;volatile
  7564  0008  2810               	goto	i1l593
  7565  0009  0020               	movlb	0	; select bank0
  7566  000A  1C91               	btfss	17,1	;volatile
  7567  000B  2810               	goto	i1l593
  7568                           
  7569                           ;main.c: 49: TMR2_ISR();
  7570  000C  3187  27F2  3180   	fcall	_TMR2_ISR
  7571                           
  7572                           ;main.c: 50: } else if (PIE1bits.TXIE && PIR1bits.TXIF) {
  7573  000F  2818               	goto	i1l596
  7574  0010                     i1l593:	
  7575  0010  0021               	movlb	1	; select bank1
  7576  0011  1E11               	btfss	17,4	;volatile
  7577  0012  2818               	goto	i1l596
  7578  0013  0020               	movlb	0	; select bank0
  7579  0014  1E11               	btfss	17,4	;volatile
  7580  0015  2818               	goto	i1l596
  7581                           
  7582                           ;main.c: 51: EUSART_Transmit_ISR();
  7583  0016  3187  27CD         	fcall	_EUSART_Transmit_ISR
  7584  0018                     i1l596:	
  7585  0018  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7586  0019  0009               	retfie
  7587  001A                     __end_of_ISR:	
  7588                           
  7589                           	psect	text35
  7590  07F2                     __ptext35:	
  7591 ;; *************** function _TMR2_ISR *****************
  7592 ;; Defined at:
  7593 ;;		line 24 in file "driver/src/tmr2.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;		None
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;		None
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      void 
  7600 ;; Registers used:
  7601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 1F/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7607 ;;      Params:         0       0       0       0
  7608 ;;      Locals:         0       0       0       0
  7609 ;;      Temps:          0       0       0       0
  7610 ;;      Totals:         0       0       0       0
  7611 ;;Total ram usage:        0 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    5
  7614 ;; This function calls:
  7615 ;;		Absolute function
  7616 ;;		_Led_Run
  7617 ;; This function is called by:
  7618 ;;		_ISR
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           
  7623                           ;psect for function _TMR2_ISR
  7624  07F2                     _TMR2_ISR:	
  7625                           
  7626                           ;tmr2.c: 25: PIR1bits.TMR2IF = 0;
  7627                           
  7628                           ;incstack = 0
  7629                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7630  07F2  1091               	bcf	17,1	;volatile
  7631                           
  7632                           ;tmr2.c: 26: if (tmr2_isr_handler) {
  7633  07F3  0837               	movf	_tmr2_isr_handler,w
  7634  07F4  0438               	iorwf	_tmr2_isr_handler+1,w
  7635  07F5  1903               	btfsc	3,2
  7636  07F6  0008               	return
  7637                           
  7638                           ;tmr2.c: 27: tmr2_isr_handler();
  7639  07F7  0838               	movf	_tmr2_isr_handler+1,w
  7640  07F8  008A               	movwf	10
  7641  07F9  0837               	movf	_tmr2_isr_handler,w
  7642  07FA  000A               	callw
  7643  07FB  3187               	pagesel	$
  7644  07FC  0008               	return
  7645  07FD                     __end_of_TMR2_ISR:	
  7646                           
  7647                           	psect	text36
  7648  06AE                     __ptext36:	
  7649 ;; *************** function _Led_Run *****************
  7650 ;; Defined at:
  7651 ;;		line 269 in file "user/src/led.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;		None
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;		None
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  1    wreg      void 
  7658 ;; Registers used:
  7659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 1F/0
  7662 ;;		On exit  : 12/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7665 ;;      Params:         0       0       0       0
  7666 ;;      Locals:         0       0       0       0
  7667 ;;      Temps:          0       0       0       0
  7668 ;;      Totals:         0       0       0       0
  7669 ;;Total ram usage:        0 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    4
  7672 ;; This function calls:
  7673 ;;		_Key_Scan
  7674 ;;		_Led_Ramp
  7675 ;;		_Led_RunMusic
  7676 ;; This function is called by:
  7677 ;;		_Interrupt_Initialize
  7678 ;;		_TMR2_ISR
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           
  7683                           ;psect for function _Led_Run
  7684  06AE                     _Led_Run:	
  7685                           
  7686                           ;led.c: 270: static uint8_t cnt = 0;
  7687                           ;led.c: 271: cnt++;
  7688                           
  7689                           ;incstack = 0
  7690                           ; Regs used in _Led_Run: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7691  06AE  0ABE               	incf	Led_Run@cnt,f
  7692                           
  7693                           ;led.c: 272: if ((cnt & 0x0F) == 0x00) {
  7694  06AF  083E               	movf	Led_Run@cnt,w
  7695  06B0  390F               	andlw	15
  7696  06B1  1D03               	btfss	3,2
  7697  06B2  2EB5               	goto	i1l2728
  7698                           
  7699                           ;led.c: 273: Key_Scan();
  7700  06B3  26BB  3186         	fcall	_Key_Scan
  7701  06B5                     i1l2728:	
  7702                           
  7703                           ;led.c: 274: }
  7704                           ;led.c: 275: if (gLedPara.mOn) {
  7705  06B5  0021               	movlb	1	; select bank1
  7706  06B6  1C40               	btfss	_gLedPara^(0+128),0	;volatile
  7707  06B7  2EBA               	goto	i1l2732
  7708                           
  7709                           ;led.c: 276: Led_RunMusic();
  7710  06B8  3183  2B6F         	ljmp	i1l2460
  7711  06BA                     i1l2732:	
  7712                           ;led.c: 277: } else {
  7713                           
  7714                           
  7715                           ;led.c: 278: Led_Ramp();
  7716  06BA  2F76               	ljmp	i1l2258
  7717  06BB                     __end_of_Led_Run:	
  7718  06BB                     __ptext45:	
  7719 ;; *************** function _Key_Scan *****************
  7720 ;; Defined at:
  7721 ;;		line 24 in file "user/src/key.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;		None
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;  keyNum          1   13[COMMON] unsigned char 
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      void 
  7728 ;; Registers used:
  7729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7730 ;; Tracked objects:
  7731 ;;		On entry : 1F/0
  7732 ;;		On exit  : 1F/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7735 ;;      Params:         0       0       0       0
  7736 ;;      Locals:         1       0       0       0
  7737 ;;      Temps:          0       0       0       0
  7738 ;;      Totals:         1       0       0       0
  7739 ;;Total ram usage:        1 bytes
  7740 ;; Hardware stack levels used:    1
  7741 ;; Hardware stack levels required when called:    3
  7742 ;; This function calls:
  7743 ;;		Absolute function
  7744 ;;		_Key_Read
  7745 ;;		_Led_OnKeyPressed
  7746 ;; This function is called by:
  7747 ;;		_Led_Run
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           
  7752                           ;psect for function _Key_Scan
  7753  06BB                     _Key_Scan:	
  7754                           
  7755                           ;key.c: 25: static uint8_t lastKey = 0x00;
  7756                           ;key.c: 26: static uint8_t rptCount = 0;
  7757                           ;key.c: 27: static uint16_t idleCount = 0;
  7758                           ;key.c: 28: uint8_t keyNum = Key_Read();
  7759                           
  7760                           ;incstack = 0
  7761                           ; Regs used in _Key_Scan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7762  06BB  2714  3186         	fcall	_Key_Read
  7763  06BD  00FD               	movwf	Key_Scan@keyNum
  7764                           
  7765                           ;key.c: 30: if (keyNum != 0x00) {
  7766  06BE  087D               	movf	Key_Scan@keyNum,w
  7767  06BF  1903               	btfsc	3,2
  7768  06C0  2EE4               	goto	i1l2508
  7769                           
  7770                           ;key.c: 31: idleCount = 0;
  7771  06C1  0020               	movlb	0	; select bank0
  7772  06C2  01A9               	clrf	Key_Scan@idleCount
  7773  06C3  01AA               	clrf	Key_Scan@idleCount+1
  7774                           
  7775                           ;key.c: 32: if (keyNum == lastKey) {
  7776  06C4  087D               	movf	Key_Scan@keyNum,w
  7777  06C5  063C               	xorwf	Key_Scan@lastKey,w
  7778  06C6  1D03               	skipz
  7779  06C7  2EE2               	goto	i1l2506
  7780                           
  7781                           ;key.c: 33: if (rptCount < 128) {
  7782  06C8  3080               	movlw	128
  7783  06C9  023B               	subwf	Key_Scan@rptCount,w
  7784  06CA  1803               	skipnc
  7785  06CB  2ECE               	goto	i1l2496
  7786                           
  7787                           ;key.c: 34: rptCount++;
  7788  06CC  0ABB               	incf	Key_Scan@rptCount,f
  7789                           
  7790                           ;key.c: 35: } else if (rptCount == 128) {
  7791  06CD  2F10               	goto	i1l2532
  7792  06CE                     i1l2496:	
  7793  06CE  3080               	movlw	128
  7794  06CF  063B               	xorwf	Key_Scan@rptCount,w
  7795  06D0  1D03               	btfss	3,2
  7796  06D1  2F10               	goto	i1l2532
  7797                           
  7798                           ;key.c: 36: rptCount++;
  7799  06D2  0ABB               	incf	Key_Scan@rptCount,f
  7800                           
  7801                           ;key.c: 37: keyValue = keyNum | 0x80;
  7802  06D3  087D               	movf	Key_Scan@keyNum,w
  7803  06D4  3880               	iorlw	128
  7804  06D5  00BD               	movwf	_keyValue	;volatile
  7805                           
  7806                           ;key.c: 38: if (key_press_cb) {
  7807  06D6  082D               	movf	_key_press_cb,w
  7808  06D7  042E               	iorwf	_key_press_cb+1,w
  7809  06D8  1903               	btfsc	3,2
  7810  06D9  2F10               	goto	i1l2532
  7811                           
  7812                           ;key.c: 39: key_press_cb(keyValue);
  7813  06DA  083D               	movf	_keyValue,w	;volatile
  7814  06DB  00F9               	movwf	Led_OnKeyPressed@key
  7815  06DC  082E               	movf	_key_press_cb+1,w
  7816  06DD  008A               	movwf	10
  7817  06DE  082D               	movf	_key_press_cb,w
  7818  06DF  000A               	callw
  7819  06E0  3186               	pagesel	$
  7820  06E1  2F10               	goto	i1l2532
  7821  06E2                     i1l2506:	
  7822                           
  7823                           ;key.c: 43: rptCount = 0;
  7824  06E2  01BB               	clrf	Key_Scan@rptCount
  7825                           
  7826                           ;key.c: 44: }
  7827                           ;key.c: 45: } else {
  7828  06E3  2F10               	goto	i1l2532
  7829  06E4                     i1l2508:	
  7830                           
  7831                           ;key.c: 46: if (lastKey != 0x00) {
  7832  06E4  0020               	movlb	0	; select bank0
  7833  06E5  083C               	movf	Key_Scan@lastKey,w
  7834  06E6  1903               	btfsc	3,2
  7835  06E7  2EFD               	goto	i1l2520
  7836                           
  7837                           ;key.c: 47: if (rptCount > 1 && rptCount < 128) {
  7838  06E8  3002               	movlw	2
  7839  06E9  023B               	subwf	Key_Scan@rptCount,w
  7840  06EA  1C03               	skipc
  7841  06EB  2EFD               	goto	i1l2520
  7842  06EC  3080               	movlw	128
  7843  06ED  023B               	subwf	Key_Scan@rptCount,w
  7844  06EE  1803               	skipnc
  7845  06EF  2EFD               	goto	i1l2520
  7846                           
  7847                           ;key.c: 48: keyValue = lastKey;
  7848  06F0  083C               	movf	Key_Scan@lastKey,w
  7849  06F1  00BD               	movwf	_keyValue	;volatile
  7850                           
  7851                           ;key.c: 49: if (key_press_cb) {
  7852  06F2  082D               	movf	_key_press_cb,w
  7853  06F3  042E               	iorwf	_key_press_cb+1,w
  7854  06F4  1903               	btfsc	3,2
  7855  06F5  2EFD               	goto	i1l2520
  7856                           
  7857                           ;key.c: 50: key_press_cb(keyValue);
  7858  06F6  083D               	movf	_keyValue,w	;volatile
  7859  06F7  00F9               	movwf	Led_OnKeyPressed@key
  7860  06F8  082E               	movf	_key_press_cb+1,w
  7861  06F9  008A               	movwf	10
  7862  06FA  082D               	movf	_key_press_cb,w
  7863  06FB  000A               	callw
  7864  06FC  3186               	pagesel	$
  7865  06FD                     i1l2520:	
  7866                           
  7867                           ;key.c: 51: }
  7868                           ;key.c: 52: }
  7869                           ;key.c: 53: }
  7870                           ;key.c: 54: rptCount = 0;
  7871  06FD  0020               	movlb	0	; select bank0
  7872  06FE  3003               	movlw	3
  7873  06FF  01BB               	clrf	Key_Scan@rptCount
  7874                           
  7875                           ;key.c: 56: if (idleCount < 1000) {
  7876  0700  022A               	subwf	Key_Scan@idleCount+1,w
  7877  0701  30E8               	movlw	232
  7878  0702  1903               	skipnz
  7879  0703  0229               	subwf	Key_Scan@idleCount,w
  7880  0704  1C03               	btfss	3,0
  7881  0705  2F0D               	goto	i1l2524
  7882                           
  7883                           ;key.c: 58: } else if (idleCount == 1000) {
  7884  0706  30E8               	movlw	232
  7885  0707  0629               	xorwf	Key_Scan@idleCount,w
  7886  0708  3003               	movlw	3
  7887  0709  1903               	skipnz
  7888  070A  062A               	xorwf	Key_Scan@idleCount+1,w
  7889  070B  1D03               	btfss	3,2
  7890  070C  2F10               	goto	i1l2532
  7891  070D                     i1l2524:	
  7892                           
  7893                           ;key.c: 57: idleCount++;
  7894  070D  0AA9               	incf	Key_Scan@idleCount,f
  7895  070E  1903               	skipnz
  7896  070F  0AAA               	incf	Key_Scan@idleCount+1,f
  7897  0710                     i1l2532:	
  7898                           
  7899                           ;key.c: 62: }
  7900                           ;key.c: 63: }
  7901                           ;key.c: 64: }
  7902                           ;key.c: 65: lastKey = keyNum;
  7903  0710  087D               	movf	Key_Scan@keyNum,w
  7904  0711  0020               	movlb	0	; select bank0
  7905  0712  00BC               	movwf	Key_Scan@lastKey
  7906  0713  0008               	return
  7907  0714                     __end_of_Key_Scan:	
  7908  0714                     __ptext57:	
  7909 ;; *************** function _Key_Read *****************
  7910 ;; Defined at:
  7911 ;;		line 7 in file "user/src/key.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;		None
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  value           2    4[COMMON] unsigned int 
  7916 ;; Return value:  Size  Location     Type
  7917 ;;                  1    wreg      unsigned char 
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0, pclath, cstack
  7920 ;; Tracked objects:
  7921 ;;		On entry : 1F/0
  7922 ;;		On exit  : 1F/1
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7925 ;;      Params:         0       0       0       0
  7926 ;;      Locals:         2       0       0       0
  7927 ;;      Temps:          0       0       0       0
  7928 ;;      Totals:         2       0       0       0
  7929 ;;Total ram usage:        2 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; Hardware stack levels required when called:    1
  7932 ;; This function calls:
  7933 ;;		i1_ADC_Conversion
  7934 ;; This function is called by:
  7935 ;;		_Key_Scan
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           
  7940                           ;psect for function _Key_Read
  7941  0714                     _Key_Read:	
  7942                           
  7943                           ;key.c: 8: uint16_t value = ADC_Conversion(4);
  7944                           
  7945                           ;incstack = 0
  7946                           ; Regs used in _Key_Read: [wreg+status,2+status,0+pclath+cstack]
  7947  0714  3004               	movlw	4
  7948  0715  275B  3186         	fcall	i1_ADC_Conversion
  7949  0717  0871               	movf	?i1_ADC_Conversion+1,w
  7950  0718  00F5               	movwf	Key_Read@value+1
  7951  0719  0870               	movf	?i1_ADC_Conversion,w
  7952  071A  00F4               	movwf	Key_Read@value
  7953                           
  7954                           ;key.c: 9: if (value < 48) {
  7955  071B  3000               	movlw	0
  7956  071C  0275               	subwf	Key_Read@value+1,w
  7957  071D  3030               	movlw	48
  7958  071E  1903               	skipnz
  7959  071F  0274               	subwf	Key_Read@value,w
  7960  0720  1C03               	btfss	3,0
  7961                           
  7962                           ;key.c: 10: return 0x00;
  7963  0721  3400               	retlw	0
  7964  0722  3000               	movlw	0
  7965  0723  0275               	subwf	Key_Read@value+1,w
  7966  0724  3097               	movlw	151
  7967  0725  1903               	skipnz
  7968  0726  0274               	subwf	Key_Read@value,w
  7969  0727  1C03               	skipc
  7970  0728  2F30               	goto	i1l2358
  7971  0729  3000               	movlw	0
  7972  072A  0275               	subwf	Key_Read@value+1,w
  7973  072B  30FA               	movlw	250
  7974  072C  1903               	skipnz
  7975  072D  0274               	subwf	Key_Read@value,w
  7976  072E  1C03               	btfss	3,0
  7977                           
  7978                           ;key.c: 12: return 0x08;
  7979  072F  3408               	retlw	8
  7980  0730                     i1l2358:	
  7981  0730  3001               	movlw	1
  7982  0731  0275               	subwf	Key_Read@value+1,w
  7983  0732  305F               	movlw	95
  7984  0733  1903               	skipnz
  7985  0734  0274               	subwf	Key_Read@value,w
  7986  0735  1C03               	skipc
  7987  0736  2F3E               	goto	i1l2368
  7988  0737  3001               	movlw	1
  7989  0738  0275               	subwf	Key_Read@value+1,w
  7990  0739  30C2               	movlw	194
  7991  073A  1903               	skipnz
  7992  073B  0274               	subwf	Key_Read@value,w
  7993  073C  1C03               	btfss	3,0
  7994                           
  7995                           ;key.c: 14: return 0x04;
  7996  073D  3404               	retlw	4
  7997  073E                     i1l2368:	
  7998  073E  3002               	movlw	2
  7999  073F  0275               	subwf	Key_Read@value+1,w
  8000  0740  3027               	movlw	39
  8001  0741  1903               	skipnz
  8002  0742  0274               	subwf	Key_Read@value,w
  8003  0743  3002               	movlw	2
  8004  0744  1C03               	skipc
  8005  0745  2F4D               	goto	L7
  8006  0746  0275               	subwf	Key_Read@value+1,w
  8007  0747  308A               	movlw	138
  8008  0748  1903               	skipnz
  8009  0749  0274               	subwf	Key_Read@value,w
  8010                           
  8011                           ;key.c: 16: return 0x02;
  8012  074A  3002               	movlw	2
  8013  074B  1C03               	btfss	3,0
  8014  074C  0008               	return
  8015  074D                     L7:	
  8016  074D  0275               	subwf	Key_Read@value+1,w
  8017  074E  30EF               	movlw	239
  8018  074F  1903               	skipnz
  8019  0750  0274               	subwf	Key_Read@value,w
  8020  0751  1C03               	skipc
  8021  0752  3400               	retlw	0
  8022  0753  3003               	movlw	3
  8023  0754  0275               	subwf	Key_Read@value+1,w
  8024  0755  3052               	movlw	82
  8025  0756  1903               	skipnz
  8026  0757  0274               	subwf	Key_Read@value,w
  8027  0758  1C03               	btfss	3,0
  8028                           
  8029                           ;key.c: 18: return 0x01;
  8030  0759  3401               	retlw	1
  8031  075A  3400               	retlw	0
  8032  075B                     __end_of_Key_Read:	
  8033  075B                     __ptext58:	
  8034 ;; *************** function i1_ADC_Conversion *****************
  8035 ;; Defined at:
  8036 ;;		line 22 in file "driver/src/adc.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;  chn             1    wreg     unsigned char 
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;  chn             1    3[COMMON] unsigned char 
  8041 ;; Return value:  Size  Location     Type
  8042 ;;                  2    0[COMMON] unsigned int 
  8043 ;; Registers used:
  8044 ;;		wreg, status,2, status,0
  8045 ;; Tracked objects:
  8046 ;;		On entry : 1F/0
  8047 ;;		On exit  : 1F/1
  8048 ;;		Unchanged: 0/0
  8049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8050 ;;      Params:         2       0       0       0
  8051 ;;      Locals:         1       0       0       0
  8052 ;;      Temps:          1       0       0       0
  8053 ;;      Totals:         4       0       0       0
  8054 ;;Total ram usage:        4 bytes
  8055 ;; Hardware stack levels used:    1
  8056 ;; This function calls:
  8057 ;;		Nothing
  8058 ;; This function is called by:
  8059 ;;		_Key_Read
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           
  8064                           ;psect for function i1_ADC_Conversion
  8065  075B                     i1_ADC_Conversion:	
  8066                           
  8067                           ;incstack = 0
  8068                           ; Regs used in i1_ADC_Conversion: [wreg+status,2+status,0]
  8069                           ;i1ADC_Conversion@chn stored from wreg
  8070  075B  00F3               	movwf	i1ADC_Conversion@chn
  8071                           
  8072                           ;adc.c: 24: ADCON0bits.CHS = chn;
  8073  075C  00F2               	movwf	??i1_ADC_Conversion
  8074  075D  0DF2               	rlf	??i1_ADC_Conversion,f
  8075  075E  0DF2               	rlf	??i1_ADC_Conversion,f
  8076  075F  0021               	movlb	1	; select bank1
  8077  0760  081D               	movf	29,w	;volatile
  8078  0761  0672               	xorwf	??i1_ADC_Conversion,w
  8079  0762  3983               	andlw	-125
  8080  0763  0672               	xorwf	??i1_ADC_Conversion,w
  8081  0764  009D               	movwf	29	;volatile
  8082                           
  8083                           ;adc.c: 25: ADCON0bits.ADON = 1;
  8084  0765  141D               	bsf	29,0	;volatile
  8085                           
  8086                           ;adc.c: 26: _delay((unsigned long)((4)*(16000000/4000000.0)));
  8087  0766  3005               	movlw	5
  8088  0767                     u229_27:	
  8089  0767  0B89               	decfsz	9,f
  8090  0768  2F67               	goto	u229_27
  8091  0769  0000               	nop
  8092                           
  8093                           ;adc.c: 27: ADCON0bits.GO_nDONE = 1;
  8094  076A  0021               	movlb	1	; select bank1
  8095  076B  149D               	bsf	29,1	;volatile
  8096  076C                     i1l22:	
  8097                           ;adc.c: 28: while ( !PIR1bits.ADIF );
  8098                           
  8099  076C  0020               	movlb	0	; select bank0
  8100  076D  1F11               	btfss	17,6	;volatile
  8101  076E  2F6C               	goto	i1l22
  8102                           
  8103                           ;adc.c: 29: PIR1bits.ADIF = 0;
  8104  076F  1311               	bcf	17,6	;volatile
  8105                           
  8106                           ;adc.c: 30: return ADRES;
  8107  0770  0021               	movlb	1	; select bank1
  8108  0771  081C               	movf	28,w	;volatile
  8109  0772  00F1               	movwf	?i1_ADC_Conversion+1
  8110  0773  081B               	movf	27,w	;volatile
  8111  0774  00F0               	movwf	?i1_ADC_Conversion
  8112  0775  0008               	return
  8113  0776                     __end_ofi1_ADC_Conversion:	
  8114  0776                     __ptext38:	
  8115 ;; *************** function _Led_Ramp *****************
  8116 ;; Defined at:
  8117 ;;		line 193 in file "user/src/led.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;		None
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;  i               1   10[COMMON] unsigned char 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  1    wreg      void 
  8124 ;; Registers used:
  8125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 1F/1
  8128 ;;		On exit  : 1F/C
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8131 ;;      Params:         0       0       0       0
  8132 ;;      Locals:         1       0       0       0
  8133 ;;      Temps:          6       0       0       0
  8134 ;;      Totals:         7       0       0       0
  8135 ;;Total ram usage:        7 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    1
  8138 ;; This function calls:
  8139 ;;		_PWM1_LoadDutyValue
  8140 ;;		_PWM3_LoadDutyValue
  8141 ;; This function is called by:
  8142 ;;		_Led_RunMusic
  8143 ;;		_Led_Run
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           
  8148                           ;psect for function _Led_Ramp
  8149  0776                     _Led_Ramp:	
  8150  0776                     i1l2258:	
  8151                           ;incstack = 0
  8152                           ; Regs used in _Led_Ramp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8153                           
  8154                           
  8155                           ;led.c: 194: for (uint8_t i = 0; i < 2; i++) {
  8156  0776  01FA               	clrf	Led_Ramp@i
  8157  0777                     i1l2264:	
  8158                           
  8159                           ;led.c: 195: if (gLedRunPara.mCurrentBright[i] + 1 < gLedRunPara.mTargetBright[i]) {
  8160  0777  357A               	lslf	Led_Ramp@i,w
  8161  0778  3E24               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
  8162  0779  27C5  3186         	fcall	PL26	;call to abstracted procedure
  8163  077B  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  8164  077C  27B3  3186         	fcall	PL2	;call to abstracted procedure
  8165  077E  1803               	skipnc
  8166  077F  2F87               	goto	i1l2268
  8167                           
  8168                           ;led.c: 196: gLedRunPara.mCurrentBright[i] += 1;
  8169  0780  357A               	lslf	Led_Ramp@i,w
  8170  0781  3186  267B  3186   	fcall	PL22	;call to abstracted procedure
  8171  0784  1803               	skipnc
  8172  0785  0A81               	incf	1,f
  8173                           
  8174                           ;led.c: 197: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i] + 1
      +                          ) {
  8175  0786  2FA1               	goto	i1l2274
  8176  0787                     i1l2268:	
  8177  0787  357A               	lslf	Led_Ramp@i,w
  8178  0788  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  8179  0789  27C5  3186         	fcall	PL26	;call to abstracted procedure
  8180  078B  3E24               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
  8181  078C  27B3  3186         	fcall	PL2	;call to abstracted procedure
  8182  078E  1803               	skipnc
  8183  078F  2F95               	goto	i1l2272
  8184                           
  8185                           ;led.c: 198: gLedRunPara.mCurrentBright[i] -= 1;
  8186  0790  357A               	lslf	Led_Ramp@i,w
  8187  0791  3186  2629  3186   	fcall	PL6	;call to abstracted procedure
  8188                           
  8189                           ;led.c: 199: } else {
  8190  0794  2FA1               	goto	i1l2274
  8191  0795                     i1l2272:	
  8192                           
  8193                           ;led.c: 200: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
  8194  0795  357A               	lslf	Led_Ramp@i,w
  8195  0796  3E24               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
  8196  0797  0086               	movwf	6
  8197  0798  0187               	clrf	7
  8198  0799  357A               	lslf	Led_Ramp@i,w
  8199  079A  3E20               	addlw	(low (_gLedRunPara| 0))& (0+255)
  8200  079B  0084               	movwf	4
  8201  079C  0185               	clrf	5
  8202  079D  3F40               	moviw [0]fsr1
  8203  079E  3F80               	movwi [0]fsr0
  8204  079F  3F41               	moviw [1]fsr1
  8205  07A0  3F81               	movwi [1]fsr0
  8206  07A1                     i1l2274:	
  8207                           
  8208                           ;led.c: 201: }
  8209                           ;led.c: 202: loadDuty[i]( gLedRunPara.mCurrentBright[i] );
  8210  07A1  357A               	lslf	Led_Ramp@i,w
  8211  07A2  3186  2658  3186   	fcall	PL14	;call to abstracted procedure
  8212  07A5  357A               	lslf	Led_Ramp@i,w
  8213  07A6  3E5D               	addlw	(low (_loadDuty| 0))& (0+255)
  8214  07A7  0086               	movwf	6
  8215  07A8  3F41               	moviw [1]fsr1
  8216  07A9  008A               	movwf	10
  8217  07AA  3F40               	moviw [0]fsr1
  8218  07AB  000A               	callw
  8219  07AC  3002               	movlw	2
  8220  07AD  3186               	pagesel	$
  8221  07AE  0AFA               	incf	Led_Ramp@i,f
  8222  07AF  027A               	subwf	Led_Ramp@i,w
  8223  07B0  1803               	btfsc	3,0
  8224  07B1  0008               	return
  8225  07B2  2F77               	goto	i1l2264
  8226  07B3                     __end_of_Led_Ramp:	
  8227  07B3                     PL2:	
  8228  07B3  0086               	movwf	6
  8229  07B4  3F40               	moviw [0]fsr1
  8230  07B5  00F6               	movwf	??_Led_Ramp+2
  8231  07B6  3F41               	moviw [1]fsr1
  8232  07B7  00F7               	movwf	??_Led_Ramp+3
  8233  07B8  0876               	movf	??_Led_Ramp+2,w
  8234  07B9  3E01               	addlw	1
  8235  07BA  00F8               	movwf	??_Led_Ramp+4
  8236  07BB  3000               	movlw	0
  8237  07BC  3D77               	addwfc	??_Led_Ramp+3,w
  8238  07BD  00F9               	movwf	??_Led_Ramp+5
  8239  07BE  0875               	movf	??_Led_Ramp+1,w
  8240  07BF  0279               	subwf	??_Led_Ramp+5,w
  8241  07C0  1D03               	skipz
  8242  07C1  0008               	return
  8243  07C2  0874               	movf	??_Led_Ramp,w
  8244  07C3  0278               	subwf	??_Led_Ramp+4,w
  8245  07C4  0008               	return
  8246  07C5                     __end_ofPL2:	
  8247  07C5                     PL26:	
  8248  07C5  0086               	movwf	6
  8249  07C6  0187               	clrf	7
  8250  07C7  3F40               	moviw [0]fsr1
  8251  07C8  00F4               	movwf	??_Led_Ramp
  8252  07C9  3F41               	moviw [1]fsr1
  8253  07CA  00F5               	movwf	??_Led_Ramp+1
  8254  07CB  357A               	lslf	Led_Ramp@i,w
  8255  07CC  0008               	return
  8256  07CD                     __end_ofPL26:	
  8257                           
  8258                           	psect	swtext1
  8259  0807                     __pswtext1:	
  8260  0807                     i1S2944:	
  8261  0807  3183  2B9B         	ljmp	i1l2470
  8262  0809  3183  2B9B         	ljmp	i1l2470
  8263  080B  3183  2B9B         	ljmp	i1l2470
  8264  080D  3183  2B9D         	ljmp	i1l2472
  8265  080F  3183  2BA3         	ljmp	i1l2474
  8266                           
  8267                           	psect	text42
  8268  07E3                     __ptext42:	
  8269 ;; *************** function _PWM1_LoadDutyValue *****************
  8270 ;; Defined at:
  8271 ;;		line 14 in file "driver/src/pwm.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  dutyValue       2    0[COMMON] unsigned int 
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;		None
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		wreg
  8280 ;; Tracked objects:
  8281 ;;		On entry : 12/1
  8282 ;;		On exit  : 1F/C
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8285 ;;      Params:         2       0       0       0
  8286 ;;      Locals:         0       0       0       0
  8287 ;;      Temps:          2       0       0       0
  8288 ;;      Totals:         4       0       0       0
  8289 ;;Total ram usage:        4 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; This function calls:
  8292 ;;		Nothing
  8293 ;; This function is called by:
  8294 ;;		_Led_Ramp
  8295 ;;		_Led_DynamicCloud
  8296 ;;		_Led_DynamicStorm
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _PWM1_LoadDutyValue
  8302  07E3                     _PWM1_LoadDutyValue:	
  8303                           
  8304                           ;pwm.c: 16: PWM1DC = dutyValue << 6;
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
  8308  07E3  0871               	movf	PWM1_LoadDutyValue@dutyValue+1,w
  8309  07E4  00F3               	movwf	??_PWM1_LoadDutyValue+1
  8310  07E5  0870               	movf	PWM1_LoadDutyValue@dutyValue,w
  8311  07E6  00F2               	movwf	??_PWM1_LoadDutyValue
  8312  07E7  3006               	movlw	6
  8313  07E8                     u117_25:	
  8314  07E8  35F2               	lslf	??_PWM1_LoadDutyValue,f
  8315  07E9  0DF3               	rlf	??_PWM1_LoadDutyValue+1,f
  8316  07EA  0B89               	decfsz	9,f
  8317  07EB  2FE8               	goto	u117_25
  8318  07EC  0872               	movf	??_PWM1_LoadDutyValue,w
  8319  07ED  002C               	movlb	12	; select bank12
  8320  07EE  0091               	movwf	17	;volatile
  8321  07EF  0873               	movf	??_PWM1_LoadDutyValue+1,w
  8322  07F0  0092               	movwf	18	;volatile
  8323  07F1  0008               	return
  8324  07F2                     __end_of_PWM1_LoadDutyValue:	
  8325                           
  8326                           	psect	text43
  8327  0F71                     __ptext43:	
  8328 ;; *************** function _PWM3_LoadDutyValue *****************
  8329 ;; Defined at:
  8330 ;;		line 36 in file "driver/src/pwm.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;  dutyValue       2    0[COMMON] unsigned int 
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;		None
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      void 
  8337 ;; Registers used:
  8338 ;;		wreg
  8339 ;; Tracked objects:
  8340 ;;		On entry : 12/1
  8341 ;;		On exit  : 1F/C
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8344 ;;      Params:         2       0       0       0
  8345 ;;      Locals:         0       0       0       0
  8346 ;;      Temps:          2       0       0       0
  8347 ;;      Totals:         4       0       0       0
  8348 ;;Total ram usage:        4 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_Led_Ramp
  8354 ;;		_Led_DynamicCloud
  8355 ;;		_Led_DynamicStorm
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           
  8360                           ;psect for function _PWM3_LoadDutyValue
  8361  0F71                     _PWM3_LoadDutyValue:	
  8362                           
  8363                           ;pwm.c: 38: PWM3DC = dutyValue << 6;
  8364                           
  8365                           ;incstack = 0
  8366                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
  8367  0F71  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  8368  0F72  00F3               	movwf	??_PWM3_LoadDutyValue+1
  8369  0F73  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  8370  0F74  00F2               	movwf	??_PWM3_LoadDutyValue
  8371  0F75  3006               	movlw	6
  8372  0F76                     u118_25:	
  8373  0F76  35F2               	lslf	??_PWM3_LoadDutyValue,f
  8374  0F77  0DF3               	rlf	??_PWM3_LoadDutyValue+1,f
  8375  0F78  0B89               	decfsz	9,f
  8376  0F79  2F76               	goto	u118_25
  8377  0F7A  0872               	movf	??_PWM3_LoadDutyValue,w
  8378  0F7B  002C               	movlb	12	; select bank12
  8379  0F7C  0097               	movwf	23	;volatile
  8380  0F7D  0873               	movf	??_PWM3_LoadDutyValue+1,w
  8381  0F7E  0098               	movwf	24	;volatile
  8382  0F7F  0008               	return
  8383  0F80                     __end_of_PWM3_LoadDutyValue:	
  8384                           
  8385                           	psect	text59
  8386  07CD                     __ptext59:	
  8387 ;; *************** function _EUSART_Transmit_ISR *****************
  8388 ;; Defined at:
  8389 ;;		line 66 in file "driver/src/eusart.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;		None
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;		None
  8394 ;; Return value:  Size  Location     Type
  8395 ;;                  1    wreg      void 
  8396 ;; Registers used:
  8397 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8398 ;; Tracked objects:
  8399 ;;		On entry : 1F/0
  8400 ;;		On exit  : 1E/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8403 ;;      Params:         0       0       0       0
  8404 ;;      Locals:         0       0       0       0
  8405 ;;      Temps:          0       0       0       0
  8406 ;;      Totals:         0       0       0       0
  8407 ;;Total ram usage:        0 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; This function calls:
  8410 ;;		Nothing
  8411 ;; This function is called by:
  8412 ;;		_ISR
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _EUSART_Transmit_ISR
  8418  07CD                     _EUSART_Transmit_ISR:	
  8419                           
  8420                           ;eusart.c: 68: if ( sizeof (txBuf ) > txRemain )
  8421                           
  8422                           ;incstack = 0
  8423                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8424  07CD  3020               	movlw	32
  8425  07CE  0240               	subwf	_txRemain,w
  8426  07CF  1803               	skipnc
  8427  07D0  2FE0               	goto	i1l68
  8428                           
  8429                           ;eusart.c: 69: {
  8430                           ;eusart.c: 70: TXREG = txBuf[txTail++];
  8431  07D1  0841               	movf	_txTail,w
  8432  07D2  3EA0               	addlw	(low (_txBuf| 0))& (0+255)
  8433  07D3  0086               	movwf	6
  8434  07D4  0187               	clrf	7
  8435  07D5  0801               	movf	1,w
  8436  07D6  0023               	movlb	3	; select bank3
  8437  07D7  009A               	movwf	26	;volatile
  8438  07D8  0020               	movlb	0	; select bank0
  8439  07D9  3020               	movlw	32
  8440  07DA  0AC1               	incf	_txTail,f
  8441                           
  8442                           ;eusart.c: 71: if ( sizeof (txBuf ) <= txTail )
  8443  07DB  0241               	subwf	_txTail,w
  8444  07DC  1803               	btfsc	3,0
  8445                           
  8446                           ;eusart.c: 72: {
  8447                           ;eusart.c: 73: txTail = 0;
  8448  07DD  01C1               	clrf	_txTail
  8449                           
  8450                           ;eusart.c: 74: }
  8451                           ;eusart.c: 75: txRemain++;
  8452  07DE  0AC0               	incf	_txRemain,f
  8453                           
  8454                           ;eusart.c: 76: }
  8455  07DF  0008               	return
  8456  07E0                     i1l68:	
  8457                           
  8458                           ;eusart.c: 77: else
  8459                           ;eusart.c: 78: {
  8460                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8461  07E0  0021               	movlb	1	; select bank1
  8462  07E1  1211               	bcf	17,4	;volatile
  8463  07E2  0008               	return
  8464  07E3                     __end_of_EUSART_Transmit_ISR:	
  8465  007E                     btemp	set	126	;btemp
  8466  007E                     int$flags	set	126
  8467  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        12
    BSS         98
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     19      65
    BANK1            80      0      64
    BANK2            80      0       0

Pointer List with Targets:

    Key_SetActionHandler@handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Led_OnKeyPressed(), 

    key_idle_cb	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    key_press_cb	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Led_OnKeyPressed(), Absolute function(), 

    Util_DecValue@pSrc	PTR unsigned int  size(1) Largest target is 32
		 -> gLedPara.blue_bright(BANK1[2]), gLedPara.white_bright(BANK1[2]), gLedPara.all_bright(BANK1[2]), gLedPara(BANK1[32]), 

    Util_IncValue@pSrc	PTR unsigned int  size(1) Largest target is 32
		 -> gLedPara.blue_bright(BANK1[2]), gLedPara.white_bright(BANK1[2]), gLedPara.all_bright(BANK1[2]), gLedPara(BANK1[32]), 

    loadDuty	PTR FTN(unsigned int ,)void [2] size(2) Largest target is 1
		 -> PWM3_LoadDutyValue(), PWM1_LoadDutyValue(), 

    FLASH_ReadBuffer@buf	PTR unsigned char  size(1) Largest target is 32
		 -> gLedPara(BANK1[32]), 

    FLASH_WriteBlock@buf	PTR unsigned char  size(1) Largest target is 32
		 -> gLedPara(BANK1[32]), 

    TMR2_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), 

    tmr2_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), Absolute function(), 

    tmr1_gate_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tmr1_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    tmr0_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    eusart_rcv_isr_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _Led_Run->_Key_Scan
    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicStorm
    _Led_Ramp->_PWM1_LoadDutyValue
    _Led_Ramp->_PWM3_LoadDutyValue
    _Led_DynamicStorm->i1___wmul
    _Led_DynamicCloud->i1___wmul
    _Audio_SelectSound->i1_EUSART_Write
    _Key_Scan->_Led_OnKeyPressed
    _Led_OnKeyPressed->_Util_DecValue
    _Led_OnKeyPressed->_Util_IncValue
    i1_Led_Initialize->i1_Led_TurnOffRamp
    i1_Led_Initialize->i1_Led_TurnOnAllRamp
    i1_Audio_StopSound->i1_EUSART_Write
    i1_Audio_SetVolume->i1_EUSART_Write
    _Key_Read->i1_ADC_Conversion

Critical Paths under _main in BANK0

    _main->_Audio_GetValue
    _main->_Led_SaveParaIfChanged
    _Led_SaveParaIfChanged->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _Led_Initialize->_Led_TurnOffRamp
    _Led_Initialize->_Led_TurnOnAllRamp
    _Led_InitPara->_FLASH_ReadBuffer
    _FLASH_ReadBuffer->_FLASH_ReadByte
    _Interrupt_Initialize->_Key_SetActionHandler
    _Interrupt_Initialize->_TMR2_SetInterruptHandler
    _Audio_Initialize->_Audio_SetPlayMode
    _Audio_Initialize->_Audio_SetVolume
    _Audio_StopSound->_EUSART_Write
    _Audio_SetVolume->_EUSART_Write
    _Audio_SetPlayMode->_EUSART_Write
    _Audio_GetValue->___wmul

Critical Paths under _ISR in BANK0

    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicStorm

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2544
                     _Audio_GetValue
                   _Audio_Initialize
               _Interrupt_Initialize
                       _Led_InitPara
                     _Led_Initialize
              _Led_SaveParaIfChanged
                  _SYSTEM_Initialize
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
             _ADC_Initialize_Default
          _EUSART_Initialize_Default
             _OSC_Initialize_Default
                     _PIN_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
            _TMR2_Initialize_Default
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSC_Initialize_Default                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize_Default                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize_Default                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_SaveParaIfChanged                                1     1      0     588
                                             18 BANK0      1     1      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                     8     5      3     588
                                             10 BANK0      8     5      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     109
                                              7 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _Led_Initialize                                       0     0      0     136
                    _Led_TurnOffRamp
                  _Led_TurnOnAllRamp
                 _Led_TurnOnBlueRamp
                _Led_TurnOnWhiteRamp
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOnWhiteRamp                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOnBlueRamp                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOnAllRamp                                    1     1      0      68
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOffRamp                                      1     1      0      68
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Led_InitPara                                         1     1      0     474
                                             16 BANK0      1     1      0
                   _FLASH_ReadBuffer
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadBuffer                                     6     3      3     474
                                             10 BANK0      6     3      3
                     _FLASH_ReadByte
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadByte                                       3     1      2     182
                                              7 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Initialize                                 0     0      0     172
               _Key_SetActionHandler
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2      86
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Key_SetActionHandler                                 2     0      2      86
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Audio_Initialize                                     4     4      0     343
                                             10 BANK0      4     4      0
                  _Audio_SetPlayMode
                    _Audio_SetVolume
                    _Audio_StopSound
 ---------------------------------------------------------------------------------
 (2) _Audio_StopSound                                      1     1      0      91
                                              8 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetVolume                                      2     2      0     114
                                              8 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetPlayMode                                    2     2      0     114
                                              8 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      66
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Audio_GetValue                                       6     6      0     831
                                             13 BANK0      6     6      0
                     _ADC_Conversion
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     676
                                              7 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Conversion                                       4     2      2      22
                                              7 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  0     0      0    4989
                _EUSART_Transmit_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0    4989
                   Absolute function *
                            _Led_Run *
 ---------------------------------------------------------------------------------
 (6) _Led_Run                                              0     0      0    4989
                           _Key_Scan
                           _Led_Ramp
                       _Led_RunMusic
 ---------------------------------------------------------------------------------
 (7) _Led_RunMusic                                         1     1      0    2413
                                             12 COMMON     1     1      0
                  _Audio_SelectSound
                   _Led_DynamicCloud
                   _Led_DynamicStorm
                           _Led_Ramp
 ---------------------------------------------------------------------------------
 (8) _Led_Ramp                                             7     7      0     469
                                              4 COMMON     7     7      0
                 _PWM1_LoadDutyValue *
                 _PWM3_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (8) _Led_DynamicStorm                                    13    11      2     913
                                              6 COMMON     6     4      2
                                              0 BANK0      7     7      0
                 _PWM1_LoadDutyValue *
                 _PWM3_LoadDutyValue *
                           i1___wmul
 ---------------------------------------------------------------------------------
 (8) _Led_DynamicCloud                                    13    11      2     914
                                              6 COMMON     6     4      2
                                              0 BANK0      7     7      0
                 _PWM1_LoadDutyValue *
                 _PWM3_LoadDutyValue *
                           i1___wmul
 ---------------------------------------------------------------------------------
 (9) i1___wmul                                             6     2      4     240
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (9) _PWM3_LoadDutyValue                                   4     2      2     181
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (9) _PWM1_LoadDutyValue                                   4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Audio_SelectSound                                    2     2      0     117
                                              1 COMMON     2     2      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _Key_Scan                                             1     1      0    2107
                                             13 COMMON     1     1      0
                   Absolute function *
                           _Key_Read
                   _Led_OnKeyPressed *
 ---------------------------------------------------------------------------------
 (8) _Led_OnKeyPressed                                     4     3      1    1797
                                              9 COMMON     4     3      1
                      _Util_DecValue
                      _Util_IncValue
                  i1_Audio_SetVolume
                  i1_Audio_StopSound
                   i1_Led_Initialize
                i1_Led_TurnOnAllRamp
               i1_Led_TurnOnBlueRamp
              i1_Led_TurnOnWhiteRamp
 ---------------------------------------------------------------------------------
 (9) i1_Led_Initialize                                     0     0      0     136
                  i1_Led_TurnOffRamp
                i1_Led_TurnOnAllRamp
               i1_Led_TurnOnBlueRamp
              i1_Led_TurnOnWhiteRamp
 ---------------------------------------------------------------------------------
 (9) i1_Led_TurnOnWhiteRamp                                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_Led_TurnOnBlueRamp                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_Led_TurnOnAllRamp                                  1     1      0      68
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Led_TurnOffRamp                                   1     1      0      68
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_Audio_StopSound                                    1     1      0      91
                                              1 COMMON     1     1      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (9) i1_Audio_SetVolume                                    2     2      0     114
                                              1 COMMON     2     2      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (9) i1_EUSART_Write                                       1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _Util_IncValue                                        9     5      4     628
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (9) _Util_DecValue                                        9     5      4     628
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (8) _Key_Read                                             2     2      0     221
                                              4 COMMON     2     2      0
                   i1_ADC_Conversion
 ---------------------------------------------------------------------------------
 (9) i1_ADC_Conversion                                     4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Audio_GetValue
     _ADC_Conversion
     ___wmul
   _Audio_Initialize
     _Audio_SetPlayMode
       _EUSART_Write
     _Audio_SetVolume
       _EUSART_Write
     _Audio_StopSound
       _EUSART_Write
   _Interrupt_Initialize
     _Key_SetActionHandler
     _TMR2_SetInterruptHandler
   _Led_InitPara
     _FLASH_ReadBuffer
       _FLASH_ReadByte
   _Led_Initialize
     _Led_TurnOffRamp
     _Led_TurnOnAllRamp
     _Led_TurnOnBlueRamp
     _Led_TurnOnWhiteRamp
   _Led_SaveParaIfChanged
     _FLASH_WriteBlock
       _FLASH_EraseBlock
   _SYSTEM_Initialize
     _ADC_Initialize_Default
     _EUSART_Initialize_Default
     _OSC_Initialize_Default
     _PIN_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _TMR2_Initialize_Default
   _TMR2_StartTimer

 _ISR (ROOT)
   _EUSART_Transmit_ISR
   _TMR2_ISR
     Absolute function(Fake) *
     _Led_Run *
       _Key_Scan
         Absolute function(Fake) *
         _Key_Read *
           i1_ADC_Conversion
         _Led_OnKeyPressed *
           _Util_DecValue
           _Util_IncValue
           i1_Audio_SetVolume
             i1_EUSART_Write
           i1_Audio_StopSound
             i1_EUSART_Write
           i1_Led_Initialize
             i1_Led_TurnOffRamp
             i1_Led_TurnOnAllRamp
             i1_Led_TurnOnBlueRamp
             i1_Led_TurnOnWhiteRamp
           i1_Led_TurnOnAllRamp
           i1_Led_TurnOnBlueRamp
           i1_Led_TurnOnWhiteRamp
       _Led_Ramp
         _PWM1_LoadDutyValue *
         _PWM3_LoadDutyValue *
       _Led_RunMusic
         _Audio_SelectSound
           i1_EUSART_Write
         _Led_DynamicCloud
           _PWM1_LoadDutyValue *
           _PWM3_LoadDutyValue *
           i1___wmul *
         _Led_DynamicStorm
           _PWM1_LoadDutyValue *
           _PWM3_LoadDutyValue *
           i1___wmul *
         _Led_Ramp
           _PWM1_LoadDutyValue *
           _PWM3_LoadDutyValue *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      8F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     13      41       6       81.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      8F      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Dec 21 09:52:06 2017

                  ??i1_EUSART_Write 0070          __size_of_Audio_SetPlayMode 0017  
  __end_of_TMR2_SetInterruptHandler 01E7                                   pc 0002  
               i1ADC_Conversion@chn 0073          __size_of_Audio_SelectSound 0023  
                       __CFG_CP$OFF 0000                                  PL2 07B3  
                                PL4 061E                                  PL6 0629  
                                PL8 0633                                  l22 00CE  
                                l58 016C                                  _RD 0CA8  
                                _WR 0CA9                       _Util_IncValue 0497  
               ___wmul@multiplicand 004B                    i1___wmul@product 0074  
            _ADC_Initialize_Default 0348                                 PL10 0640  
                               PL20 0674                                 PL12 064C  
                               PL30 0691                                 PL22 067B  
                               PL14 0658                                 PL40 036A  
                               PL32 0699                                 PL24 0682  
                               PL16 0660                                 PL34 06A1  
                               PL26 07C5                                 PL18 066A  
                               PL36 06A7                                 PL28 0689  
                               PL38 0364                         __CFG_LVP$ON 0000  
                               l316 0082                                 l370 01C0  
                               l372 01D2                                 l373 01DE  
                               l279 0257                                 l392 022E  
                               l369 01B6                                 l584 0055  
              _Key_SetActionHandler 02A8                                 _GIE 005F  
                               _PR2 001B                                 _ISR 0004  
                   _Led_TurnOffRamp 02AD     __end_of_TMR2_Initialize_Default 0290  
                   _PWM4_Initialize 0281                        __CFG_BORV$LO 0000  
                               wreg 0009               ?_Interrupt_Initialize 0070  
                              ?_ISR 0070           _EUSART_Initialize_Default 0350  
                              l2408 0170                                l2620 030F  
                              l2612 02F7                                l2710 02CF  
                              l2534 0348                                l2800 008A  
                              l2456 0215                                l2704 02BC  
                              l2802 008E                                l2394 0161  
                              l2716 02CC                                l2638 01E9  
                              l2590 02D4                                l2910 0063  
                              l2752 0295                                l2912 0065  
                              l2690 02B0                                l2682 02AD  
                              l2756 029B                                l2852 00FD  
                              l2748 02A8                                l2836 01CA  
                              l2828 01AC                                l2870 022C  
                              l2696 02B8                                l2872 022D  
                              l2866 021C                                l2796 0078  
                              l2868 022B                                _CFGS 0CAE  
                      __CFG_WDTE$ON 0000                                _GAIN 07FD  
           __end_of_PWM1_Initialize 0277                                _FREE 0CAC  
                              u2025 007E                                u2035 0088  
                              _LATA 010C                                _LATB 010D  
                              _LATC 010E                                u2237 0237  
                              u2247 00E1                                u2257 00F1  
                              u2267 010B                                u2277 011A  
                              u1670 0346                                u2287 00C9  
                              u1690 0214                                u1855 02E3  
                              u1880 0327                                i1l22 076C  
                              i1l58 0513                                i1l68 07E0  
                              _LWLO 0CAD                                _TMR2 001A  
            ?i1_Led_TurnOnWhiteRamp 0070                                _WREN 0CAA  
                              _WPUA 020C                                _WPUB 020D  
                      __CFG_WRT$OFF 0000            __end_ofi1_ADC_Conversion 0776  
                              _main 0047                   ?_Led_DynamicCloud 0076  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                   ?_FLASH_WriteBlock 004C  
                    ?_Util_DecValue 0070                   ?_Led_DynamicStorm 0076  
                              start 001A                       __CFG_IESO$OFF 0000  
                ??_Led_DynamicCloud 0078                    Util_DecValue@min 0070  
                ??_FLASH_WriteBlock 004F                       __CFG_MCLRE$ON 0000  
                   __end_of_Led_Run 06BB                  ??_Led_DynamicStorm 0078  
                             ??_ISR 007E                       __CFG_LPBOR$ON 0000  
               Led_DynamicCloud@val 0042                 Led_DynamicCloud@ptp 0076  
                    ?_Util_IncValue 0070             __end_of_PWM2_Initialize 027C  
                     ?_EUSART_Write 0070               ?_Key_SetActionHandler 0049  
                             ?_main 0070                               _ADRES 009B  
                             _T2CON 001C                   _Led_TurnOnAllRamp 02B8  
                             i1l421 03AA                               i1l432 03F0  
                             i1l425 03D6                               i1l450 0472  
                             i1l443 0445                               i1l439 0418  
                             i1l392 0549                               i1l465 0578  
                             i1l593 0010                               i1l596 0018  
                             _PMADR 0191                               _PMDAT 0193  
                             _RCSTA 019D                               _SPBRG 019B  
                             _TRISA 008C                               _TRISB 008D  
                             _TRISC 008E                               _TXREG 019A  
                             _TXSTA 019E             __size_of_PIN_Initialize 0017  
                ?_Led_TurnOnAllRamp 0070                       __CFG_PWRTE$ON 0000  
                    __CFG_FCMEN$OFF 0000                    __end_of_TMR2_ISR 07FD  
                             _txBuf 00A0                __end_of_Led_InitPara 01E2  
            ??i1_Led_TurnOnBlueRamp 0070             __end_of_PWM3_Initialize 0281  
                    __CFG_BOREN$OFF 0000                               pclath 000A  
               ??_Led_TurnOnAllRamp 0049                    __end_ofi1___wmul 0614  
               FLASH_WriteBlock@buf 004E                               status 0003  
               i1___wmul@multiplier 0070                               wtemp0 007E  
             Audio_SetPlayMode@type 004A                     _TMR2_StartTimer 0290  
                 Util_DecValue@pSrc 0078                        __end_of_GAIN 0802  
           __size_of_Audio_GetValue 0052                    __end_of_Led_Ramp 07B3  
                   __initialization 001C                __end_of_Led_RunMusic 03A9  
                      __end_of_main 0068                    __end_of_Key_Read 075B  
                  __end_of_Key_Scan 0714            ??_OSC_Initialize_Default 0049  
           __end_of_Led_TurnOffRamp 02B8                      ??_EUSART_Write 0049  
           __end_of_PWM4_Initialize 0286           __end_of_Led_TurnOnAllRamp 02CC  
              Led_DynamicCloud@duty 0044            _TMR2_SetInterruptHandler 01E2  
                            ??_main 0055             __size_of_FLASH_ReadByte 0019  
               Led_DynamicStorm@val 0046                 Led_DynamicStorm@ptp 0076  
            ??_Interrupt_Initialize 004B                              _ADCON0 009D  
                            _ADCON1 009E                              _ADCON2 009F  
                            i1S2944 0807           __size_of_Audio_Initialize 0046  
                            _ANSELA 018C                              _ANSELB 018D  
                            _ANSELC 018E                              i1l2004 0508  
                  ?_PWM1_Initialize 0070                              i1l2032 051D  
                            i1l2018 0517                              i1l2122 0533  
                            i1l2124 0537                              i1l2132 053D  
                            i1l2140 0607                              i1l2126 0539  
                            i1l2230 0433                              i1l2302 0594  
                            i1l2128 053B                              i1l2216 040C  
                            i1l2208 0400                              i1l2136 0601  
                            i1l2058 0616                              i1l2234 0438  
                            i1l2244 0452                              i1l2332 05EE  
                            i1l2324 05D3                              i1l2316 05CC  
                            i1l2308 05A5                              u120_25 0486  
                            i1l2190 03D2                              i1l2182 03C3  
                            i1l2318 05CE                              i1l2248 0456  
                            i1l2176 03C0                              i1l2256 045E  
                            i1l2520 06FD                              i1l2280 054F  
                            i1l2328 05E2                              i1l2272 0795  
                            i1l2264 0777                              i1l2178 03D3  
                            i1l2506 06E2                              i1l2274 07A1  
                            i1l2258 0776                              i1l2188 03CC  
                            i1l2524 070D                              i1l2532 0710  
                            i1l2508 06E4                              i1l2268 0787  
                            i1l2460 036F                              i1l2358 0730  
                            i1l2198 03ED                              i1l2294 0579  
                            i1l2470 039B                              i1l2462 0377  
                            i1l2368 073E                              i1l2288 0576  
                            i1l2472 039D                              i1l2464 038F  
                            i1l2298 0588                              i1l2474 03A3  
                            i1l2732 06BA                              i1l2478 0382  
                            i1l2496 06CE                              i1l2728 06B5  
                            u141_20 0450                              u117_25 07E8  
                            u118_25 0F76                              u119_25 04AA  
                            u151_25 05C5                              u138_20 0442  
                            u147_25 056F                              u229_27 0767  
                            _PMDATL 0193                              _PMCON2 0196  
         __size_of_FLASH_EraseBlock 001F                     ??_Util_DecValue 0074  
                            _OSCCON 0099                              _PWM1DC 0611  
                            _PWM2DC 0614                              _PWM3DC 0617  
                            _PWM4DC 061A                           ??_Led_Run 007E  
                            _VOLUME 0802                  _Led_TurnOnBlueRamp 02CC  
                 ?i1_Led_Initialize 0070             __size_of_Led_Initialize 0017  
                ??i1_Led_Initialize 0071    __size_of_TMR2_Initialize_Default 000A  
                   ??_Util_IncValue 0074                 ?_Led_TurnOnBlueRamp 0070  
       __size_of_PWM3_LoadDutyValue 000F                              ___wmul 0293  
                    __CFG_STVREN$ON 0000                 Audio_GetValue@value 0053  
               _EUSART_Transmit_ISR 07CD                    ?_PWM2_Initialize 0070  
            ??_Key_SetActionHandler 004B           __size_of_FLASH_ReadBuffer 0018  
                            _txHead 003F                              _txTail 0041  
      __size_of_Led_TurnOnWhiteRamp 0005        __size_ofi1_Led_TurnOnAllRamp 0010  
                     Key_Read@value 0074                FLASH_WriteBlock@addr 004C  
              ??_Led_TurnOnBlueRamp 0049             __end_of_TMR2_StartTimer 0293  
              ?_EUSART_Transmit_ISR 0070                  Util_DecValue@delta 0072  
                  ?_PWM3_Initialize 0070                   _SYSTEM_Initialize 0244  
           __end_of__initialization 0044                  ?_SYSTEM_Initialize 0070  
    __size_of_Led_SaveParaIfChanged 0015       __end_of_Led_SaveParaIfChanged 0244  
                  Led_TurnOffRamp@i 0049         PWM1_LoadDutyValue@dutyValue 0070  
                    __pcstackCOMMON 0070                        __pidataBANK0 0000  
               ??_SYSTEM_Initialize 0049           __size_of_Led_OnKeyPressed 00CA  
                         ?_TMR2_ISR 0070               Led_DynamicCloud@F4458 0059  
           ?_ADC_Initialize_Default 0070                    ?_Led_TurnOffRamp 0070  
   __size_of_OSC_Initialize_Default 0005                          _adc_result 0039  
                _PWM1_LoadDutyValue 07E3                    ?_PWM4_Initialize 0070  
        __size_of_Led_TurnOnAllRamp 0014                          __end_ofPL2 07C5  
                        __end_ofPL4 0629                          __end_ofPL6 0633  
                        __end_ofPL8 0640                           ?i1___wmul 0070  
                    _PIN_Initialize 025A                      _OPTION_REGbits 0095  
             __size_of_Led_InitPara 0061                 ?_PWM1_LoadDutyValue 0070  
                 i1_Audio_SetVolume 04CD             ??i1_Led_TurnOnWhiteRamp 0070  
                         ?_Led_Ramp 0070           __end_of_SYSTEM_Initialize 0255  
             ??_EUSART_Transmit_ISR 0070                  ?i1_Audio_SetVolume 0070  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                         ?_Key_Read 0070                           ?_Key_Scan 0070  
          __size_of_Audio_SetVolume 0016                __end_of_EUSART_Write 0175  
        FLASH_WriteBlock@start_addr 0051                Led_DynamicStorm@duty 0042  
             __size_of_Led_RunMusic 003A                   ?i1_ADC_Conversion 0070  
           __size_of_ADC_Conversion 0021                 ??i1_Audio_SetVolume 0071  
                    _Audio_GetValue 0068                ??_PWM1_LoadDutyValue 0072  
                ??i1_ADC_Conversion 0072                          __pmaintext 0047  
                 i1_Audio_StopSound 04BB      __end_of_ADC_Initialize_Default 0350  
                           ?___wmul 0049                          ??_TMR2_ISR 007E  
   TMR2_SetInterruptHandler@handler 0049                  ?i1_Audio_StopSound 0070  
                        __pintentry 0004                        _Led_InitPara 0181  
                           _BAUDCON 019F            __size_of_Audio_StopSound 0012  
         __size_of_Led_DynamicCloud 0056              __end_of_PIN_Initialize 0271  
         __size_of_FLASH_WriteBlock 0055                          ??i1___wmul 0074  
                    _FLASH_ReadByte 01FF           __size_of_Led_DynamicStorm 005A  
               ??i1_Audio_StopSound 0071           __end_ofi1_Audio_SetVolume 04E4  
                           _PWM1CON 0613                             _PWM2CON 0616  
                           _PWM3CON 0619                             _PWM4CON 061C  
                      _Led_RunMusic 036F                          ??_Led_Ramp 0074  
                  _Audio_Initialize 00DB                    ?_TMR2_StartTimer 0070  
            _OSC_Initialize_Default 0255                          ??_Key_Read 0074  
                        ??_Key_Scan 007D                    _FLASH_EraseBlock 0329  
                  Util_IncValue@max 0070              __end_of_Audio_GetValue 00BA  
                           _Led_Run 06AE           __end_ofi1_Audio_StopSound 04CD  
                    _Led_Initialize 0218             _TMR2_Initialize_Default 0286  
        ??_TMR2_SetInterruptHandler 004B                     __size_of___wmul 0015  
            __end_of_FLASH_ReadByte 0218                    _FLASH_ReadBuffer 01E7  
                           __ptext1 0290                             __ptext2 0244  
                           __ptext3 0286                             __ptext4 0281  
                           __ptext5 027C                             __ptext6 0277  
                           __ptext7 0271                             __ptext8 025A  
                           __ptext9 0255                     ?_PIN_Initialize 0070  
                      __size_of_ISR 0016                           _T2CONbits 001C  
           __size_ofi1_EUSART_Write 0014          __size_of_SYSTEM_Initialize 0011  
                           clrloop0 0F6C                  i1Led_TurnOffRamp@i 0070  
              end_of_initialization 0044                         _gLedRunPara 0020  
            __end_of_Led_Initialize 022F             Audio_SetVolume@checksum 004B  
                   ?_Audio_GetValue 0070       __size_ofi1_Led_TurnOnBlueRamp 0003  
               _Led_TurnOnWhiteRamp 02CF                 i1_Led_TurnOnAllRamp 051B  
           Audio_StopSound@checksum 004A           Audio_SetPlayMode@checksum 004B  
                 ??_Audio_SetVolume 004A                      Key_Scan@keyNum 007D  
             FLASH_WriteBlock@state 0050                    _Led_OnKeyPressed 03A9  
                      __pstringtext 07FD           i1Audio_SetVolume@checksum 0072  
             i1___wmul@multiplicand 0072                           Led_Ramp@i 007A  
                   ?_FLASH_ReadByte 0049           i1Audio_StopSound@checksum 0071  
              ?_Led_TurnOnWhiteRamp 0070                ?i1_Led_TurnOnAllRamp 0070  
         __size_ofi1_Led_Initialize 001C          __size_ofi1_Audio_SetVolume 0017  
                  __CFG_FOSC$INTOSC 0000                   ??_Audio_StopSound 004A  
             __size_of_EUSART_Write 0015       __size_of_Interrupt_Initialize 000C  
                   ?_Led_Initialize 0070                   Led_DynamicCloud@i 0048  
                    _ADC_Conversion 00BA           ??_TMR2_Initialize_Default 0049  
             __end_of_Util_DecValue 0497          __size_ofi1_Audio_StopSound 0012  
                    __end_of_VOLUME 0807          __end_of_PWM3_LoadDutyValue 0F80  
                 FLASH_WriteBlock@i 0053                  Util_IncValue@delta 0072  
          __size_of_PWM1_Initialize 0006                   Led_DynamicStorm@i 0048  
             __end_of_Util_IncValue 04BB                      __end_of___wmul 02A8  
                  _Led_DynamicCloud 054F                        _EUSART_Write 0160  
             ??_Led_TurnOnWhiteRamp 0049                   __size_of_TMR2_ISR 000B  
                 Audio_GetValue@cnt 002F               ??i1_Led_TurnOnAllRamp 0070  
                 Audio_GetValue@max 0033                   Audio_GetValue@min 0031  
                  _FLASH_WriteBlock 02D4                _Led_OnKeyPressed$610 007B  
                  _Led_DynamicStorm 05A5       __size_of_Key_SetActionHandler 0005  
       Key_SetActionHandler@handler 0049                         __end_ofPL10 064C  
                       __end_ofPL20 067B                         __end_ofPL12 0658  
                       __end_ofPL30 0699                         __end_ofPL22 0682  
                       __end_ofPL14 0660                         __end_ofPL40 036F  
                       __end_ofPL32 06A1                         __end_ofPL24 0689  
                       __end_ofPL16 066A                         __end_ofPL34 06A7  
                       __end_ofPL26 07CD                         __end_ofPL18 0674  
                       __end_ofPL36 06AE                         __end_ofPL28 0691  
                       __end_ofPL38 036A                 start_initialization 001C  
                 __size_ofi1___wmul 0015                         __end_of_ISR 001A  
          __size_of_PWM2_Initialize 0005         __size_of_Led_TurnOnBlueRamp 0003  
             FLASH_EraseBlock@state 004B      __size_ofi1_Led_TurnOnWhiteRamp 0005  
     __end_ofi1_Led_TurnOnWhiteRamp 054F              __end_of_ADC_Conversion 00DB  
                 __size_of_Led_Ramp 003D                   __size_of_Key_Read 0047  
                 __size_of_Key_Scan 0059            __size_of_PWM3_Initialize 0005  
             _Led_SaveParaIfChanged 022F                            ??___wmul 004D  
          __end_of_Audio_Initialize 0121                         __pdataBANK0 0055  
             Led_DynamicStorm@F4469 0055            __end_of_FLASH_EraseBlock 0348  
                 i1_Led_TurnOffRamp 0614           __size_ofi1_ADC_Conversion 001B  
                    i1_EUSART_Write 0507                  ?i1_Led_TurnOffRamp 0070  
       __end_of_EUSART_Transmit_ISR 07E3            __size_of_Led_TurnOffRamp 000B  
           ?_OSC_Initialize_Default 0070                           ___latbits 0001  
                     __pcstackBANK0 0042            __size_of_PWM4_Initialize 0005  
            Audio_SelectSound@index 0071                 ??i1_Led_TurnOffRamp 0070  
                 ADC_Conversion@chn 004C                     ?_ADC_Conversion 0049  
          __end_of_FLASH_ReadBuffer 01FF                            ?_Led_Run 0070  
                      _key_press_cb 002D         __size_of_PWM1_LoadDutyValue 000F  
         Audio_SelectSound@checksum 0072                    ??_PIN_Initialize 0049  
__size_of_EUSART_Initialize_Default 0014           __end_ofi1_Led_TurnOffRamp 061E  
        ?_EUSART_Initialize_Default 0070              __end_ofi1_EUSART_Write 051B  
                 ??_PWM1_Initialize 0049                           __pswtext1 0807  
                  i1_Led_Initialize 052E      __end_of_OSC_Initialize_Default 025A  
                 Key_Scan@idleCount 0029                    ??_Audio_GetValue 004F  
          __end_of_Led_OnKeyPressed 0473                     _Audio_SetVolume 0133  
              i1Audio_SetVolume@vol 0071                   ??_PWM2_Initialize 0049  
                       _audio_value 0035                      ___wmul@product 004D  
                         clear_ram0 0F6B                            _PIE1bits 0091  
          __size_of_TMR2_StartTimer 0003              ?_Led_SaveParaIfChanged 0070  
              i1Led_TurnOnAllRamp@i 0070                            _PIR1bits 0011  
                  ??_FLASH_ReadByte 004B                            _TMR2_ISR 07F2  
                   _Audio_StopSound 0121                    EUSART_Write@byte 0049  
 __end_of_EUSART_Initialize_Default 0364        __end_ofi1_Led_TurnOnBlueRamp 052E  
                   ?i1_EUSART_Write 0070                   ??_PWM3_Initialize 0049  
                        _ADCON0bits 009D                   ___wmul@multiplier 0049  
                          i1___wmul 05FF   __size_of_TMR2_SetInterruptHandler 0005  
         ?_TMR2_SetInterruptHandler 0049                   Util_IncValue@pSrc 0078  
                  ??_Led_Initialize 004A                            _Led_Ramp 0776  
                          _Key_Read 0714                   ??_Led_TurnOffRamp 0049  
                          _Key_Scan 06BB                FLASH_EraseBlock@addr 0049  
          __end_of_Led_DynamicCloud 05A5                   ??_PWM4_Initialize 0049  
          ??_ADC_Initialize_Default 0049            __end_of_FLASH_WriteBlock 0329  
          __end_of_Led_DynamicStorm 05FF                    __size_of_Led_Run 000D  
      __end_of_Interrupt_Initialize 0181                            _gLedPara 00C0  
        __size_ofi1_Led_TurnOffRamp 000A                   _Audio_SetPlayMode 0149  
                       _key_idle_cb 002B                    i1_ADC_Conversion 075B  
                 _Audio_SelectSound 04E4                  ?_Audio_SetPlayMode 0070  
                _PWM3_LoadDutyValue 0F71             __end_of_Audio_SetVolume 0149  
                ?_Audio_SelectSound 0070                FLASH_ReadBuffer@addr 004C  
               ??_Audio_SetPlayMode 004A                            __ptext10 0350  
                          __ptext11 0348                            __ptext20 0181  
                          __ptext12 022F                            __ptext21 01E7  
                          __ptext13 02D4                            __ptext30 0160  
                          __ptext22 01FF                            __ptext14 0329  
                          __ptext31 0068                            __ptext23 0175  
                          __ptext15 0218                            __ptext40 054F  
                          __ptext32 0293                            __ptext24 01E2  
                          __ptext16 02CF                            __ptext41 05FF  
                          __ptext33 00BA                            __ptext25 02A8  
                          __ptext17 02CC                            __ptext50 051B  
                          __ptext42 07E3                            __ptext26 00DB  
                          __ptext18 02B8                            __ptext51 0614  
                          __ptext43 0F71                            __ptext35 07F2  
                          __ptext27 0121                            __ptext19 02AD  
                          __ptext52 04BB                            __ptext44 04E4  
                          __ptext36 06AE                            __ptext28 0133  
                          __ptext53 04CD                            __ptext45 06BB  
                          __ptext37 036F                            __ptext29 0149  
                          __ptext54 0507                            __ptext46 03A9  
                          __ptext38 0776                            __ptext55 0497  
                          __ptext47 052E                            __ptext39 05A5  
                          __ptext56 0473                            __ptext48 054A  
                          __ptext57 0714                            __ptext49 052B  
                          __ptext58 075B                 ?_PWM3_LoadDutyValue 0070  
                          __ptext59 07CD                FLASH_ReadBuffer@size 004E  
               ??_Audio_SelectSound 0071                 Led_OnKeyPressed@key 0079  
                          _keyValue 003D                            _loadDuty 005D  
      __end_of_Key_SetActionHandler 02AD                       __size_of_main 0021  
           __end_of_Audio_StopSound 0133         __end_of_Led_TurnOnWhiteRamp 02D4  
              ??_PWM3_LoadDutyValue 0072         __end_ofi1_Led_TurnOnAllRamp 052B  
         __end_of_Audio_SetPlayMode 0160                            _txRemain 0040  
                          int$flags 007E                       ?_Led_InitPara 0070  
         __end_of_Audio_SelectSound 0507                   ?_Audio_Initialize 0070  
                 ??_TMR2_StartTimer 0049                    Key_Scan@rptCount 003B  
                ??_Audio_Initialize 004C                   ?_FLASH_EraseBlock 0049  
                       _OSCSTATbits 009A                  ??_FLASH_EraseBlock 004B  
                        _INTCONbits 000B              __size_of_Util_DecValue 0024  
        __end_of_Led_TurnOnBlueRamp 02CF                    ??_ADC_Conversion 004B  
                     ?_Led_RunMusic 0070            ?_TMR2_Initialize_Default 0070  
                          intlevel1 0000              __size_of_Util_IncValue 0024  
               FLASH_ReadBuffer@buf 0050                   ?_FLASH_ReadBuffer 004C  
             i1_Led_TurnOnWhiteRamp 054A                i1_Led_TurnOnBlueRamp 052B  
          __end_ofi1_Led_Initialize 054A     __size_of_ADC_Initialize_Default 0008  
                 __CFG_CLKOUTEN$OFF 0000                  i1EUSART_Write@byte 0070  
                ??_FLASH_ReadBuffer 004F                     _PWM1_Initialize 0271  
                   Key_Scan@lastKey 003C                      ??_Led_InitPara 0052  
       PWM3_LoadDutyValue@dutyValue 0070         ??_EUSART_Initialize_Default 0049  
               FLASH_ReadByte@state 004B                _Audio_Initialize$595 004E  
                  ?_Audio_SetVolume 0070                     _PWM2_Initialize 0277  
                    ??_Led_RunMusic 007C                          Led_Run@cnt 003E  
                  _tmr2_isr_handler 0037                _Interrupt_Initialize 0175  
                FLASH_ReadByte@addr 0049                   ?_Led_OnKeyPressed 0079  
      __size_of_EUSART_Transmit_ISR 0016                   FLASH_ReadBuffer@i 0051  
           ??_Led_SaveParaIfChanged 0054               ?i1_Led_TurnOnBlueRamp 0070  
                Audio_SetVolume@vol 004A                  ??_Led_OnKeyPressed 007A  
        __end_of_PWM1_LoadDutyValue 07F2                       _Util_DecValue 0473  
                  ?_Audio_StopSound 0070                     _PWM3_Initialize 027C  
                Led_TurnOnAllRamp@i 0049  
